#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Backpedal

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK::Params
{

// Function STT_Backpedal.STT_Backpedal_C.AdjustDirectionByNav
// 0x0170 (0x0170 - 0x0000)
struct STT_Backpedal_C_AdjustDirectionByNav final
{
public:
	struct FVector                                Original_Direction;                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Length;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustedDirection;                                 // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProjectedLocation;                                 // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetNavAgentLocation_ReturnValue;          // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecastNavMesh*                         CallFunc_GetActorOfClass_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetNavAgentLocation_ReturnValue_1;        // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_ProjectPointToNavigation_ProjectedLocation; // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_ProjectPointToNavigation_ReturnValue;  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Backpedal_C_AdjustDirectionByNav) == 0x000008, "Wrong alignment on STT_Backpedal_C_AdjustDirectionByNav");
static_assert(sizeof(STT_Backpedal_C_AdjustDirectionByNav) == 0x000170, "Wrong size on STT_Backpedal_C_AdjustDirectionByNav");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, Original_Direction) == 0x000000, "Member 'STT_Backpedal_C_AdjustDirectionByNav::Original_Direction' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, Length) == 0x000018, "Member 'STT_Backpedal_C_AdjustDirectionByNav::Length' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, AdjustedDirection) == 0x000020, "Member 'STT_Backpedal_C_AdjustDirectionByNav::AdjustedDirection' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, Valid) == 0x000038, "Member 'STT_Backpedal_C_AdjustDirectionByNav::Valid' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, ProjectedLocation) == 0x000040, "Member 'STT_Backpedal_C_AdjustDirectionByNav::ProjectedLocation' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000070, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_Normal_ReturnValue) == 0x000088, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000A0, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_GetNavAgentLocation_ReturnValue) == 0x0000B8, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_GetNavAgentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_GetActorOfClass_ReturnValue) == 0x0000D0, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_GetNavAgentLocation_ReturnValue_1) == 0x0000D8, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_GetNavAgentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_Add_VectorVector_ReturnValue) == 0x0000F0, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_K2_ProjectPointToNavigation_ProjectedLocation) == 0x000108, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_K2_ProjectPointToNavigation_ProjectedLocation' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_K2_ProjectPointToNavigation_ReturnValue) == 0x000120, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_K2_ProjectPointToNavigation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000128, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_BreakVector_X) == 0x000140, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_BreakVector_Y) == 0x000148, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_BreakVector_Z) == 0x000150, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_AdjustDirectionByNav, CallFunc_MakeVector_ReturnValue_1) == 0x000158, "Member 'STT_Backpedal_C_AdjustDirectionByNav::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.ExecuteUbergraph_STT_Backpedal
// 0x0508 (0x0508 - 0x0000)
struct STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRotationLocked_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTreeTransitionResult             K2Node_Event_Transition_1;                         // 0x0008(0x002E)(ConstParm, NoDestructor)
	struct FStateTreeTransitionResult             K2Node_Event_Transition;                           // 0x0036(0x002E)(ConstParm, NoDestructor)
	float                                         K2Node_Event_DeltaTime;                            // 0x0064(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExprValue                             CallFunc_EvaluateExpression_Source_ReturnValue;    // 0x0070(0x00C8)()
	class ABaseCharacter*                         CallFunc_FindCharacter_ReturnValue;                // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExprValue                             CallFunc_EvaluateExpression_Source_ReturnValue_1;  // 0x0148(0x00C8)()
	struct FExprValue                             CallFunc_EvaluateExpression_Source_ReturnValue_2;  // 0x0210(0x00C8)()
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetOuterObject_ReturnValue;               // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         K2Node_DynamicCast_AsBase_Character;               // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPCPawn_C*                             K2Node_DynamicCast_AsNPCPawn;                      // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AdjustDirectionByNav_AdjustedDirection;   // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AdjustDirectionByNav_Valid;               // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_AdjustDirectionByNav_ProjectedLocation;   // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Get_Character_Closest_Nav_Location_Location; // 0x03C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x03E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleBetweenVectors_Angle;             // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0439(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43A[0x6];                                      // 0x043A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0470(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x04A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x04C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C3[0x1];                                      // 0x04C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_OriginalSpeed_ImplicitCast;     // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast_1;    // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2;   // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal) == 0x000008, "Wrong alignment on STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal");
static_assert(sizeof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal) == 0x000508, "Wrong size on STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, EntryPoint) == 0x000000, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::EntryPoint' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsRotationLocked_ReturnValue) == 0x000004, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsRotationLocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_Event_Transition_1) == 0x000008, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_Event_Transition_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_Event_Transition) == 0x000036, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_Event_Transition' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_Event_DeltaTime) == 0x000064, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsValid_ReturnValue_1) == 0x000068, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_EvaluateExpression_Source_ReturnValue) == 0x000070, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_EvaluateExpression_Source_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_FindCharacter_ReturnValue) == 0x000138, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_FindCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsValid_ReturnValue_2) == 0x000140, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_EvaluateExpression_Source_ReturnValue_1) == 0x000148, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_EvaluateExpression_Source_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_EvaluateExpression_Source_ReturnValue_2) == 0x000210, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_EvaluateExpression_Source_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0002D8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_SwitchEnum_CmpSuccess) == 0x0002E0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsValid_ReturnValue_3) == 0x0002E1, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_GetOuterObject_ReturnValue) == 0x0002E8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_GetOuterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_DynamicCast_AsBase_Character) == 0x0002F0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_DynamicCast_AsBase_Character' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_DynamicCast_bSuccess) == 0x0002F8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_DynamicCast_AsNPCPawn) == 0x000300, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_DynamicCast_AsNPCPawn' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_DynamicCast_bSuccess_1) == 0x000308, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000310, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000328, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000330, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_AdjustDirectionByNav_AdjustedDirection) == 0x000338, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_AdjustDirectionByNav_AdjustedDirection' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_AdjustDirectionByNav_Valid) == 0x000350, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_AdjustDirectionByNav_Valid' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_AdjustDirectionByNav_ProjectedLocation) == 0x000358, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_AdjustDirectionByNav_ProjectedLocation' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Normal_ReturnValue) == 0x000370, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000388, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakRotator_Roll) == 0x000390, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakRotator_Pitch) == 0x000394, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakRotator_Yaw) == 0x000398, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0003A0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0003A8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0003A9, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_MakeLiteralByte_ReturnValue) == 0x0003AA, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BooleanAND_ReturnValue_1) == 0x0003AB, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0003AC, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Conv_IntToByte_ReturnValue) == 0x0003B0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0003B8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003C0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Get_Character_Closest_Nav_Location_Location) == 0x0003C8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Get_Character_Closest_Nav_Location_Location' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0003E0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakVector_X) == 0x0003F8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakVector_Y) == 0x000400, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakVector_Z) == 0x000408, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000410, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_MakeVector_ReturnValue) == 0x000418, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_GetAngleBetweenVectors_Angle) == 0x000430, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_GetAngleBetweenVectors_Angle' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000438, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000439, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000440, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000458, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000470, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakVector_X_1) == 0x000488, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakVector_Y_1) == 0x000490, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BreakVector_Z_1) == 0x000498, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsValid_ReturnValue_4) == 0x0004A0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_MakeVector_ReturnValue_1) == 0x0004A8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_IsValid_ReturnValue_5) == 0x0004C0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BooleanAND_ReturnValue_2) == 0x0004C1, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_BooleanOR_ReturnValue) == 0x0004C2, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x0004C4, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0004C8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0004D0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0004D8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0004E0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_VariableSet_OriginalSpeed_ImplicitCast) == 0x0004E8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_VariableSet_OriginalSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x0004F0, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast_1) == 0x0004F8, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2) == 0x000500, "Member 'STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.Get Character Closest Nav Location
// 0x0078 (0x0078 - 0x0000)
struct STT_Backpedal_C_Get_Character_Closest_Nav_Location final
{
public:
	class ABaseCharacter*                         Agent_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetNavAgentLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecastNavMesh*                         CallFunc_GetActorOfClass_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_ProjectPointToNavigation_ProjectedLocation; // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_ProjectPointToNavigation_ReturnValue;  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Backpedal_C_Get_Character_Closest_Nav_Location) == 0x000008, "Wrong alignment on STT_Backpedal_C_Get_Character_Closest_Nav_Location");
static_assert(sizeof(STT_Backpedal_C_Get_Character_Closest_Nav_Location) == 0x000078, "Wrong size on STT_Backpedal_C_Get_Character_Closest_Nav_Location");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, Agent_0) == 0x000000, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::Agent_0' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, Location) == 0x000008, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::Location' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, CallFunc_GetNavAgentLocation_ReturnValue) == 0x000038, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::CallFunc_GetNavAgentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, CallFunc_GetActorOfClass_ReturnValue) == 0x000050, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, CallFunc_K2_ProjectPointToNavigation_ProjectedLocation) == 0x000058, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::CallFunc_K2_ProjectPointToNavigation_ProjectedLocation' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_Get_Character_Closest_Nav_Location, CallFunc_K2_ProjectPointToNavigation_ReturnValue) == 0x000070, "Member 'STT_Backpedal_C_Get_Character_Closest_Nav_Location::CallFunc_K2_ProjectPointToNavigation_ReturnValue' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.GetAngleBetweenVectors
// 0x0078 (0x0078 - 0x0000)
struct STT_Backpedal_C_GetAngleBetweenVectors final
{
public:
	struct FVector                                v1;                                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                v2;                                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Backpedal_C_GetAngleBetweenVectors) == 0x000008, "Wrong alignment on STT_Backpedal_C_GetAngleBetweenVectors");
static_assert(sizeof(STT_Backpedal_C_GetAngleBetweenVectors) == 0x000078, "Wrong size on STT_Backpedal_C_GetAngleBetweenVectors");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, v1) == 0x000000, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::v1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, v2) == 0x000018, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::v2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, Angle) == 0x000030, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::Angle' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, CallFunc_Normal_ReturnValue) == 0x000038, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, CallFunc_Normal_ReturnValue_1) == 0x000050, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, CallFunc_Dot_VectorVector_ReturnValue) == 0x000068, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_GetAngleBetweenVectors, CallFunc_DegAcos_ReturnValue) == 0x000070, "Member 'STT_Backpedal_C_GetAngleBetweenVectors::CallFunc_DegAcos_ReturnValue' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.ReceiveExitState
// 0x002E (0x002E - 0x0000)
struct STT_Backpedal_C_ReceiveExitState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_Backpedal_C_ReceiveExitState) == 0x000002, "Wrong alignment on STT_Backpedal_C_ReceiveExitState");
static_assert(sizeof(STT_Backpedal_C_ReceiveExitState) == 0x00002E, "Wrong size on STT_Backpedal_C_ReceiveExitState");
static_assert(offsetof(STT_Backpedal_C_ReceiveExitState, Transition) == 0x000000, "Member 'STT_Backpedal_C_ReceiveExitState::Transition' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.ReceiveLatentEnterState
// 0x002E (0x002E - 0x0000)
struct STT_Backpedal_C_ReceiveLatentEnterState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_Backpedal_C_ReceiveLatentEnterState) == 0x000002, "Wrong alignment on STT_Backpedal_C_ReceiveLatentEnterState");
static_assert(sizeof(STT_Backpedal_C_ReceiveLatentEnterState) == 0x00002E, "Wrong size on STT_Backpedal_C_ReceiveLatentEnterState");
static_assert(offsetof(STT_Backpedal_C_ReceiveLatentEnterState, Transition) == 0x000000, "Member 'STT_Backpedal_C_ReceiveLatentEnterState::Transition' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.ReceiveLatentTick
// 0x0004 (0x0004 - 0x0000)
struct STT_Backpedal_C_ReceiveLatentTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Backpedal_C_ReceiveLatentTick) == 0x000004, "Wrong alignment on STT_Backpedal_C_ReceiveLatentTick");
static_assert(sizeof(STT_Backpedal_C_ReceiveLatentTick) == 0x000004, "Wrong size on STT_Backpedal_C_ReceiveLatentTick");
static_assert(offsetof(STT_Backpedal_C_ReceiveLatentTick, DeltaTime) == 0x000000, "Member 'STT_Backpedal_C_ReceiveLatentTick::DeltaTime' has a wrong offset!");

// Function STT_Backpedal.STT_Backpedal_C.RotateToTarget
// 0x0190 (0x0190 - 0x0000)
struct STT_Backpedal_C_RotateToTarget final
{
public:
	struct FVector                                TargetVec;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Source;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        YawDelta;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RealYawDelta;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawDiff;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Backpedal_C_RotateToTarget) == 0x000008, "Wrong alignment on STT_Backpedal_C_RotateToTarget");
static_assert(sizeof(STT_Backpedal_C_RotateToTarget) == 0x000190, "Wrong size on STT_Backpedal_C_RotateToTarget");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, TargetVec) == 0x000000, "Member 'STT_Backpedal_C_RotateToTarget::TargetVec' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, Source) == 0x000018, "Member 'STT_Backpedal_C_RotateToTarget::Source' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, YawDelta) == 0x000020, "Member 'STT_Backpedal_C_RotateToTarget::YawDelta' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, RealYawDelta) == 0x000028, "Member 'STT_Backpedal_C_RotateToTarget::RealYawDelta' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, YawDiff) == 0x000030, "Member 'STT_Backpedal_C_RotateToTarget::YawDiff' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Roll) == 0x000054, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Pitch) == 0x000058, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Yaw) == 0x00005C, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000090, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakVector_X) == 0x0000A8, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakVector_Y) == 0x0000B0, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakVector_Z) == 0x0000B8, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Roll_1) == 0x0000C0, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Pitch_1) == 0x0000C4, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Yaw_1) == 0x0000C8, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_MakeRotFromX_ReturnValue) == 0x0000E8, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000100, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Roll_2) == 0x000108, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Pitch_2) == 0x00010C, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_BreakRotator_Yaw_2) == 0x000110, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_MakeRotator_ReturnValue) == 0x000118, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000130, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000138, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000140, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Abs_ReturnValue) == 0x000148, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000150, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000158, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_FMax_ReturnValue) == 0x000160, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_FMin_ReturnValue) == 0x000168, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000170, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000178, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000180, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Backpedal_C_RotateToTarget, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000188, "Member 'STT_Backpedal_C_RotateToTarget::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

}

