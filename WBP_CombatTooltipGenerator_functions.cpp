#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CombatTooltipGenerator

#include "Basic.hpp"

#include "WBP_CombatTooltipGenerator_classes.hpp"
#include "WBP_CombatTooltipGenerator_parameters.hpp"


namespace SDK
{

// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.AddRichTextMarkupToEachLine
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    markup                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Output                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::AddRichTextMarkupToEachLine(const class FString& Input, const class FString& markup, class FString* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "AddRichTextMarkupToEachLine");

	Params::WBP_CombatTooltipGenerator_C_AddRichTextMarkupToEachLine Parms{};

	Parms.Input = std::move(Input);
	Parms.markup = std::move(markup);

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.BuildFinalTooltip
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    txt                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::BuildFinalTooltip(const class FString& txt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "BuildFinalTooltip");

	Params::WBP_CombatTooltipGenerator_C_BuildFinalTooltip Parms{};

	Parms.txt = std::move(txt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.CheckSpecificEffectArgs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FEffectRecordBase&         EffectRecord                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class ABaseCharacter*                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString*                          ret                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::CheckSpecificEffectArgs(const class FString& Args, const struct FEffectRecordBase& EffectRecord, class ABaseCharacter* Source, class FString* ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "CheckSpecificEffectArgs");

	Params::WBP_CombatTooltipGenerator_C_CheckSpecificEffectArgs Parms{};

	Parms.Args = std::move(Args);
	Parms.EffectRecord = std::move(EffectRecord);
	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);

	if (ret != nullptr)
		*ret = std::move(Parms.ret);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.CheckSpecificLingeringEffectArgs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FLingeringEffectRecord&    rec                                                    (BlueprintVisible, BlueprintReadOnly, Parm)
// class ABaseCharacter*                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString*                          Str                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::CheckSpecificLingeringEffectArgs(const class FString& Args, const struct FLingeringEffectRecord& rec, class ABaseCharacter* Source, class FString* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "CheckSpecificLingeringEffectArgs");

	Params::WBP_CombatTooltipGenerator_C_CheckSpecificLingeringEffectArgs Parms{};

	Parms.Args = std::move(Args);
	Parms.rec = std::move(rec);
	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_CombatTooltipGenerator_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.EvalExpressionBool
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAoCExpression&                  Expression                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABaseCharacter*&                  Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class ABaseCharacter*&                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class ABaseCharacter*&                  Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class ABaseCharacter*&                  Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::EvalExpressionBool(struct FAoCExpression& Expression, class ABaseCharacter*& Source, class ABaseCharacter*& Target, class ABaseCharacter*& Instigator, class ABaseCharacter*& Owner, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "EvalExpressionBool");

	Params::WBP_CombatTooltipGenerator_C_EvalExpressionBool Parms{};

	Parms.Expression = std::move(Expression);
	Parms.Source = Source;
	Parms.Target = Target;
	Parms.Instigator = Instigator;
	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);

	Expression = std::move(Parms.Expression);
	Source = Parms.Source;
	Target = Parms.Target;
	Instigator = Parms.Instigator;
	Owner = Parms.Owner;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.EvalExpressionFloat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAoCExpression&                  Expression                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABaseCharacter*&                  Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class ABaseCharacter*&                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class ABaseCharacter*&                  Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class ABaseCharacter*&                  Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// double*                                 Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::EvalExpressionFloat(struct FAoCExpression& Expression, class ABaseCharacter*& Source, class ABaseCharacter*& Target, class ABaseCharacter*& Instigator, class ABaseCharacter*& Owner, double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "EvalExpressionFloat");

	Params::WBP_CombatTooltipGenerator_C_EvalExpressionFloat Parms{};

	Parms.Expression = std::move(Expression);
	Parms.Source = Source;
	Parms.Target = Target;
	Parms.Instigator = Instigator;
	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);

	Expression = std::move(Parms.Expression);
	Source = Parms.Source;
	Target = Parms.Target;
	Instigator = Parms.Instigator;
	Owner = Parms.Owner;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.ExecuteUbergraph_WBP_CombatTooltipGenerator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::ExecuteUbergraph_WBP_CombatTooltipGenerator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "ExecuteUbergraph_WBP_CombatTooltipGenerator");

	Params::WBP_CombatTooltipGenerator_C_ExecuteUbergraph_WBP_CombatTooltipGenerator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.FindFormat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGameplayTag>&            Tags                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText*                            Format                                                 (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::FindFormat(TArray<struct FGameplayTag>& Tags, class FText* Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "FindFormat");

	Params::WBP_CombatTooltipGenerator_C_FindFormat Parms{};

	Parms.Tags = std::move(Tags);

	UObject::ProcessEvent(Func, &Parms);

	Tags = std::move(Parms.Tags);

	if (Format != nullptr)
		*Format = std::move(Parms.Format);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.Get Stat Base By Init
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAoCPlayerController*             Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   statGuid                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   statInitGuid                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 base                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::Get_Stat_Base_By_Init(class AAoCPlayerController* Player, int64 statGuid, int64 statInitGuid, double* base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "Get Stat Base By Init");

	Params::WBP_CombatTooltipGenerator_C_Get_Stat_Base_By_Init Parms{};

	Parms.Player = Player;
	Parms.statGuid = statGuid;
	Parms.statInitGuid = statInitGuid;

	UObject::ProcessEvent(Func, &Parms);

	if (base != nullptr)
		*base = Parms.base;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetAbilityDescription_Internal
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAoCAbilityRecord&               Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString*                          Description                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetAbilityDescription_Internal(struct FAoCAbilityRecord& Ability, class FString* Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetAbilityDescription_Internal");

	Params::WBP_CombatTooltipGenerator_C_GetAbilityDescription_Internal Parms{};

	Parms.Ability = std::move(Ability);

	UObject::ProcessEvent(Func, &Parms);

	Ability = std::move(Parms.Ability);

	if (Description != nullptr)
		*Description = std::move(Parms.Description);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetAbilityDescriptionRichText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAoCAbilityRecord&         AbilityDescription                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FString>*                  EffectStrings                                          (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::GetAbilityDescriptionRichText(const struct FAoCAbilityRecord& AbilityDescription, TArray<class FString>* EffectStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetAbilityDescriptionRichText");

	Params::WBP_CombatTooltipGenerator_C_GetAbilityDescriptionRichText Parms{};

	Parms.AbilityDescription = std::move(AbilityDescription);

	UObject::ProcessEvent(Func, &Parms);

	if (EffectStrings != nullptr)
		*EffectStrings = std::move(Parms.EffectStrings);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetChunks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Description                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>*                  ret                                                    (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::GetChunks(const class FString& Description, TArray<class FString>* ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetChunks");

	Params::WBP_CombatTooltipGenerator_C_GetChunks Parms{};

	Parms.Description = std::move(Description);

	UObject::ProcessEvent(Func, &Parms);

	if (ret != nullptr)
		*ret = std::move(Parms.ret);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetChunks_FAST
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Description                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>*                  ret                                                    (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::GetChunks_FAST(const class FString& Description, TArray<class FString>* ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetChunks_FAST");

	Params::WBP_CombatTooltipGenerator_C_GetChunks_FAST Parms{};

	Parms.Description = std::move(Description);

	UObject::ProcessEvent(Func, &Parms);

	if (ret != nullptr)
		*ret = std::move(Parms.ret);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetDelimRest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Str                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Left                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          rest                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetDelimRest(const class FString& Str, class FString* Left, class FString* rest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetDelimRest");

	Params::WBP_CombatTooltipGenerator_C_GetDelimRest Parms{};

	Parms.Str = std::move(Str);

	UObject::ProcessEvent(Func, &Parms);

	if (Left != nullptr)
		*Left = std::move(Parms.Left);

	if (rest != nullptr)
		*rest = std::move(Parms.rest);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetDisplayStat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAoCStatsComponent*               Stats                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FStatTypeDefRecord&        StatRecord                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// double*                                 ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetDisplayStat(class UAoCStatsComponent* Stats, const struct FStatTypeDefRecord& StatRecord, double* ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetDisplayStat");

	Params::WBP_CombatTooltipGenerator_C_GetDisplayStat Parms{};

	Parms.Stats = Stats;
	Parms.StatRecord = std::move(StatRecord);

	UObject::ProcessEvent(Func, &Parms);

	if (ret != nullptr)
		*ret = Parms.ret;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetDisplayStatFromRaw
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStatTypeDefRecord&        StatRecord                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  Raw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 ret                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetDisplayStatFromRaw(const struct FStatTypeDefRecord& StatRecord, double Raw, double* ret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetDisplayStatFromRaw");

	Params::WBP_CombatTooltipGenerator_C_GetDisplayStatFromRaw Parms{};

	Parms.StatRecord = std::move(StatRecord);
	Parms.Raw = Raw;

	UObject::ProcessEvent(Func, &Parms);

	if (ret != nullptr)
		*ret = Parms.ret;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetEffectDescriptionRichText
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FEffectRecord&             EffectRecord                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FEffectInstUI&             EffectInst                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// TArray<class FString>*                  EffectStrings                                          (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::GetEffectDescriptionRichText(const struct FEffectRecord& EffectRecord, const struct FEffectInstUI& EffectInst, TArray<class FString>* EffectStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetEffectDescriptionRichText");

	Params::WBP_CombatTooltipGenerator_C_GetEffectDescriptionRichText Parms{};

	Parms.EffectRecord = std::move(EffectRecord);
	Parms.EffectInst = std::move(EffectInst);

	UObject::ProcessEvent(Func, &Parms);

	if (EffectStrings != nullptr)
		*EffectStrings = std::move(Parms.EffectStrings);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetEffectString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FEffectRecord&             Record                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FString&                    Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Str                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetEffectString(class ABaseCharacter* Source, const struct FEffectRecord& Record, const class FString& Args, class FString* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetEffectString");

	Params::WBP_CombatTooltipGenerator_C_GetEffectString Parms{};

	Parms.Source = Source;
	Parms.Record = std::move(Record);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetExpansionDescriptionText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FExpansionRecord&          ExpansionRecord                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CombatTooltipGenerator_C::GetExpansionDescriptionText(const struct FExpansionRecord& ExpansionRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetExpansionDescriptionText");

	Params::WBP_CombatTooltipGenerator_C_GetExpansionDescriptionText Parms{};

	Parms.ExpansionRecord = std::move(ExpansionRecord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetGuildEffectDescriptionRichText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGuildEffectRecord&        GuildEffectRecord                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CombatTooltipGenerator_C::GetGuildEffectDescriptionRichText(const struct FGuildEffectRecord& GuildEffectRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetGuildEffectDescriptionRichText");

	Params::WBP_CombatTooltipGenerator_C_GetGuildEffectDescriptionRichText Parms{};

	Parms.GuildEffectRecord = std::move(GuildEffectRecord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetHitString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FAbilityHitRecord&         Record                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FString&                    Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Str                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetHitString(class ABaseCharacter* Source, const struct FAbilityHitRecord& Record, const class FString& Args, class FString* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetHitString");

	Params::WBP_CombatTooltipGenerator_C_GetHitString Parms{};

	Parms.Source = Source;
	Parms.Record = std::move(Record);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetItemCertificationText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CombatTooltipGenerator_C::GetItemCertificationText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetItemCertificationText");

	Params::WBP_CombatTooltipGenerator_C_GetItemCertificationText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetItemDescriptionText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FItemRecord&               ItemRecord                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CombatTooltipGenerator_C::GetItemDescriptionText(const struct FItemRecord& ItemRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetItemDescriptionText");

	Params::WBP_CombatTooltipGenerator_C_GetItemDescriptionText Parms{};

	Parms.ItemRecord = std::move(ItemRecord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetPercentValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isPercent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Str                                                    (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::GetPercentValue(double Value, bool isPercent, class FText* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetPercentValue");

	Params::WBP_CombatTooltipGenerator_C_GetPercentValue Parms{};

	Parms.Value = Value;
	Parms.isPercent = isPercent;

	UObject::ProcessEvent(Func, &Parms);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetRich
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Str                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FGameplayTag>&            Tags                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString*                          rich                                                   (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetRich(const class FString& Str, TArray<struct FGameplayTag>& Tags, class FString* rich)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetRich");

	Params::WBP_CombatTooltipGenerator_C_GetRich Parms{};

	Parms.Str = std::move(Str);
	Parms.Tags = std::move(Tags);

	UObject::ProcessEvent(Func, &Parms);

	Tags = std::move(Parms.Tags);

	if (rich != nullptr)
		*rich = std::move(Parms.rich);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetSkillTreeName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString*                          SkillTreeName                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetSkillTreeName(const class FString& String, class AActor* Actor, class FString* SkillTreeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetSkillTreeName");

	Params::WBP_CombatTooltipGenerator_C_GetSkillTreeName Parms{};

	Parms.String = std::move(String);
	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (SkillTreeName != nullptr)
		*SkillTreeName = std::move(Parms.SkillTreeName);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetStatContested
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RawStatValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int64                                   ContestedRatingCurve                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 ContestedValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetStatContested(double RawStatValue, int32 Level, int64 ContestedRatingCurve, double* ContestedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetStatContested");

	Params::WBP_CombatTooltipGenerator_C_GetStatContested Parms{};

	Parms.RawStatValue = RawStatValue;
	Parms.Level = Level;
	Parms.ContestedRatingCurve = ContestedRatingCurve;

	UObject::ProcessEvent(Func, &Parms);

	if (ContestedValue != nullptr)
		*ContestedValue = Parms.ContestedValue;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetStatContested_Target
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PercentValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PercentValue_Contesting                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 ContestedValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetStatContested_Target(double PercentValue, double PercentValue_Contesting, double* ContestedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetStatContested_Target");

	Params::WBP_CombatTooltipGenerator_C_GetStatContested_Target Parms{};

	Parms.PercentValue = PercentValue;
	Parms.PercentValue_Contesting = PercentValue_Contesting;

	UObject::ProcessEvent(Func, &Parms);

	if (ContestedValue != nullptr)
		*ContestedValue = Parms.ContestedValue;
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetStatDescription
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStatTypeDefRecord&              Stat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CombatTooltipGenerator_C::GetStatDescription(struct FStatTypeDefRecord& Stat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetStatDescription");

	Params::WBP_CombatTooltipGenerator_C_GetStatDescription Parms{};

	Parms.Stat = std::move(Stat);

	UObject::ProcessEvent(Func, &Parms);

	Stat = std::move(Parms.Stat);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetStatDescriptionRichText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStatTypeDefRecord&        StatRecord                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CombatTooltipGenerator_C::GetStatDescriptionRichText(const struct FStatTypeDefRecord& StatRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetStatDescriptionRichText");

	Params::WBP_CombatTooltipGenerator_C_GetStatDescriptionRichText Parms{};

	Parms.StatRecord = std::move(StatRecord);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetStatModString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FStatModRecord&            Record                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FString&                    Args                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          Str                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetStatModString(class ABaseCharacter* Source, const struct FStatModRecord& Record, const class FString& Args, class FString* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetStatModString");

	Params::WBP_CombatTooltipGenerator_C_GetStatModString Parms{};

	Parms.Source = Source;
	Parms.Record = std::move(Record);
	Parms.Args = std::move(Args);

	UObject::ProcessEvent(Func, &Parms);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.GetTimeStr
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          Str                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::GetTimeStr(double Time, class FString* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "GetTimeStr");

	Params::WBP_CombatTooltipGenerator_C_GetTimeStr Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.ParseDescription
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    descr                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ABaseCharacter*                   Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FEffectRecord&             EffectRecord                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FAoCAbilityRecord&         AbilityRecord                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// class FString*                          Output                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::ParseDescription(const class FString& descr, class ABaseCharacter* Source, const struct FEffectRecord& EffectRecord, const struct FAoCAbilityRecord& AbilityRecord, class FString* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "ParseDescription");

	Params::WBP_CombatTooltipGenerator_C_ParseDescription Parms{};

	Parms.descr = std::move(descr);
	Parms.Source = Source;
	Parms.EffectRecord = std::move(EffectRecord);
	Parms.AbilityRecord = std::move(AbilityRecord);

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CombatTooltipGenerator_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "PreConstruct");

	Params::WBP_CombatTooltipGenerator_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CombatTooltipGenerator.WBP_CombatTooltipGenerator_C.RecurseFindRecord
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FAoCAbilityRecord&         AbilityRecord                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FAbilityHitRecord&         HitRecord                                              (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FEffectRecord&             EffectRecord                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FStatModRecord&            StatModRecord                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FLingeringEffectRecord&    LingeringEffectRecord                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FProjectileRecord&         ProjectileRecord                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FReactionRecord&           ReactionRecord                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FAbilityHitRecord*               Hit                                                    (Parm, OutParm)
// struct FEffectRecord*                   Effect                                                 (Parm, OutParm)
// struct FStatModRecord*                  StatMod                                                (Parm, OutParm)
// struct FLingeringEffectRecord*          LingeringEffect                                        (Parm, OutParm)
// struct FProjectileRecord*               Projectile                                             (Parm, OutParm)
// struct FReactionRecord*                 reaction                                               (Parm, OutParm)

void UWBP_CombatTooltipGenerator_C::RecurseFindRecord(const class FString& Input, const struct FAoCAbilityRecord& AbilityRecord, const struct FAbilityHitRecord& HitRecord, const struct FEffectRecord& EffectRecord, const struct FStatModRecord& StatModRecord, const struct FLingeringEffectRecord& LingeringEffectRecord, const struct FProjectileRecord& ProjectileRecord, const struct FReactionRecord& ReactionRecord, struct FAbilityHitRecord* Hit, struct FEffectRecord* Effect, struct FStatModRecord* StatMod, struct FLingeringEffectRecord* LingeringEffect, struct FProjectileRecord* Projectile, struct FReactionRecord* reaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CombatTooltipGenerator_C", "RecurseFindRecord");

	Params::WBP_CombatTooltipGenerator_C_RecurseFindRecord Parms{};

	Parms.Input = std::move(Input);
	Parms.AbilityRecord = std::move(AbilityRecord);
	Parms.HitRecord = std::move(HitRecord);
	Parms.EffectRecord = std::move(EffectRecord);
	Parms.StatModRecord = std::move(StatModRecord);
	Parms.LingeringEffectRecord = std::move(LingeringEffectRecord);
	Parms.ProjectileRecord = std::move(ProjectileRecord);
	Parms.ReactionRecord = std::move(ReactionRecord);

	UObject::ProcessEvent(Func, &Parms);

	if (Hit != nullptr)
		*Hit = std::move(Parms.Hit);

	if (Effect != nullptr)
		*Effect = std::move(Parms.Effect);

	if (StatMod != nullptr)
		*StatMod = std::move(Parms.StatMod);

	if (LingeringEffect != nullptr)
		*LingeringEffect = std::move(Parms.LingeringEffect);

	if (Projectile != nullptr)
		*Projectile = std::move(Parms.Projectile);

	if (reaction != nullptr)
		*reaction = std::move(Parms.reaction);
}

}

