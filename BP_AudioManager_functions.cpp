#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioManager

#include "Basic.hpp"

#include "BP_AudioManager_classes.hpp"
#include "BP_AudioManager_parameters.hpp"


namespace SDK
{

// Function BP_AudioManager.BP_AudioManager_C.ActivateUnderwaterAudio
// (BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::ActivateUnderwaterAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "ActivateUnderwaterAudio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.AddInteriorOverride
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSStartStopAudioEvents&    StartStopOverride                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::AddInteriorOverride(const struct FSStartStopAudioEvents& StartStopOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "AddInteriorOverride");

	Params::BP_AudioManager_C_AddInteriorOverride Parms{};

	Parms.StartStopOverride = std::move(StartStopOverride);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.Apply Override Biome Settings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::Apply_Override_Biome_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Apply Override Biome Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.Apply Per Biome Settings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::Apply_Per_Biome_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Apply Per Biome Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.Apply Spline Modifiers
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::Apply_Spline_Modifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Apply Spline Modifiers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.DeactivateUnderwaterAudio
// (BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::DeactivateUnderwaterAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "DeactivateUnderwaterAudio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.ExecuteUbergraph_BP_AudioManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::ExecuteUbergraph_BP_AudioManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "ExecuteUbergraph_BP_AudioManager");

	Params::BP_AudioManager_C_ExecuteUbergraph_BP_AudioManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.Get Audio Wind Intensity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Noisy_Wind_Speed_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Wind_Speed_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Wind_Speed_Variation_Amplifier_0                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Wind_Speed_Amplitude_0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Audio_Wind_Intensity                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::Get_Audio_Wind_Intensity(double Noisy_Wind_Speed_0, double Wind_Speed_0, double Wind_Speed_Variation_Amplifier_0, double Wind_Speed_Amplitude_0, double* Audio_Wind_Intensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Get Audio Wind Intensity");

	Params::BP_AudioManager_C_Get_Audio_Wind_Intensity Parms{};

	Parms.Noisy_Wind_Speed_0 = Noisy_Wind_Speed_0;
	Parms.Wind_Speed_0 = Wind_Speed_0;
	Parms.Wind_Speed_Variation_Amplifier_0 = Wind_Speed_Variation_Amplifier_0;
	Parms.Wind_Speed_Amplitude_0 = Wind_Speed_Amplitude_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Audio_Wind_Intensity != nullptr)
		*Audio_Wind_Intensity = Parms.Audio_Wind_Intensity;
}


// Function BP_AudioManager.BP_AudioManager_C.Initialize Biome Music
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::Initialize_Biome_Music()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Initialize Biome Music");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.InsertOutdoorSettings
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSStartStopAudioEvents&    OutdoorSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::InsertOutdoorSettings(const struct FSStartStopAudioEvents& OutdoorSettings, int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "InsertOutdoorSettings");

	Params::BP_AudioManager_C_InsertOutdoorSettings Parms{};

	Parms.OutdoorSettings = std::move(OutdoorSettings);
	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.Music Beat Event
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BeatDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::Music_Beat_Event(float BeatDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Music Beat Event");

	Params::BP_AudioManager_C_Music_Beat_Event Parms{};

	Parms.BeatDuration = BeatDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.PopOutdoorSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSStartStopAudioEvents&    OutdoorSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FS_EnvironmentSettingsSwitches&OutdoorSettingsSwitches                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::PopOutdoorSettings(const struct FSStartStopAudioEvents& OutdoorSettings, const struct FS_EnvironmentSettingsSwitches& OutdoorSettingsSwitches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "PopOutdoorSettings");

	Params::BP_AudioManager_C_PopOutdoorSettings Parms{};

	Parms.OutdoorSettings = std::move(OutdoorSettings);
	Parms.OutdoorSettingsSwitches = std::move(OutdoorSettingsSwitches);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.PostEventArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UAkAudioEvent*>&           Events                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UAkComponent*                     AkComponent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::PostEventArray(TArray<class UAkAudioEvent*>& Events, class UAkComponent* AkComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "PostEventArray");

	Params::BP_AudioManager_C_PostEventArray Parms{};

	Parms.Events = std::move(Events);
	Parms.AkComponent = AkComponent;

	UObject::ProcessEvent(Func, &Parms);

	Events = std::move(Parms.Events);
}


// Function BP_AudioManager.BP_AudioManager_C.PushOutdoorSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSStartStopAudioEvents&    OutdoorSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FS_EnvironmentSettingsSwitches&OutdoorSettingsSwitches                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Priority                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::PushOutdoorSettings(const struct FSStartStopAudioEvents& OutdoorSettings, const struct FS_EnvironmentSettingsSwitches& OutdoorSettingsSwitches, int32 Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "PushOutdoorSettings");

	Params::BP_AudioManager_C_PushOutdoorSettings Parms{};

	Parms.OutdoorSettings = std::move(OutdoorSettings);
	Parms.OutdoorSettingsSwitches = std::move(OutdoorSettingsSwitches);
	Parms.Priority = Priority;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AudioManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_AudioManager_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "ReceiveTick");

	Params::BP_AudioManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.RemoveInteriorOverride
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::RemoveInteriorOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "RemoveInteriorOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.Run Audio
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  OutdoorAmount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dungeon_Amount_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Audio_Throttle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::Run_Audio(double OutdoorAmount, double Dungeon_Amount_0, const struct FVector2D& Location, bool Audio_Throttle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Run Audio");

	Params::BP_AudioManager_C_Run_Audio Parms{};

	Parms.OutdoorAmount = OutdoorAmount;
	Parms.Dungeon_Amount_0 = Dungeon_Amount_0;
	Parms.Location = std::move(Location);
	Parms.Audio_Throttle = Audio_Throttle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.Set Env Mod Override Amounts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  OutdoorAmount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Dungeon_Amount_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::Set_Env_Mod_Override_Amounts(double OutdoorAmount, double Dungeon_Amount_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Set Env Mod Override Amounts");

	Params::BP_AudioManager_C_Set_Env_Mod_Override_Amounts Parms{};

	Parms.OutdoorAmount = OutdoorAmount;
	Parms.Dungeon_Amount_0 = Dungeon_Amount_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.Set Settings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::Set_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Set Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.SetRTPCArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UAkRtpc*>&                 RTPCs                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::SetRTPCArray(TArray<class UAkRtpc*>& RTPCs, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "SetRTPCArray");

	Params::BP_AudioManager_C_SetRTPCArray Parms{};

	Parms.RTPCs = std::move(RTPCs);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	RTPCs = std::move(Parms.RTPCs);
}


// Function BP_AudioManager.BP_AudioManager_C.Stop Audio
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::Stop_Audio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "Stop Audio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.StoreBiomeAmounts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBiomeType                              Red_Category_Name_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Red_Cat_Amount_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBiomeType                              Green_Category_Name_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Green_Cat_Amount_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBiomeType                              Blue_Category_Name_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Blue_Cat_Amount_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBiomeType                              Alpha_Category_Name_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Alpha_Cat_Amount_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::StoreBiomeAmounts(EBiomeType Red_Category_Name_0, int32 Red_Cat_Amount_0, EBiomeType Green_Category_Name_0, int32 Green_Cat_Amount_0, EBiomeType Blue_Category_Name_0, int32 Blue_Cat_Amount_0, EBiomeType Alpha_Category_Name_0, int32 Alpha_Cat_Amount_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "StoreBiomeAmounts");

	Params::BP_AudioManager_C_StoreBiomeAmounts Parms{};

	Parms.Red_Category_Name_0 = Red_Category_Name_0;
	Parms.Red_Cat_Amount_0 = Red_Cat_Amount_0;
	Parms.Green_Category_Name_0 = Green_Category_Name_0;
	Parms.Green_Cat_Amount_0 = Green_Cat_Amount_0;
	Parms.Blue_Category_Name_0 = Blue_Category_Name_0;
	Parms.Blue_Cat_Amount_0 = Blue_Cat_Amount_0;
	Parms.Alpha_Category_Name_0 = Alpha_Category_Name_0;
	Parms.Alpha_Cat_Amount_0 = Alpha_Cat_Amount_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.SunAltitudePhaseChange
// (BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::SunAltitudePhaseChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "SunAltitudePhaseChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.UnbindSunUpdate
// (BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::UnbindSunUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "UnbindSunUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.UnbindUnderwaterDelegates
// (BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::UnbindUnderwaterDelegates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "UnbindUnderwaterDelegates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioManager.BP_AudioManager_C.UpdateInteriorAmount
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioManager_C::UpdateInteriorAmount(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "UpdateInteriorAmount");

	Params::BP_AudioManager_C_UpdateInteriorAmount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioManager.BP_AudioManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

