#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalAtmospherics

#include "Basic.hpp"

#include "BP_GlobalAtmospherics_classes.hpp"
#include "BP_GlobalAtmospherics_parameters.hpp"


namespace SDK
{

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Directional ROTs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time_of_Game_Year_Normalized_input                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Equator_Rotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_Of_Game_Day_24h                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_Of_Game_Year_Hours_0                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SunROTin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Moon1ROT                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Moon2ROT                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Moon3ROT                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ArbitSunROT                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SunROT                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

double ABP_GlobalAtmospherics_C::Directional_ROTs(double Time_of_Game_Year_Normalized_input, float Equator_Rotation, double Time_Of_Game_Day_24h, double Time_Of_Game_Year_Hours_0, const struct FRotator& SunROTin, const struct FRotator& Moon1ROT, const struct FRotator& Moon2ROT, const struct FRotator& Moon3ROT, const struct FRotator& ArbitSunROT, struct FRotator* SunROT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Directional ROTs");

	Params::BP_GlobalAtmospherics_C_Directional_ROTs Parms{};

	Parms.Time_of_Game_Year_Normalized_input = Time_of_Game_Year_Normalized_input;
	Parms.Equator_Rotation = Equator_Rotation;
	Parms.Time_Of_Game_Day_24h = Time_Of_Game_Day_24h;
	Parms.Time_Of_Game_Year_Hours_0 = Time_Of_Game_Year_Hours_0;
	Parms.SunROTin = std::move(SunROTin);
	Parms.Moon1ROT = std::move(Moon1ROT);
	Parms.Moon2ROT = std::move(Moon2ROT);
	Parms.Moon3ROT = std::move(Moon3ROT);
	Parms.ArbitSunROT = std::move(ArbitSunROT);

	UObject::ProcessEvent(Func, &Parms);

	if (SunROT != nullptr)
		*SunROT = std::move(Parms.SunROT);

	return Parms.ReturnValue;
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.ExecuteUbergraph_BP_GlobalAtmospherics
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::ExecuteUbergraph_BP_GlobalAtmospherics(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "ExecuteUbergraph_BP_GlobalAtmospherics");

	Params::BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Exp Height Fog Param Config
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  In_Time                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFogExp_Fog_Struct                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Exp_Height_Fog_Param_Config(double In_Time, struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFog* Exp_Fog_Struct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Exp Height Fog Param Config");

	Params::BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config Parms{};

	Parms.In_Time = In_Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Exp_Fog_Struct != nullptr)
		*Exp_Fog_Struct = std::move(Parms.Exp_Fog_Struct);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Get Sun Dot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Sun_Dot_Up_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Get_Sun_Dot(double* Sun_Dot_Up_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Get Sun Dot");

	Params::BP_GlobalAtmospherics_C_Get_Sun_Dot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Sun_Dot_Up_0 != nullptr)
		*Sun_Dot_Up_0 = Parms.Sun_Dot_Up_0;
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Is Valid Curve (Color)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCurveLinearColor*                Color_Curve                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Default_Color                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_Input                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Return_Color                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Is_Valid_Curve__Color_(class UCurveLinearColor* Color_Curve, const struct FLinearColor& Default_Color, double Time_Input, struct FLinearColor* Return_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Is Valid Curve (Color)");

	Params::BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_ Parms{};

	Parms.Color_Curve = Color_Curve;
	Parms.Default_Color = std::move(Default_Color);
	Parms.Time_Input = Time_Input;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Color != nullptr)
		*Return_Color = std::move(Parms.Return_Color);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Is Valid Curve (Float)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCurveFloat*                      Float_Curve                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Default_Float                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_Input                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Return_Float                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Is_Valid_Curve__Float_(class UCurveFloat* Float_Curve, double Default_Float, double Time_Input, double* Return_Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Is Valid Curve (Float)");

	Params::BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_ Parms{};

	Parms.Float_Curve = Float_Curve;
	Parms.Default_Float = Default_Float;
	Parms.Time_Input = Time_Input;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Float != nullptr)
		*Return_Float = Parms.Return_Float;
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Manage Directional Light Shadows
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GlobalAtmospherics_C::Manage_Directional_Light_Shadows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Manage Directional Light Shadows");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Moon Param Config
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time_Of_Game_Day_24h                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput_MoonMoon_Struct_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Moon_Param_Config(float Time_Of_Game_Day_24h, struct FSTRUCT_GlobalAtmosphereOutput_Moon* Moon_Struct_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Moon Param Config");

	Params::BP_GlobalAtmospherics_C_Moon_Param_Config Parms{};

	Parms.Time_Of_Game_Day_24h = Time_Of_Game_Day_24h;

	UObject::ProcessEvent(Func, &Parms);

	if (Moon_Struct_0 != nullptr)
		*Moon_Struct_0 = std::move(Parms.Moon_Struct_0);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "ReceiveTick");

	Params::BP_GlobalAtmospherics_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Expo Height Fog Params
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Override                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput   STRUCT_GlobalAtmosphereOutput                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// double                                  Player_Position_Z                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Fog_Height                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Run_Expo_Height_Fog_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput, double Player_Position_Z, double* Fog_Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Run Expo Height Fog Params");

	Params::BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params Parms{};

	Parms.Use_Override = Use_Override;
	Parms.STRUCT_GlobalAtmosphereOutput = std::move(STRUCT_GlobalAtmosphereOutput);
	Parms.Player_Position_Z = Player_Position_Z;

	UObject::ProcessEvent(Func, &Parms);

	if (Fog_Height != nullptr)
		*Fog_Height = Parms.Fog_Height;
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Moon Params
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Override                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput   STRUCT_GlobalAtmosphereOutput                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Run_Moon_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Run Moon Params");

	Params::BP_GlobalAtmospherics_C_Run_Moon_Params Parms{};

	Parms.Use_Override = Use_Override;
	Parms.STRUCT_GlobalAtmosphereOutput = std::move(STRUCT_GlobalAtmosphereOutput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Sky Atmosphere Params
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Override                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput   STRUCT_GlobalAtmosphereOutput                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Run_Sky_Atmosphere_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Run Sky Atmosphere Params");

	Params::BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params Parms{};

	Parms.Use_Override = Use_Override;
	Parms.STRUCT_GlobalAtmosphereOutput = std::move(STRUCT_GlobalAtmosphereOutput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Skylight Parameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Override                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput   STRUCT_GlobalAtmosphereOutput                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Run_Skylight_Parameters(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Run Skylight Parameters");

	Params::BP_GlobalAtmospherics_C_Run_Skylight_Parameters Parms{};

	Parms.Use_Override = Use_Override;
	Parms.STRUCT_GlobalAtmosphereOutput = std::move(STRUCT_GlobalAtmosphereOutput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Sun Params
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_Override                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput   STRUCT_GlobalAtmosphereOutput                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Run_Sun_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Run Sun Params");

	Params::BP_GlobalAtmospherics_C_Run_Sun_Params Parms{};

	Parms.Use_Override = Use_Override;
	Parms.STRUCT_GlobalAtmosphereOutput = std::move(STRUCT_GlobalAtmosphereOutput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.RunIt
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_GlobalAtmosphereOutput   Final_Struct_Input                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBPDA_CloudPreset_C*              Cloud_DA_for_testing                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Cloud_Testing                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPDA_CloudPreset_C*              CloudInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          Cloud_Stuct                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Player_Position_Z                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TOD_24hr                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Fog_Height                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::RunIt(const struct FSTRUCT_GlobalAtmosphereOutput& Final_Struct_Input, class UBPDA_CloudPreset_C* Cloud_DA_for_testing, bool Cloud_Testing, bool bNewVisibility, class UBPDA_CloudPreset_C* CloudInput, const struct FSTRUCT_CloudParameters& Cloud_Stuct, double Player_Position_Z, double TOD_24hr, double* Fog_Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "RunIt");

	Params::BP_GlobalAtmospherics_C_RunIt Parms{};

	Parms.Final_Struct_Input = std::move(Final_Struct_Input);
	Parms.Cloud_DA_for_testing = Cloud_DA_for_testing;
	Parms.Cloud_Testing = Cloud_Testing;
	Parms.bNewVisibility = bNewVisibility;
	Parms.CloudInput = CloudInput;
	Parms.Cloud_Stuct = std::move(Cloud_Stuct);
	Parms.Player_Position_Z = Player_Position_Z;
	Parms.TOD_24hr = TOD_24hr;

	UObject::ProcessEvent(Func, &Parms);

	if (Fog_Height != nullptr)
		*Fog_Height = Parms.Fog_Height;
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Sky Atmosphere Param Config
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Tine_of_Game_Day_24h                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphereStructOut                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Sky_Atmosphere_Param_Config(float Tine_of_Game_Day_24h, struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphere* StructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Sky Atmosphere Param Config");

	Params::BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config Parms{};

	Parms.Tine_of_Game_Day_24h = Tine_of_Game_Day_24h;

	UObject::ProcessEvent(Func, &Parms);

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Skylight Param Config
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  In_Time                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput_SkylightSkylight_Struct_0                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Skylight_Param_Config(double In_Time, struct FSTRUCT_GlobalAtmosphereOutput_Skylight* Skylight_Struct_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Skylight Param Config");

	Params::BP_GlobalAtmospherics_C_Skylight_Param_Config Parms{};

	Parms.In_Time = In_Time;

	UObject::ProcessEvent(Func, &Parms);

	if (Skylight_Struct_0 != nullptr)
		*Skylight_Struct_0 = std::move(Parms.Skylight_Struct_0);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Sun Param Config
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Tine_of_Game_Day_24h                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_GlobalAtmosphereOutput_SunSun_Struct_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Sun_Param_Config(float Tine_of_Game_Day_24h, struct FSTRUCT_GlobalAtmosphereOutput_Sun* Sun_Struct_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Sun Param Config");

	Params::BP_GlobalAtmospherics_C_Sun_Param_Config Parms{};

	Parms.Tine_of_Game_Day_24h = Tine_of_Game_Day_24h;

	UObject::ProcessEvent(Func, &Parms);

	if (Sun_Struct_0 != nullptr)
		*Sun_Struct_0 = std::move(Parms.Sun_Struct_0);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Volumetric Cloud Config
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_CloudParameters          STRUCT_CloudParameters                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Volumetric_Cloud_Config(const struct FSTRUCT_CloudParameters& STRUCT_CloudParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Volumetric Cloud Config");

	Params::BP_GlobalAtmospherics_C_Volumetric_Cloud_Config Parms{};

	Parms.STRUCT_CloudParameters = std::move(STRUCT_CloudParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Volumetric Cloud MID-Not Necessary?
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Use_New_Clouds_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GlobalAtmospherics_C::Volumetric_Cloud_MID_Not_Necessary_(bool Use_New_Clouds_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GlobalAtmospherics_C", "Volumetric Cloud MID-Not Necessary?");

	Params::BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_ Parms{};

	Parms.Use_New_Clouds_ = Use_New_Clouds_;

	UObject::ProcessEvent(Func, &Parms);
}

}

