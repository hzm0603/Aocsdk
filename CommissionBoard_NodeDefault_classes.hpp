#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommissionBoard_NodeDefault

#include "Basic.hpp"

#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CommissionBoard_NodeDefault.CommissionBoard_NodeDefault_C
// 0x00F0 (0x0498 - 0x03A8)
class ACommissionBoard_NodeDefault_C final : public ACommissionBulletinBoard
{
public:
	class UMapRegistrationComponentBP_C*          MapRegistrationComponentBP;                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Comm_Board_Sword_01;                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_010;                                  // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_07;                   // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_09;                                   // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_08;                                   // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_07;                                   // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_06;                                   // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_05;                                   // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_04;                                   // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Dagger_1H_Copper;                               // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_06;                   // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_05;                   // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_04;                   // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_03;                   // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_02;                   // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_Huekae_HuntingLodge_Papers_01;                   // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MonsterBountyBoard_Brazier1;                    // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MonsterBountyBoard_Brazier;                     // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_03;                                   // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_02;                                   // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_HuKae_Nail_01;                                   // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DwDnr_Props_Sword_02;                              // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DwDnr_Props_Sword_01;                              // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Adventuring_Board;                                 // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAoCNodePlotComponent*                  AoCNodePlot;                                       // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNameplateComponent*                    Nameplate;                                         // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractableComponent*                 Interactable;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CommissionBoard_NodeDefault_C">();
	}
	static class ACommissionBoard_NodeDefault_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACommissionBoard_NodeDefault_C>();
	}
};
static_assert(alignof(ACommissionBoard_NodeDefault_C) == 0x000008, "Wrong alignment on ACommissionBoard_NodeDefault_C");
static_assert(sizeof(ACommissionBoard_NodeDefault_C) == 0x000498, "Wrong size on ACommissionBoard_NodeDefault_C");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, MapRegistrationComponentBP) == 0x0003A8, "Member 'ACommissionBoard_NodeDefault_C::MapRegistrationComponentBP' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, SM_Comm_Board_Sword_01) == 0x0003B0, "Member 'ACommissionBoard_NodeDefault_C::SM_Comm_Board_Sword_01' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_010) == 0x0003B8, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_010' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_07) == 0x0003C0, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_07' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_09) == 0x0003C8, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_09' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_08) == 0x0003D0, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_08' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_07) == 0x0003D8, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_07' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_06) == 0x0003E0, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_06' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_05) == 0x0003E8, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_05' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_04) == 0x0003F0, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_04' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, SM_Dagger_1H_Copper) == 0x0003F8, "Member 'ACommissionBoard_NodeDefault_C::SM_Dagger_1H_Copper' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_06) == 0x000400, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_06' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_05) == 0x000408, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_05' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_04) == 0x000410, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_04' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_03) == 0x000418, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_03' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_02) == 0x000420, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_02' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_Huekae_HuntingLodge_Papers_01) == 0x000428, "Member 'ACommissionBoard_NodeDefault_C::S_Huekae_HuntingLodge_Papers_01' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, SM_MonsterBountyBoard_Brazier1) == 0x000430, "Member 'ACommissionBoard_NodeDefault_C::SM_MonsterBountyBoard_Brazier1' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, SM_MonsterBountyBoard_Brazier) == 0x000438, "Member 'ACommissionBoard_NodeDefault_C::SM_MonsterBountyBoard_Brazier' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_03) == 0x000440, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_03' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_02) == 0x000448, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_02' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, S_HuKae_Nail_01) == 0x000450, "Member 'ACommissionBoard_NodeDefault_C::S_HuKae_Nail_01' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, DwDnr_Props_Sword_02) == 0x000458, "Member 'ACommissionBoard_NodeDefault_C::DwDnr_Props_Sword_02' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, DwDnr_Props_Sword_01) == 0x000460, "Member 'ACommissionBoard_NodeDefault_C::DwDnr_Props_Sword_01' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, Adventuring_Board) == 0x000468, "Member 'ACommissionBoard_NodeDefault_C::Adventuring_Board' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, AoCNodePlot) == 0x000470, "Member 'ACommissionBoard_NodeDefault_C::AoCNodePlot' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, Nameplate) == 0x000478, "Member 'ACommissionBoard_NodeDefault_C::Nameplate' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, Interactable) == 0x000480, "Member 'ACommissionBoard_NodeDefault_C::Interactable' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeDefault_C, Name_0) == 0x000488, "Member 'ACommissionBoard_NodeDefault_C::Name_0' has a wrong offset!");

}

