#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Backpedal

#include "Basic.hpp"

#include "STT_Backpedal_classes.hpp"
#include "STT_Backpedal_parameters.hpp"


namespace SDK
{

// Function STT_Backpedal.STT_Backpedal_C.AdjustDirectionByNav
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Original_Direction                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         AdjustedDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ProjectedLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Backpedal_C::AdjustDirectionByNav(const struct FVector& Original_Direction, double Length, struct FVector* AdjustedDirection, bool* Valid, struct FVector* ProjectedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "AdjustDirectionByNav");

	Params::STT_Backpedal_C_AdjustDirectionByNav Parms{};

	Parms.Original_Direction = std::move(Original_Direction);
	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);

	if (AdjustedDirection != nullptr)
		*AdjustedDirection = std::move(Parms.AdjustedDirection);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (ProjectedLocation != nullptr)
		*ProjectedLocation = std::move(Parms.ProjectedLocation);
}


// Function STT_Backpedal.STT_Backpedal_C.ExecuteUbergraph_STT_Backpedal
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Backpedal_C::ExecuteUbergraph_STT_Backpedal(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "ExecuteUbergraph_STT_Backpedal");

	Params::STT_Backpedal_C_ExecuteUbergraph_STT_Backpedal Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Backpedal.STT_Backpedal_C.Get Character Closest Nav Location
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABaseCharacter*                   Agent_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Backpedal_C::Get_Character_Closest_Nav_Location(class ABaseCharacter* Agent_0, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "Get Character Closest Nav Location");

	Params::STT_Backpedal_C_Get_Character_Closest_Nav_Location Parms{};

	Parms.Agent_0 = Agent_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function STT_Backpedal.STT_Backpedal_C.GetAngleBetweenVectors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   v1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   v2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Backpedal_C::GetAngleBetweenVectors(const struct FVector& v1, const struct FVector& v2, double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "GetAngleBetweenVectors");

	Params::STT_Backpedal_C_GetAngleBetweenVectors Parms{};

	Parms.v1 = std::move(v1);
	Parms.v2 = std::move(v2);

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function STT_Backpedal.STT_Backpedal_C.ReceiveExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_Backpedal_C::ReceiveExitState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "ReceiveExitState");

	Params::STT_Backpedal_C_ReceiveExitState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Backpedal.STT_Backpedal_C.ReceiveLatentEnterState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_Backpedal_C::ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "ReceiveLatentEnterState");

	Params::STT_Backpedal_C_ReceiveLatentEnterState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Backpedal.STT_Backpedal_C.ReceiveLatentTick
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Backpedal_C::ReceiveLatentTick(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "ReceiveLatentTick");

	Params::STT_Backpedal_C_ReceiveLatentTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Backpedal.STT_Backpedal_C.RotateToTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetVec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  YawDelta                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Backpedal_C::RotateToTarget(const struct FVector& TargetVec, class AActor* Source, double YawDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Backpedal_C", "RotateToTarget");

	Params::STT_Backpedal_C_RotateToTarget Parms{};

	Parms.TargetVec = std::move(TargetVec);
	Parms.Source = Source;
	Parms.YawDelta = YawDelta;

	UObject::ProcessEvent(Func, &Parms);
}

}

