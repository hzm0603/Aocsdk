#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPDA_GlobalAtmospherics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPDA_GlobalAtmospherics.BPDA_GlobalAtmospherics_C
// 0x02E0 (0x0330 - 0x0050)
class UBPDA_GlobalAtmospherics_C final : public UPrimaryDataAsset
{
public:
	class UCurveFloat*                            Moon_Intensity;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Moon_Light_Color;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Source_Angle;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Source_Soft_Angle;                            // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Temperature;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Volumetric_Scattering;                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Specular_Scale;                               // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sky_Light_Intensity;                               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sky_Light_Color;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Intensity;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sun_Light_Color;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Source_Angle;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Source_Soft_Angle;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Temperature;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Volumetric_Scattering;                         // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Specular_Scale;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Clouds_Something_or_Other;                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Rayleigh_Scattering_Scale;                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Rayleigh_Scattering_Color;                         // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Rayleigh_Exponential_Distribution_Curve;           // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Mie_Scattering_Scale;                              // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Mie_Scattering_Color;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Mie_Absorption_Scale;                              // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Mie_Absorption_Color;                              // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Mie_Anisotropy;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Mie_Exponential_Distribution;                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Absorption_Scale;                                  // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Asorption_Color;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sky_Luminance_Factor;                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Height_Fog_Contribution;                           // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Second_Fog_Density;                                // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Second_Fog_Height_Falloff;                         // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Second_Fog_Height_Offset;                          // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Fog_Density;                                       // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Fog_Height_Falloff;                                // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Inscattering_Color;                            // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sky_Atmosphere_Ambient_Contribution_Color_Scale;   // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Fog_Max_Opacity;                                   // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Start_Distance;                                    // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Fog_Cutoff_Distance;                               // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Directional_Inscattering_Exponent;                 // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Directional_Inscattering_Start_Distance;           // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Directional_Inscattering_Color;                    // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Scattering_Distribution;                           // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Albedo;                                            // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Emissive;                                          // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Extinction_Scale;                                  // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            View_Distance;                                     // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Volumetric_Fog_Start_Distance;                     // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Near_Fade_In_Distance;                             // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Static_Lighting_Scattering_Intenstiy;              // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Source_Cubemap;                                    // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Source_Cubemap_Angle;                              // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sky_Distance_Threshold;                            // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Indirect_Lighting_Intensity;                       // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Volumetric_Scattering_Intensity;                   // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Inscattering_Color_Cubemap;                        // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Inscattering_Color_Cubemap_Angle;                  // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Inscattering_Texture_Tint;                         // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Fully_Directional_Inscattering_Color_Distance;     // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Non_Directional_Inscattering_Color_Distance;       // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_Shaft_Occlusion;                             // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Occlusion_Depth_Range;                             // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Occlusion_Mask_Darkness;                           // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_Shaft_Bloom;                                 // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Bloom_Scale;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Bloom_Threshold;                                   // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Bloom_Max_Brightness;                              // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Bloom_Tint;                                        // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Light_Shaft_Occlusion;                        // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Moon_Occlusion_Depth_Range;                        // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Occlusion_Mask_Darkness;                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Light_Shaft_Bloom;                            // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Moon_Bloom_Scale;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Bloom_Threshold;                              // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon_Bloom_Max_Brightness;                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Moon_Bloom_Tint;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Disk_Brightness;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Star_Brightness;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Nebulae_Brightness;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Horizon_Line_Brightness;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Horizon_Daytime_Color;                             // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Horizon_Nighttime_Color;                           // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Star_Twinkle_MaskMin;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Star_Twinkle_MaskMax;                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Night_Zenith;                                      // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Night_Horizon;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPDA_PostProcessSettings_C*            Post_Process;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Surface_Brightness;                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Cloud_Shadow_Surface_Strength;                 // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Cloud_Shadow_Strength;                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Moon_Disk_Color;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Moon__Intensity;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Skydome_Brightness;                                // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPDA_GlobalAtmospherics_C">();
	}
	static class UBPDA_GlobalAtmospherics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPDA_GlobalAtmospherics_C>();
	}
};
static_assert(alignof(UBPDA_GlobalAtmospherics_C) == 0x000008, "Wrong alignment on UBPDA_GlobalAtmospherics_C");
static_assert(sizeof(UBPDA_GlobalAtmospherics_C) == 0x000330, "Wrong size on UBPDA_GlobalAtmospherics_C");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Intensity) == 0x000050, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Light_Color) == 0x000058, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Light_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Source_Angle) == 0x000060, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Source_Angle' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Source_Soft_Angle) == 0x000068, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Source_Soft_Angle' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Temperature) == 0x000070, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Temperature' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Volumetric_Scattering) == 0x000078, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Volumetric_Scattering' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Specular_Scale) == 0x000080, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Specular_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sky_Light_Intensity) == 0x000088, "Member 'UBPDA_GlobalAtmospherics_C::Sky_Light_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sky_Light_Color) == 0x000090, "Member 'UBPDA_GlobalAtmospherics_C::Sky_Light_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Intensity) == 0x000098, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Light_Color) == 0x0000A0, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Light_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Source_Angle) == 0x0000A8, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Source_Angle' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Source_Soft_Angle) == 0x0000B0, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Source_Soft_Angle' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Temperature) == 0x0000B8, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Temperature' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Volumetric_Scattering) == 0x0000C0, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Volumetric_Scattering' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Specular_Scale) == 0x0000C8, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Specular_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Clouds_Something_or_Other) == 0x0000D0, "Member 'UBPDA_GlobalAtmospherics_C::Clouds_Something_or_Other' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Rayleigh_Scattering_Scale) == 0x0000D8, "Member 'UBPDA_GlobalAtmospherics_C::Rayleigh_Scattering_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Rayleigh_Scattering_Color) == 0x0000E0, "Member 'UBPDA_GlobalAtmospherics_C::Rayleigh_Scattering_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Rayleigh_Exponential_Distribution_Curve) == 0x0000E8, "Member 'UBPDA_GlobalAtmospherics_C::Rayleigh_Exponential_Distribution_Curve' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Mie_Scattering_Scale) == 0x0000F0, "Member 'UBPDA_GlobalAtmospherics_C::Mie_Scattering_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Mie_Scattering_Color) == 0x0000F8, "Member 'UBPDA_GlobalAtmospherics_C::Mie_Scattering_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Mie_Absorption_Scale) == 0x000100, "Member 'UBPDA_GlobalAtmospherics_C::Mie_Absorption_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Mie_Absorption_Color) == 0x000108, "Member 'UBPDA_GlobalAtmospherics_C::Mie_Absorption_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Mie_Anisotropy) == 0x000110, "Member 'UBPDA_GlobalAtmospherics_C::Mie_Anisotropy' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Mie_Exponential_Distribution) == 0x000118, "Member 'UBPDA_GlobalAtmospherics_C::Mie_Exponential_Distribution' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Absorption_Scale) == 0x000120, "Member 'UBPDA_GlobalAtmospherics_C::Absorption_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Asorption_Color) == 0x000128, "Member 'UBPDA_GlobalAtmospherics_C::Asorption_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sky_Luminance_Factor) == 0x000130, "Member 'UBPDA_GlobalAtmospherics_C::Sky_Luminance_Factor' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Height_Fog_Contribution) == 0x000138, "Member 'UBPDA_GlobalAtmospherics_C::Height_Fog_Contribution' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Second_Fog_Density) == 0x000140, "Member 'UBPDA_GlobalAtmospherics_C::Second_Fog_Density' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Second_Fog_Height_Falloff) == 0x000148, "Member 'UBPDA_GlobalAtmospherics_C::Second_Fog_Height_Falloff' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Second_Fog_Height_Offset) == 0x000150, "Member 'UBPDA_GlobalAtmospherics_C::Second_Fog_Height_Offset' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Fog_Density) == 0x000158, "Member 'UBPDA_GlobalAtmospherics_C::Fog_Density' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Fog_Height_Falloff) == 0x000160, "Member 'UBPDA_GlobalAtmospherics_C::Fog_Height_Falloff' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Fog_Inscattering_Color) == 0x000168, "Member 'UBPDA_GlobalAtmospherics_C::Fog_Inscattering_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sky_Atmosphere_Ambient_Contribution_Color_Scale) == 0x000170, "Member 'UBPDA_GlobalAtmospherics_C::Sky_Atmosphere_Ambient_Contribution_Color_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Fog_Max_Opacity) == 0x000178, "Member 'UBPDA_GlobalAtmospherics_C::Fog_Max_Opacity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Start_Distance) == 0x000180, "Member 'UBPDA_GlobalAtmospherics_C::Start_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Fog_Cutoff_Distance) == 0x000188, "Member 'UBPDA_GlobalAtmospherics_C::Fog_Cutoff_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Directional_Inscattering_Exponent) == 0x000190, "Member 'UBPDA_GlobalAtmospherics_C::Directional_Inscattering_Exponent' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Directional_Inscattering_Start_Distance) == 0x000198, "Member 'UBPDA_GlobalAtmospherics_C::Directional_Inscattering_Start_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Directional_Inscattering_Color) == 0x0001A0, "Member 'UBPDA_GlobalAtmospherics_C::Directional_Inscattering_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Scattering_Distribution) == 0x0001A8, "Member 'UBPDA_GlobalAtmospherics_C::Scattering_Distribution' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Albedo) == 0x0001B0, "Member 'UBPDA_GlobalAtmospherics_C::Albedo' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Emissive) == 0x0001B8, "Member 'UBPDA_GlobalAtmospherics_C::Emissive' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Extinction_Scale) == 0x0001C0, "Member 'UBPDA_GlobalAtmospherics_C::Extinction_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, View_Distance) == 0x0001C8, "Member 'UBPDA_GlobalAtmospherics_C::View_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Volumetric_Fog_Start_Distance) == 0x0001D0, "Member 'UBPDA_GlobalAtmospherics_C::Volumetric_Fog_Start_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Near_Fade_In_Distance) == 0x0001D8, "Member 'UBPDA_GlobalAtmospherics_C::Near_Fade_In_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Static_Lighting_Scattering_Intenstiy) == 0x0001E0, "Member 'UBPDA_GlobalAtmospherics_C::Static_Lighting_Scattering_Intenstiy' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Source_Cubemap) == 0x0001E8, "Member 'UBPDA_GlobalAtmospherics_C::Source_Cubemap' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Source_Cubemap_Angle) == 0x0001F0, "Member 'UBPDA_GlobalAtmospherics_C::Source_Cubemap_Angle' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sky_Distance_Threshold) == 0x0001F8, "Member 'UBPDA_GlobalAtmospherics_C::Sky_Distance_Threshold' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Indirect_Lighting_Intensity) == 0x000200, "Member 'UBPDA_GlobalAtmospherics_C::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Volumetric_Scattering_Intensity) == 0x000208, "Member 'UBPDA_GlobalAtmospherics_C::Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Inscattering_Color_Cubemap) == 0x000210, "Member 'UBPDA_GlobalAtmospherics_C::Inscattering_Color_Cubemap' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Inscattering_Color_Cubemap_Angle) == 0x000218, "Member 'UBPDA_GlobalAtmospherics_C::Inscattering_Color_Cubemap_Angle' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Inscattering_Texture_Tint) == 0x000220, "Member 'UBPDA_GlobalAtmospherics_C::Inscattering_Texture_Tint' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Fully_Directional_Inscattering_Color_Distance) == 0x000228, "Member 'UBPDA_GlobalAtmospherics_C::Fully_Directional_Inscattering_Color_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Non_Directional_Inscattering_Color_Distance) == 0x000230, "Member 'UBPDA_GlobalAtmospherics_C::Non_Directional_Inscattering_Color_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Light_Shaft_Occlusion) == 0x000238, "Member 'UBPDA_GlobalAtmospherics_C::Light_Shaft_Occlusion' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Occlusion_Depth_Range) == 0x000240, "Member 'UBPDA_GlobalAtmospherics_C::Occlusion_Depth_Range' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Occlusion_Mask_Darkness) == 0x000248, "Member 'UBPDA_GlobalAtmospherics_C::Occlusion_Mask_Darkness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Light_Shaft_Bloom) == 0x000250, "Member 'UBPDA_GlobalAtmospherics_C::Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Bloom_Scale) == 0x000258, "Member 'UBPDA_GlobalAtmospherics_C::Bloom_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Bloom_Threshold) == 0x000260, "Member 'UBPDA_GlobalAtmospherics_C::Bloom_Threshold' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Bloom_Max_Brightness) == 0x000268, "Member 'UBPDA_GlobalAtmospherics_C::Bloom_Max_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Bloom_Tint) == 0x000270, "Member 'UBPDA_GlobalAtmospherics_C::Bloom_Tint' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Light_Shaft_Occlusion) == 0x000278, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Light_Shaft_Occlusion' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Occlusion_Depth_Range) == 0x000280, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Occlusion_Depth_Range' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Occlusion_Mask_Darkness) == 0x000288, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Occlusion_Mask_Darkness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Light_Shaft_Bloom) == 0x000290, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Bloom_Scale) == 0x000298, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Bloom_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Bloom_Threshold) == 0x0002A0, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Bloom_Threshold' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Bloom_Max_Brightness) == 0x0002A8, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Bloom_Max_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Bloom_Tint) == 0x0002B0, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Bloom_Tint' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Disk_Brightness) == 0x0002B8, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Disk_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Star_Brightness) == 0x0002C0, "Member 'UBPDA_GlobalAtmospherics_C::Star_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Nebulae_Brightness) == 0x0002C8, "Member 'UBPDA_GlobalAtmospherics_C::Nebulae_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Horizon_Line_Brightness) == 0x0002D0, "Member 'UBPDA_GlobalAtmospherics_C::Horizon_Line_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Horizon_Daytime_Color) == 0x0002D8, "Member 'UBPDA_GlobalAtmospherics_C::Horizon_Daytime_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Horizon_Nighttime_Color) == 0x0002DC, "Member 'UBPDA_GlobalAtmospherics_C::Horizon_Nighttime_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Star_Twinkle_MaskMin) == 0x0002E0, "Member 'UBPDA_GlobalAtmospherics_C::Star_Twinkle_MaskMin' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Star_Twinkle_MaskMax) == 0x0002E8, "Member 'UBPDA_GlobalAtmospherics_C::Star_Twinkle_MaskMax' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Night_Zenith) == 0x0002F0, "Member 'UBPDA_GlobalAtmospherics_C::Night_Zenith' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Night_Horizon) == 0x0002F4, "Member 'UBPDA_GlobalAtmospherics_C::Night_Horizon' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Post_Process) == 0x0002F8, "Member 'UBPDA_GlobalAtmospherics_C::Post_Process' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Surface_Brightness) == 0x000300, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Surface_Brightness' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Cloud_Shadow_Surface_Strength) == 0x000308, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Cloud_Shadow_Surface_Strength' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Sun_Cloud_Shadow_Strength) == 0x000310, "Member 'UBPDA_GlobalAtmospherics_C::Sun_Cloud_Shadow_Strength' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon_Disk_Color) == 0x000318, "Member 'UBPDA_GlobalAtmospherics_C::Moon_Disk_Color' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Moon__Intensity) == 0x000320, "Member 'UBPDA_GlobalAtmospherics_C::Moon__Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_GlobalAtmospherics_C, Skydome_Brightness) == 0x000328, "Member 'UBPDA_GlobalAtmospherics_C::Skydome_Brightness' has a wrong offset!");

}

