#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LandscapeBrushRoad

#include "Basic.hpp"

#include "BP_LandscapeBrushRoad_classes.hpp"
#include "BP_LandscapeBrushRoad_parameters.hpp"


namespace SDK
{

// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Build Road
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Build_Road()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Build Road");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Capture Minimap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Capturing                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height_Offset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Width_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::Capture_Minimap(bool Is_Capturing, double Height_Offset, double Width_Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Capture Minimap");

	Params::BP_LandscapeBrushRoad_C_Capture_Minimap Parms{};

	Parms.Is_Capturing = Is_Capturing;
	Parms.Height_Offset = Height_Offset;
	Parms.Width_Scale = Width_Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.OnRoadActiveStateUpdatedBP
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bIsRoadActive                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::OnRoadActiveStateUpdatedBP(const bool bIsRoadActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "OnRoadActiveStateUpdatedBP");

	Params::BP_LandscapeBrushRoad_C_OnRoadActiveStateUpdatedBP Parms{};

	Parms.bIsRoadActive = bIsRoadActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.OnRoadAppearanceUpdatedBP
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FLoadedRoadAppearance&     LoadedRoadAppearance                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_LandscapeBrushRoad_C::OnRoadAppearanceUpdatedBP(const struct FLoadedRoadAppearance& LoadedRoadAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "OnRoadAppearanceUpdatedBP");

	Params::BP_LandscapeBrushRoad_C_OnRoadAppearanceUpdatedBP Parms{};

	Parms.LoadedRoadAppearance = std::move(LoadedRoadAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.OnRoadBaseAppearanceUpdatedBP
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FLoadedRoadBaseAppearance& LoadedRoadBaseAppearance                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_LandscapeBrushRoad_C::OnRoadBaseAppearanceUpdatedBP(const struct FLoadedRoadBaseAppearance& LoadedRoadBaseAppearance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "OnRoadBaseAppearanceUpdatedBP");

	Params::BP_LandscapeBrushRoad_C_OnRoadBaseAppearanceUpdatedBP Parms{};

	Parms.LoadedRoadBaseAppearance = std::move(LoadedRoadBaseAppearance);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.OnUpdateActiveRoadStatus
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::OnUpdateActiveRoadStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "OnUpdateActiveRoadStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.OnUpdateLoadedRoadAppearance
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::OnUpdateLoadedRoadAppearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "OnUpdateLoadedRoadAppearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Set Road Levels
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Road_Level                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::Set_Road_Levels(int32 Road_Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Set Road Levels");

	Params::BP_LandscapeBrushRoad_C_Set_Road_Levels Parms{};

	Parms.Road_Level = Road_Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.ExecuteUbergraph_BP_LandscapeBrushRoad
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::ExecuteUbergraph_BP_LandscapeBrushRoad(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "ExecuteUbergraph_BP_LandscapeBrushRoad");

	Params::BP_LandscapeBrushRoad_C_ExecuteUbergraph_BP_LandscapeBrushRoad Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Get Mesh List
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAoCSplineMeshEntry*             First_Override_Beginning_Mesh                          (Parm, OutParm)
// struct FAoCSplineMeshEntry*             First_Override_End_Mesh                                (Parm, OutParm)
// TArray<struct FAoCSplineMeshEntry>*     First_Fence_Objects                                    (Parm, OutParm)
// TArray<struct FAoCSplineDebrisEntry>*   First_Debris_Objects                                   (Parm, OutParm)
// struct FAoCSplineMeshEntry*             Second_Override_Beginning_Mesh                         (Parm, OutParm)
// struct FAoCSplineMeshEntry*             Second_Override_End_Mesh                               (Parm, OutParm)
// TArray<struct FAoCSplineMeshEntry>*     Second_Fence_Objects                                   (Parm, OutParm)
// TArray<struct FAoCSplineDebrisEntry>*   Second_Debris_Objects                                  (Parm, OutParm)

void ABP_LandscapeBrushRoad_C::Get_Mesh_List(struct FAoCSplineMeshEntry* First_Override_Beginning_Mesh, struct FAoCSplineMeshEntry* First_Override_End_Mesh, TArray<struct FAoCSplineMeshEntry>* First_Fence_Objects, TArray<struct FAoCSplineDebrisEntry>* First_Debris_Objects, struct FAoCSplineMeshEntry* Second_Override_Beginning_Mesh, struct FAoCSplineMeshEntry* Second_Override_End_Mesh, TArray<struct FAoCSplineMeshEntry>* Second_Fence_Objects, TArray<struct FAoCSplineDebrisEntry>* Second_Debris_Objects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Get Mesh List");

	Params::BP_LandscapeBrushRoad_C_Get_Mesh_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (First_Override_Beginning_Mesh != nullptr)
		*First_Override_Beginning_Mesh = std::move(Parms.First_Override_Beginning_Mesh);

	if (First_Override_End_Mesh != nullptr)
		*First_Override_End_Mesh = std::move(Parms.First_Override_End_Mesh);

	if (First_Fence_Objects != nullptr)
		*First_Fence_Objects = std::move(Parms.First_Fence_Objects);

	if (First_Debris_Objects != nullptr)
		*First_Debris_Objects = std::move(Parms.First_Debris_Objects);

	if (Second_Override_Beginning_Mesh != nullptr)
		*Second_Override_Beginning_Mesh = std::move(Parms.Second_Override_Beginning_Mesh);

	if (Second_Override_End_Mesh != nullptr)
		*Second_Override_End_Mesh = std::move(Parms.Second_Override_End_Mesh);

	if (Second_Fence_Objects != nullptr)
		*Second_Fence_Objects = std::move(Parms.Second_Fence_Objects);

	if (Second_Debris_Objects != nullptr)
		*Second_Debris_Objects = std::move(Parms.Second_Debris_Objects);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.GetRoadTerrainData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAoCRoadTerrainEntry>*    Terrain_Objects                                        (Parm, OutParm)
// TArray<struct FAoCRoadTerrainEntry>*    Grass_Objects                                          (Parm, OutParm)

void ABP_LandscapeBrushRoad_C::GetRoadTerrainData(TArray<struct FAoCRoadTerrainEntry>* Terrain_Objects, TArray<struct FAoCRoadTerrainEntry>* Grass_Objects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "GetRoadTerrainData");

	Params::BP_LandscapeBrushRoad_C_GetRoadTerrainData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Terrain_Objects != nullptr)
		*Terrain_Objects = std::move(Parms.Terrain_Objects);

	if (Grass_Objects != nullptr)
		*Grass_Objects = std::move(Parms.Grass_Objects);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Get Road Width Based on Level
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Start_Alpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  End_Alpha                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Width_Start                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Width_End                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::Get_Road_Width_Based_on_Level(double Start_Alpha, double End_Alpha, double* Width_Start, double* Width_End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Get Road Width Based on Level");

	Params::BP_LandscapeBrushRoad_C_Get_Road_Width_Based_on_Level Parms{};

	Parms.Start_Alpha = Start_Alpha;
	Parms.End_Alpha = End_Alpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Width_Start != nullptr)
		*Width_Start = Parms.Width_Start;

	if (Width_End != nullptr)
		*Width_End = Parms.Width_End;
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Get Current and Next DMI Distance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Current_Index                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Current_Distance                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Next_Distance                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::Get_Current_and_Next_DMI_Distance(int32 Current_Index, double* Current_Distance, double* Next_Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Get Current and Next DMI Distance");

	Params::BP_LandscapeBrushRoad_C_Get_Current_and_Next_DMI_Distance Parms{};

	Parms.Current_Index = Current_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Distance != nullptr)
		*Current_Distance = Parms.Current_Distance;

	if (Next_Distance != nullptr)
		*Next_Distance = Parms.Next_Distance;
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Not Connected to Intersection or Node
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_LandscapeBrushRoad_C::Not_Connected_to_Intersection_or_Node()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Not Connected to Intersection or Node");

	Params::BP_LandscapeBrushRoad_C_Not_Connected_to_Intersection_or_Node Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Apply Set Dressing
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Apply_Set_Dressing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Apply Set Dressing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Update PCG Data
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_RoadSetDressingData&    S_RoadSetDressingData                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::Update_PCG_Data(const struct FS_RoadSetDressingData& S_RoadSetDressingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Update PCG Data");

	Params::BP_LandscapeBrushRoad_C_Update_PCG_Data Parms{};

	Parms.S_RoadSetDressingData = std::move(S_RoadSetDressingData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Remove Duplicate Spline Points
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Remove_Duplicate_Spline_Points()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Remove Duplicate Spline Points");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Validate Connections
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Validate_Connections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Validate Connections");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Remove This Brush From Only Update List
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Remove_This_Brush_From_Only_Update_List()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Remove This Brush From Only Update List");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Add This Brush To Only Update List
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Add_This_Brush_To_Only_Update_List()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Add This Brush To Only Update List");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Update Connected Intersections
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Update_Connected_Intersections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Update Connected Intersections");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.PrepForSceneCapture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCapturing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LayerName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::PrepForSceneCapture(bool IsCapturing, class FName LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "PrepForSceneCapture");

	Params::BP_LandscapeBrushRoad_C_PrepForSceneCapture Parms{};

	Parms.IsCapturing = IsCapturing;
	Parms.LayerName = LayerName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Manage Spline Mesh Actors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Manage_Spline_Mesh_Actors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Manage Spline Mesh Actors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Manage Top Visible Spline Meshes From Code
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Manage_Top_Visible_Spline_Meshes_From_Code()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Manage Top Visible Spline Meshes From Code");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Capture Minimap Internal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Capturing                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height_Offset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Width_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::Capture_Minimap_Internal(bool Is_Capturing, double Height_Offset, double Width_Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Capture Minimap Internal");

	Params::BP_LandscapeBrushRoad_C_Capture_Minimap_Internal Parms{};

	Parms.Is_Capturing = Is_Capturing;
	Parms.Height_Offset = Height_Offset;
	Parms.Width_Scale = Width_Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Capture Off
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Capture_Off()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Capture Off");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Capture On
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Capture_On()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Capture On");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Snap Road to Ground
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Snap_Road_to_Ground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Snap Road to Ground");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Elevate By Groove Depth
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Elevate_By_Groove_Depth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Elevate By Groove Depth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Show Indices
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Show_Indices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Show Indices");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Split
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Split()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Split");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Join
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Join()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Join");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.disable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "disable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Enable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Enable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Enable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Update Grass Hiding Spline Meshes
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Update_Grass_Hiding_Spline_Meshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Update Grass Hiding Spline Meshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Add Grass Hiding Spline Meshes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Add_Grass_Hiding_Spline_Meshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Add Grass Hiding Spline Meshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Update Base Visible Spline Meshes
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Update_Base_Visible_Spline_Meshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Update Base Visible Spline Meshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Add Base Visible Spline Meshes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Add_Base_Visible_Spline_Meshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Add Base Visible Spline Meshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Build Landscape Deforming Dynamic Mesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Build_Landscape_Deforming_Dynamic_Mesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Build Landscape Deforming Dynamic Mesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.Editor Get Road Level Settings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::Editor_Get_Road_Level_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "Editor Get Road Level Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.EditorPrepForSceneCapture
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              bIsCapturing                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FName                       LayerName                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::EditorPrepForSceneCapture(const bool bIsCapturing, const class FName LayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "EditorPrepForSceneCapture");

	Params::BP_LandscapeBrushRoad_C_EditorPrepForSceneCapture Parms{};

	Parms.bIsCapturing = bIsCapturing;
	Parms.LayerName = LayerName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.EditorPreviewNodeAtLevel
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   NodeLevel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LandscapeBrushRoad_C::EditorPreviewNodeAtLevel(int32 NodeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "EditorPreviewNodeAtLevel");

	Params::BP_LandscapeBrushRoad_C_EditorPreviewNodeAtLevel Parms{};

	Parms.NodeLevel = NodeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.EditorAddLandscapeBrushToManagerUpdateArray
// (Event, Protected, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::EditorAddLandscapeBrushToManagerUpdateArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "EditorAddLandscapeBrushToManagerUpdateArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.EditorRemoveLandscapeBrushFromManagerUpdateArray
// (Event, Protected, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::EditorRemoveLandscapeBrushFromManagerUpdateArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "EditorRemoveLandscapeBrushFromManagerUpdateArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LandscapeBrushRoad_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C.GetBaseAppearance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLoadedRoadBaseAppearance*       Appearance                                             (Parm, OutParm)

void ABP_LandscapeBrushRoad_C::GetBaseAppearance(struct FLoadedRoadBaseAppearance* Appearance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LandscapeBrushRoad_C", "GetBaseAppearance");

	Params::BP_LandscapeBrushRoad_C_GetBaseAppearance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Appearance != nullptr)
		*Appearance = std::move(Parms.Appearance);
}

}

