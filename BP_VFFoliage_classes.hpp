#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VFFoliage

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_VerraForge_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VFFoliage.BP_VFFoliage_C
// 0x00E0 (0x04A0 - 0x03C0)
class ABP_VFFoliage_C : public ABP_VerraForge_C
{
public:
	class UBoxComponent*                          Box;                                               // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Active_Data_Class;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Active_Tag;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class UPCGGraph*                              Active_PCG_Graph;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           FoliageStyle;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  FoliageStyleContainer;                             // 0x03E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Layer_Descriptor;                                  // 0x0408(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  Asset_Collection;                                  // 0x0428(0x0020)(Edit, BlueprintVisible)
	bool                                          Fill_Node;                                         // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Road_Width_Adjustment;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Foliage_Assignment;                       // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFoliageType_InstancedStaticMesh*> FoliageTypes;                                    // 0x0460(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Node_Spline_Point_Locations;                       // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Node_Arrive_Tangents;                              // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Node_Leave_Tangents;                               // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Cache_Landscape();
	void Choose_Foliage();
	void Find_Box_Extent_from_Spline();
	void Get_PCG_Param_Data_Asset(class UPCGParameterData** PCG_Data);
	void Override_Spline();
	void PCG_Param_Data_Logic();
	void Set_Graph_Foliage();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VFFoliage_C">();
	}
	static class ABP_VFFoliage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VFFoliage_C>();
	}
};
static_assert(alignof(ABP_VFFoliage_C) == 0x000008, "Wrong alignment on ABP_VFFoliage_C");
static_assert(sizeof(ABP_VFFoliage_C) == 0x0004A0, "Wrong size on ABP_VFFoliage_C");
static_assert(offsetof(ABP_VFFoliage_C, Box) == 0x0003C0, "Member 'ABP_VFFoliage_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Active_Data_Class) == 0x0003C8, "Member 'ABP_VFFoliage_C::Active_Data_Class' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Active_Tag) == 0x0003D0, "Member 'ABP_VFFoliage_C::Active_Tag' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Active_PCG_Graph) == 0x0003D8, "Member 'ABP_VFFoliage_C::Active_PCG_Graph' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, FoliageStyle) == 0x0003E0, "Member 'ABP_VFFoliage_C::FoliageStyle' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, FoliageStyleContainer) == 0x0003E8, "Member 'ABP_VFFoliage_C::FoliageStyleContainer' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Layer_Descriptor) == 0x000408, "Member 'ABP_VFFoliage_C::Layer_Descriptor' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Asset_Collection) == 0x000428, "Member 'ABP_VFFoliage_C::Asset_Collection' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Fill_Node) == 0x000448, "Member 'ABP_VFFoliage_C::Fill_Node' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Road_Width_Adjustment) == 0x000450, "Member 'ABP_VFFoliage_C::Road_Width_Adjustment' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Override_Foliage_Assignment) == 0x000458, "Member 'ABP_VFFoliage_C::Override_Foliage_Assignment' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, FoliageTypes) == 0x000460, "Member 'ABP_VFFoliage_C::FoliageTypes' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Node_Spline_Point_Locations) == 0x000470, "Member 'ABP_VFFoliage_C::Node_Spline_Point_Locations' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Node_Arrive_Tangents) == 0x000480, "Member 'ABP_VFFoliage_C::Node_Arrive_Tangents' has a wrong offset!");
static_assert(offsetof(ABP_VFFoliage_C, Node_Leave_Tangents) == 0x000490, "Member 'ABP_VFFoliage_C::Node_Leave_Tangents' has a wrong offset!");

}

