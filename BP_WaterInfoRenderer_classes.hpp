#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterInfoRenderer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterInfoRenderer.BP_WaterInfoRenderer_C
// 0x0140 (0x0488 - 0x0348)
class ABP_WaterInfoRenderer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   ChildActor;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WaterDisplacementMesh;                             // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Grid2DCapture;                                     // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Water_Info_RT;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 Water_Info_Scratch_RT;                             // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Resolution;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Capture_Height;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ortho_Width;                                       // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ProcessingMID;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerLocation;                                    // 0x03A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RTLocation;                                        // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rerender_Distance;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DMs;                                               // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ABP_WaterSpline_C>> Rivers;                                          // 0x03E0(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class ABP_WaterLake_C>> Lakes;                                             // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_WaterSpline_C*>              RiversToRender;                                    // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ABP_WaterLake_C*>                LakesToRender;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          WaterinfoRefresh_;                                 // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x0424(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrevLoc;                                           // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaterExists_;                                      // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnsureRender_;                                     // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasRiver;                                          // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRendering;                                       // 0x0453(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineStartTemp;                                   // 0x0458(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineEndTemp;                                     // 0x0470(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Check_if_Rendering(bool* IsRendering_0);
	void Check_Player_Loc();
	void Check_Refresh();
	void Editor_Water_Tick();
	void Editor_Water_Update();
	void ExecuteUbergraph_BP_WaterInfoRenderer(int32 EntryPoint);
	void Fix_up_all_Loaded_Water_Actors();
	void Get_Current_at_Location(const struct FVector& World_Location, struct FVector2D* Current_Velocity);
	void Init_Processing_MID();
	void Initialize_GUID();
	void IsOverlapping2D(const struct FVector2D& Max, const struct FVector2D& Max_0, const struct FVector2D& Max_1, const struct FVector2D& Max_2, const struct FVector2D& Max_3, const struct FVector2D& Max_4, bool* IsOverlapping);
	void IsOverlappingGrid2D(class AActor* Actor, bool* IsOverlapping);
	void Pad_Spline_Ends(class USplineComponent* Spline);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Register_Lake(class ABP_WaterLake_C* LakeRef);
	void Register_Spline(class ABP_WaterSpline_C* SplineRef);
	void Render_Water_Actors();
	void RenderDelayed();
	void RenderInstant();
	void RenderNextWaterActor();
	void Set_Water_Params();
	void Unpad_Spline_Ends(class USplineComponent* Spline);
	void Unregister_Lake(class ABP_WaterLake_C* LakeRef);
	void Unregister_Spline(class ABP_WaterSpline_C* SplineRef);
	void Update_WaterActor_Registry();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterInfoRenderer_C">();
	}
	static class ABP_WaterInfoRenderer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterInfoRenderer_C>();
	}
};
static_assert(alignof(ABP_WaterInfoRenderer_C) == 0x000008, "Wrong alignment on ABP_WaterInfoRenderer_C");
static_assert(sizeof(ABP_WaterInfoRenderer_C) == 0x000488, "Wrong size on ABP_WaterInfoRenderer_C");
static_assert(offsetof(ABP_WaterInfoRenderer_C, UberGraphFrame) == 0x000348, "Member 'ABP_WaterInfoRenderer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, ChildActor) == 0x000350, "Member 'ABP_WaterInfoRenderer_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, WaterDisplacementMesh) == 0x000358, "Member 'ABP_WaterInfoRenderer_C::WaterDisplacementMesh' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Grid2DCapture) == 0x000360, "Member 'ABP_WaterInfoRenderer_C::Grid2DCapture' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, DefaultSceneRoot) == 0x000368, "Member 'ABP_WaterInfoRenderer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Water_Info_RT) == 0x000370, "Member 'ABP_WaterInfoRenderer_C::Water_Info_RT' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Water_Info_Scratch_RT) == 0x000378, "Member 'ABP_WaterInfoRenderer_C::Water_Info_Scratch_RT' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Resolution) == 0x000380, "Member 'ABP_WaterInfoRenderer_C::Resolution' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Capture_Height) == 0x000388, "Member 'ABP_WaterInfoRenderer_C::Capture_Height' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Ortho_Width) == 0x000390, "Member 'ABP_WaterInfoRenderer_C::Ortho_Width' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, ProcessingMID) == 0x000398, "Member 'ABP_WaterInfoRenderer_C::ProcessingMID' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, PlayerLocation) == 0x0003A0, "Member 'ABP_WaterInfoRenderer_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, RTLocation) == 0x0003B8, "Member 'ABP_WaterInfoRenderer_C::RTLocation' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Rerender_Distance) == 0x0003D0, "Member 'ABP_WaterInfoRenderer_C::Rerender_Distance' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, DMs) == 0x0003D8, "Member 'ABP_WaterInfoRenderer_C::DMs' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Rivers) == 0x0003E0, "Member 'ABP_WaterInfoRenderer_C::Rivers' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Lakes) == 0x0003F0, "Member 'ABP_WaterInfoRenderer_C::Lakes' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, RiversToRender) == 0x000400, "Member 'ABP_WaterInfoRenderer_C::RiversToRender' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, LakesToRender) == 0x000410, "Member 'ABP_WaterInfoRenderer_C::LakesToRender' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, WaterinfoRefresh_) == 0x000420, "Member 'ABP_WaterInfoRenderer_C::WaterinfoRefresh_' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, Guid) == 0x000424, "Member 'ABP_WaterInfoRenderer_C::Guid' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, PrevLoc) == 0x000438, "Member 'ABP_WaterInfoRenderer_C::PrevLoc' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, WaterExists_) == 0x000450, "Member 'ABP_WaterInfoRenderer_C::WaterExists_' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, EnsureRender_) == 0x000451, "Member 'ABP_WaterInfoRenderer_C::EnsureRender_' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, WasRiver) == 0x000452, "Member 'ABP_WaterInfoRenderer_C::WasRiver' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, IsRendering) == 0x000453, "Member 'ABP_WaterInfoRenderer_C::IsRendering' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, SplineStartTemp) == 0x000458, "Member 'ABP_WaterInfoRenderer_C::SplineStartTemp' has a wrong offset!");
static_assert(offsetof(ABP_WaterInfoRenderer_C, SplineEndTemp) == 0x000470, "Member 'ABP_WaterInfoRenderer_C::SplineEndTemp' has a wrong offset!");

}

