#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BiomeManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_SingularClimateData_structs.hpp"
#include "STRUCT_GlobalOverrideAndBool_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EBiomes_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BiomeManager.BP_BiomeManager_C
// 0x07F0 (0x0B38 - 0x0348)
class ABP_BiomeManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        Biome_Override_DA;                                 // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             Biome_Climate_Table;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CURRENT_Global_Struct;                             // 0x0370(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha_Biome_Amount;                                // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blue_Biome_Amount;                                 // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Green_Biome_Amount;                                // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Red_Biome_Amount;                                  // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Red_Biome_Amount_Previous;                         // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Green_Biome_Amount_Previous;                       // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blue_Biome_Amount_Previous;                        // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha_Biome_Amount_Previoius;                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Print_Current_Biome_to_Screen;                     // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Current_Biome;                                     // 0x0691(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_692[0x6];                                      // 0x0692(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         OVERRIDE_Global_Struct;                            // 0x0698(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          OVERRIDE_Global_Struct_BOOL;                       // 0x0978(0x0047)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9BF[0x1];                                      // 0x09BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EBiomes, class UObject*>                 Biome_Override_Data_Asset;                         // 0x09C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Row_Name;                                          // 0x0A10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSTRUCT_SingularClimateData            Climate_Single_Day_Struct;                         // 0x0A20(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Chance_of_Rain_Offset;                             // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sunshine_Hours_Offset;                             // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5C[0x4];                                      // 0x0A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Precip_Inches_Offset;                              // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_Offset_Range;                                 // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Amount;                                            // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Month;                                             // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Red_Category_Name;                                 // 0x0A7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Green_Category_Name;                               // 0x0A7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Blue_Category_Name;                                // 0x0A7E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Alpha_Category_Name;                               // 0x0A7F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity_Offset;                                   // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream_For_Random;                                 // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	TMap<int32, double>                           Degrees_Day;                                       // 0x0A90(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FSTRUCT_SingularClimateData> Climate_Single_Day;                        // 0x0AE0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBiomes                                       Biome;                                             // 0x0B30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Adds_Random_to_Todays_Climate(double Degrees_High, double Degrees_Low, double Precipitation_Amount, int32 Sunshine_Hours, int32 Rain_Days, double Chance_Of_Rain, double Humidity, struct FSTRUCT_SingularClimateData* StructOut);
	void Biome_to_Row_Name(EBiomes Biome_In, class FName* Row_Name_0);
	void Blend_Biome_Data(const struct FVector2D& Location, double Time_Input, const struct FSTRUCT_GlobalAtmosphereOutput& CURRENT_Global_Struct_0, double Normalized_Year_In, const TMap<class FName, struct FSTRUCT_SingularClimateData>& Biome_Climate_Map, const struct FSTRUCT_SingularClimateData& Current_Biome_Climate, struct FSTRUCT_GlobalAtmosphereOutput* Global, EBiomes* Current_Biome_0, struct FSTRUCT_SingularClimateData* Current_Biome_Climate_Out);
	struct FLinearColor Color_Lerp_Bool(bool Condition, const struct FLinearColor& A, const struct FLinearColor& B, float ALPHA);
	int32 Determine_Month(double In_Year);
	void Do_Math___Color(const struct FLinearColor& Default__C_, const TMap<uint8, struct FLinearColor>& Colors, struct FLinearColor* Return__C_);
	void Do_Math___Float(double Default_Input__F_, const TMap<uint8, double>& Floats, double* Return__F_);
	void ExecuteUbergraph_BP_BiomeManager(int32 EntryPoint);
	double Float_Lerp_Bool(bool Condition, double A, double B, double ALPHA);
	void Get_Climate_For_Biome(EBiomes Biome_In, const TMap<class FName, struct FSTRUCT_SingularClimateData>& TargetMap, struct FSTRUCT_SingularClimateData* OVERRIDE_Singular_Day_Climate);
	void Get_Current_Biome(EBiomes Red_Category_Name_0, EBiomes Green_Category_Name_0, EBiomes Blue_Category_Name_0, EBiomes Alpha_Category_Name_0, EBiomes* Current_Biome_0, double* Amount_0);
	void Get_Override_For_Biome(double Time_Input, EBiomes Biome_In, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput, struct FSTRUCT_GlobalAtmosphereOutput* OVERRIDE_Global_Struct_0, struct FSTRUCT_GlobalOverrideAndBool* OVERRIDE_Global_Struct_BOOL_0);
	void INIT_Biome_Data_Tables(int32 In_Month, TMap<class FName, struct FSTRUCT_SingularClimateData>* Climate_Single_Day_0);
	void LERP_Climate_Data(double ALPHA, const struct FSTRUCT_SingularClimateData& Current_Biome_Climate, const struct FSTRUCT_SingularClimateData& OVERRIDE_Climate_Data, struct FSTRUCT_SingularClimateData* Current_Biome_Climate_Out);
	void LERP_Structs__F_(float ALPHA, const struct FSTRUCT_GlobalAtmosphereOutput& Current_Global_Settings_Struct, const struct FSTRUCT_GlobalAtmosphereOutput& Override_Global_Settings_Struct, const struct FSTRUCT_GlobalOverrideAndBool& Current_Override_BOOL_Struct, struct FSTRUCT_GlobalAtmosphereOutput* CURRENT_Global_Struct_0);
	void Pass_To_Debug(EBiomes* Red_Biome, double* Red_Amount, double* Red_Biome_Amount_Previous_0, EBiomes* Green_Biome, double* Green_Amount, double* Green_Biome_Amount_Previous_0, EBiomes* Blue_Biome, double* Blue_Amount, double* Blue_Biome_Amount_Previous_0, EBiomes* Alpha_Biome, double* Alpha_Amount, double* Alpha_Biome_Amount_Previoius_0, int32* Month_0);
	void Pick_Variable(uint8 Variable_Type, double float_0, class UCurveFloat* Float_Curve, const struct FLinearColor& Color, class UCurveLinearColor* Color_Curve, double Time, double* Float_Output, struct FLinearColor* Color_Output);
	void ReceiveBeginPlay();
	void Row_Name_To_Biome(class FName& In_Row_Name, EBiomes* Row_Name_0);
	void Run_Biome_BP_Functions(int32 In_Month, const struct FVector2D& Location, double Time_Input, const struct FSTRUCT_GlobalAtmosphereOutput& CURRENT_Global_Struct_0, double Normalized_Year_In, const struct FSTRUCT_SingularClimateData& Current_Biome_Climate, const TMap<class FName, struct FSTRUCT_SingularClimateData>& Biome_Climate_Map, struct FSTRUCT_GlobalAtmosphereOutput* Global, struct FSTRUCT_SingularClimateData* Current_Biome_Climate_Out, EBiomes* DEBUG_Current_Biome);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BiomeManager_C">();
	}
	static class ABP_BiomeManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BiomeManager_C>();
	}
};
static_assert(alignof(ABP_BiomeManager_C) == 0x000008, "Wrong alignment on ABP_BiomeManager_C");
static_assert(sizeof(ABP_BiomeManager_C) == 0x000B38, "Wrong size on ABP_BiomeManager_C");
static_assert(offsetof(ABP_BiomeManager_C, UberGraphFrame) == 0x000348, "Member 'ABP_BiomeManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, DefaultSceneRoot) == 0x000350, "Member 'ABP_BiomeManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Biome_Override_DA) == 0x000358, "Member 'ABP_BiomeManager_C::Biome_Override_DA' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Biome_Climate_Table) == 0x000368, "Member 'ABP_BiomeManager_C::Biome_Climate_Table' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, CURRENT_Global_Struct) == 0x000370, "Member 'ABP_BiomeManager_C::CURRENT_Global_Struct' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Alpha_Biome_Amount) == 0x000650, "Member 'ABP_BiomeManager_C::Alpha_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Blue_Biome_Amount) == 0x000658, "Member 'ABP_BiomeManager_C::Blue_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Green_Biome_Amount) == 0x000660, "Member 'ABP_BiomeManager_C::Green_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Red_Biome_Amount) == 0x000668, "Member 'ABP_BiomeManager_C::Red_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Red_Biome_Amount_Previous) == 0x000670, "Member 'ABP_BiomeManager_C::Red_Biome_Amount_Previous' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Green_Biome_Amount_Previous) == 0x000678, "Member 'ABP_BiomeManager_C::Green_Biome_Amount_Previous' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Blue_Biome_Amount_Previous) == 0x000680, "Member 'ABP_BiomeManager_C::Blue_Biome_Amount_Previous' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Alpha_Biome_Amount_Previoius) == 0x000688, "Member 'ABP_BiomeManager_C::Alpha_Biome_Amount_Previoius' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Print_Current_Biome_to_Screen) == 0x000690, "Member 'ABP_BiomeManager_C::Print_Current_Biome_to_Screen' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Current_Biome) == 0x000691, "Member 'ABP_BiomeManager_C::Current_Biome' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, OVERRIDE_Global_Struct) == 0x000698, "Member 'ABP_BiomeManager_C::OVERRIDE_Global_Struct' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, OVERRIDE_Global_Struct_BOOL) == 0x000978, "Member 'ABP_BiomeManager_C::OVERRIDE_Global_Struct_BOOL' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Biome_Override_Data_Asset) == 0x0009C0, "Member 'ABP_BiomeManager_C::Biome_Override_Data_Asset' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Row_Name) == 0x000A10, "Member 'ABP_BiomeManager_C::Row_Name' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Climate_Single_Day_Struct) == 0x000A20, "Member 'ABP_BiomeManager_C::Climate_Single_Day_Struct' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Chance_of_Rain_Offset) == 0x000A50, "Member 'ABP_BiomeManager_C::Chance_of_Rain_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Sunshine_Hours_Offset) == 0x000A58, "Member 'ABP_BiomeManager_C::Sunshine_Hours_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Precip_Inches_Offset) == 0x000A60, "Member 'ABP_BiomeManager_C::Precip_Inches_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Temp_Offset_Range) == 0x000A68, "Member 'ABP_BiomeManager_C::Temp_Offset_Range' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Amount) == 0x000A70, "Member 'ABP_BiomeManager_C::Amount' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Month) == 0x000A78, "Member 'ABP_BiomeManager_C::Month' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Red_Category_Name) == 0x000A7C, "Member 'ABP_BiomeManager_C::Red_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Green_Category_Name) == 0x000A7D, "Member 'ABP_BiomeManager_C::Green_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Blue_Category_Name) == 0x000A7E, "Member 'ABP_BiomeManager_C::Blue_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Alpha_Category_Name) == 0x000A7F, "Member 'ABP_BiomeManager_C::Alpha_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Humidity_Offset) == 0x000A80, "Member 'ABP_BiomeManager_C::Humidity_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Stream_For_Random) == 0x000A88, "Member 'ABP_BiomeManager_C::Stream_For_Random' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Degrees_Day) == 0x000A90, "Member 'ABP_BiomeManager_C::Degrees_Day' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Climate_Single_Day) == 0x000AE0, "Member 'ABP_BiomeManager_C::Climate_Single_Day' has a wrong offset!");
static_assert(offsetof(ABP_BiomeManager_C, Biome) == 0x000B30, "Member 'ABP_BiomeManager_C::Biome' has a wrong offset!");

}

