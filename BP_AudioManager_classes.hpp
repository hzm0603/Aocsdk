#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioManager

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "SStartStopAudioEvents_structs.hpp"
#include "S_EnvironmentSettingsSwitches_structs.hpp"
#include "EReverbSet_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AudioManager.BP_AudioManager_C
// 0x03E0 (0x0728 - 0x0348)
class ABP_AudioManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UIntrepidAkComponent*                   Ak_Alpha_Biome;                                    // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   Ak_Blue_Biome;                                     // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   Ak_Outdoor;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   IntrepidAK;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   Ak_Red_Biome;                                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   Ak_Green_Biome;                                    // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   Ak_Dungeon;                                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Audio;                                             // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        UnderwaterAmount;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Outdoor_Amount;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dungeon_Amount;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Red_Biome_Amount;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Green_Biome_Amount;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blue_Biome_Amount;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha_Biome_Amount;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Red_Biome_Settings;                                // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Green_Biome_Settings;                              // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Blue_Biome_Settings;                               // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Alpha_Biome_Settings;                              // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Outdoor_Settings;                                  // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_EnvironmentSettingsSwitches         Outdoor_Settings_Switches;                         // 0x0420(0x0013)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSStartStopAudioEvents                 Dungeon_Settings;                                  // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_EnvironmentSettingsSwitches         Dungeon_Settings_Switches;                         // 0x0448(0x0013)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45B[0x1];                                      // 0x045B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutdoorSettingsPriority;                           // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Interior_Amount;                                   // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Interior_Audio_Override;                           // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAkRtpc*>                        InteriorAudioVolumeRTPCs;                          // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EBiomeType, struct FSStartStopAudioEvents> Biome_Sound_Settings;                            // 0x0488(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBiomeType                                    Red_Category_Name;                                 // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Green_Category_Name;                               // 0x04D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Blue_Category_Name;                                // 0x04DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Alpha_Category_Name;                               // 0x04DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beat_Phase;                                        // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Bar_Phase;                                    // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Bar_Phase;                                         // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Phrase_Phase;                                 // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phrase_Phase;                                      // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Red;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Green;                                   // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Blue;                                    // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Alpha;                                   // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Outdoor;                                 // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Dungeon;                                 // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beat_Duration;                                     // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Bar_Duration;                                 // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Bar_Duration;                                      // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Phrase_Duration;                              // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phrase_Duration;                                   // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayingID_Interior;                                // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Interior_Stop_Override;                            // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Noisy_Wind_Speed;                                  // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Speed;                                        // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Speed_Variation_Amplifier;                    // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Speed_Amplitude;                              // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Override_Biome;                                // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Override_Biome;                                    // 0x0549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54A[0x2];                                      // 0x054A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Red_Cat_Amount;                                    // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Green_Cat_Amount;                                  // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Blue_Cat_Amount;                                   // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Alpha_Cat_Amount;                                  // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AIntrepidSkyBase*                       IntrepidSky;                                       // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAkRtpc*>                        TimeOfDayRTPCs;                                    // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkRtpc*>                        TimeOfYearRTPCs;                                   // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkRtpc*>                        IntensityWindRTPCs;                                // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkRtpc*>                        IntensityRainRTPCs;                                // 0x0598(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wind_Speed_Intermediate;                           // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UPhysicalMaterial*, EReverbSet>    Material_Reverbs;                                  // 0x05B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EReverbSet, struct FInteriorAudioSpatialReverbList> Reverb_Sets;                            // 0x0600(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FMaterialReverb>                Material_Reverbs_Buffer;                           // 0x0650(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<EBiomeType, struct FMusicAssetValues>    Biome_Music_Assets;                                // 0x0660(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBiomeType                                    Default_Music_Biome;                               // 0x06B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InteriorOverrideCount;                             // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAkRtpc*>                        TemperatureRTPCs;                                  // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSStartStopAudioEvents>         OutdoorSettingsStack;                              // 0x06C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkAudioEvent*>                  UnderwaterStartEvents;                             // 0x06D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkAudioEvent*>                  UnderwaterStopEvents;                              // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkAudioEvent*>                  GlobalStartEvents;                                 // 0x06F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAkAudioEvent*>                  GlobalStopEvents;                                  // 0x0708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 OutdoorSettingsPriorities;                         // 0x0718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ActivateUnderwaterAudio();
	void AddInteriorOverride(const struct FSStartStopAudioEvents& StartStopOverride);
	void Apply_Override_Biome_Settings();
	void Apply_Per_Biome_Settings();
	void Apply_Spline_Modifiers();
	void DeactivateUnderwaterAudio();
	void ExecuteUbergraph_BP_AudioManager(int32 EntryPoint);
	void Get_Audio_Wind_Intensity(double Noisy_Wind_Speed_0, double Wind_Speed_0, double Wind_Speed_Variation_Amplifier_0, double Wind_Speed_Amplitude_0, double* Audio_Wind_Intensity);
	void Initialize_Biome_Music();
	void InsertOutdoorSettings(const struct FSStartStopAudioEvents& OutdoorSettings, int32 Priority);
	void Music_Beat_Event(float BeatDuration);
	void PopOutdoorSettings(const struct FSStartStopAudioEvents& OutdoorSettings, const struct FS_EnvironmentSettingsSwitches& OutdoorSettingsSwitches);
	void PostEventArray(TArray<class UAkAudioEvent*>& Events, class UAkComponent* AkComponent);
	void PushOutdoorSettings(const struct FSStartStopAudioEvents& OutdoorSettings, const struct FS_EnvironmentSettingsSwitches& OutdoorSettingsSwitches, int32 Priority);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void RemoveInteriorOverride();
	void Run_Audio(double OutdoorAmount, double Dungeon_Amount_0, const struct FVector2D& Location, bool Audio_Throttle);
	void Set_Env_Mod_Override_Amounts(double OutdoorAmount, double Dungeon_Amount_0);
	void Set_Settings();
	void SetRTPCArray(TArray<class UAkRtpc*>& RTPCs, double Value);
	void Stop_Audio();
	void StoreBiomeAmounts(EBiomeType Red_Category_Name_0, int32 Red_Cat_Amount_0, EBiomeType Green_Category_Name_0, int32 Green_Cat_Amount_0, EBiomeType Blue_Category_Name_0, int32 Blue_Cat_Amount_0, EBiomeType Alpha_Category_Name_0, int32 Alpha_Cat_Amount_0);
	void SunAltitudePhaseChange();
	void UnbindSunUpdate();
	void UnbindUnderwaterDelegates();
	void UpdateInteriorAmount(double Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AudioManager_C">();
	}
	static class ABP_AudioManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AudioManager_C>();
	}
};
static_assert(alignof(ABP_AudioManager_C) == 0x000008, "Wrong alignment on ABP_AudioManager_C");
static_assert(sizeof(ABP_AudioManager_C) == 0x000728, "Wrong size on ABP_AudioManager_C");
static_assert(offsetof(ABP_AudioManager_C, UberGraphFrame) == 0x000348, "Member 'ABP_AudioManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Ak_Alpha_Biome) == 0x000350, "Member 'ABP_AudioManager_C::Ak_Alpha_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Ak_Blue_Biome) == 0x000358, "Member 'ABP_AudioManager_C::Ak_Blue_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Ak_Outdoor) == 0x000360, "Member 'ABP_AudioManager_C::Ak_Outdoor' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, IntrepidAK) == 0x000368, "Member 'ABP_AudioManager_C::IntrepidAK' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Ak_Red_Biome) == 0x000370, "Member 'ABP_AudioManager_C::Ak_Red_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Ak_Green_Biome) == 0x000378, "Member 'ABP_AudioManager_C::Ak_Green_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Ak_Dungeon) == 0x000380, "Member 'ABP_AudioManager_C::Ak_Dungeon' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Audio) == 0x000388, "Member 'ABP_AudioManager_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, DefaultSceneRoot) == 0x000390, "Member 'ABP_AudioManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, UnderwaterAmount) == 0x000398, "Member 'ABP_AudioManager_C::UnderwaterAmount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Outdoor_Amount) == 0x0003A0, "Member 'ABP_AudioManager_C::Outdoor_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Dungeon_Amount) == 0x0003A8, "Member 'ABP_AudioManager_C::Dungeon_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Red_Biome_Amount) == 0x0003B0, "Member 'ABP_AudioManager_C::Red_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Green_Biome_Amount) == 0x0003B8, "Member 'ABP_AudioManager_C::Green_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Blue_Biome_Amount) == 0x0003C0, "Member 'ABP_AudioManager_C::Blue_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Alpha_Biome_Amount) == 0x0003C8, "Member 'ABP_AudioManager_C::Alpha_Biome_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Red_Biome_Settings) == 0x0003D0, "Member 'ABP_AudioManager_C::Red_Biome_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Green_Biome_Settings) == 0x0003E0, "Member 'ABP_AudioManager_C::Green_Biome_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Blue_Biome_Settings) == 0x0003F0, "Member 'ABP_AudioManager_C::Blue_Biome_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Alpha_Biome_Settings) == 0x000400, "Member 'ABP_AudioManager_C::Alpha_Biome_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Outdoor_Settings) == 0x000410, "Member 'ABP_AudioManager_C::Outdoor_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Outdoor_Settings_Switches) == 0x000420, "Member 'ABP_AudioManager_C::Outdoor_Settings_Switches' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Dungeon_Settings) == 0x000438, "Member 'ABP_AudioManager_C::Dungeon_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Dungeon_Settings_Switches) == 0x000448, "Member 'ABP_AudioManager_C::Dungeon_Settings_Switches' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, OutdoorSettingsPriority) == 0x00045C, "Member 'ABP_AudioManager_C::OutdoorSettingsPriority' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Interior_Amount) == 0x000460, "Member 'ABP_AudioManager_C::Interior_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Interior_Audio_Override) == 0x000468, "Member 'ABP_AudioManager_C::Interior_Audio_Override' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, InteriorAudioVolumeRTPCs) == 0x000478, "Member 'ABP_AudioManager_C::InteriorAudioVolumeRTPCs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Biome_Sound_Settings) == 0x000488, "Member 'ABP_AudioManager_C::Biome_Sound_Settings' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Red_Category_Name) == 0x0004D8, "Member 'ABP_AudioManager_C::Red_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Green_Category_Name) == 0x0004D9, "Member 'ABP_AudioManager_C::Green_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Blue_Category_Name) == 0x0004DA, "Member 'ABP_AudioManager_C::Blue_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Alpha_Category_Name) == 0x0004DB, "Member 'ABP_AudioManager_C::Alpha_Category_Name' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Beat_Phase) == 0x0004DC, "Member 'ABP_AudioManager_C::Beat_Phase' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Half_Bar_Phase) == 0x0004E0, "Member 'ABP_AudioManager_C::Half_Bar_Phase' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Bar_Phase) == 0x0004E4, "Member 'ABP_AudioManager_C::Bar_Phase' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Half_Phrase_Phase) == 0x0004E8, "Member 'ABP_AudioManager_C::Half_Phrase_Phase' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Phrase_Phase) == 0x0004EC, "Member 'ABP_AudioManager_C::Phrase_Phase' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Red) == 0x0004F0, "Member 'ABP_AudioManager_C::PlayingID_Red' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Green) == 0x0004F4, "Member 'ABP_AudioManager_C::PlayingID_Green' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Blue) == 0x0004F8, "Member 'ABP_AudioManager_C::PlayingID_Blue' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Alpha) == 0x0004FC, "Member 'ABP_AudioManager_C::PlayingID_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Outdoor) == 0x000500, "Member 'ABP_AudioManager_C::PlayingID_Outdoor' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Dungeon) == 0x000504, "Member 'ABP_AudioManager_C::PlayingID_Dungeon' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Beat_Duration) == 0x000508, "Member 'ABP_AudioManager_C::Beat_Duration' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Half_Bar_Duration) == 0x00050C, "Member 'ABP_AudioManager_C::Half_Bar_Duration' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Bar_Duration) == 0x000510, "Member 'ABP_AudioManager_C::Bar_Duration' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Half_Phrase_Duration) == 0x000514, "Member 'ABP_AudioManager_C::Half_Phrase_Duration' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Phrase_Duration) == 0x000518, "Member 'ABP_AudioManager_C::Phrase_Duration' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, PlayingID_Interior) == 0x00051C, "Member 'ABP_AudioManager_C::PlayingID_Interior' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Interior_Stop_Override) == 0x000520, "Member 'ABP_AudioManager_C::Interior_Stop_Override' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Noisy_Wind_Speed) == 0x000528, "Member 'ABP_AudioManager_C::Noisy_Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Wind_Speed) == 0x000530, "Member 'ABP_AudioManager_C::Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Wind_Speed_Variation_Amplifier) == 0x000538, "Member 'ABP_AudioManager_C::Wind_Speed_Variation_Amplifier' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Wind_Speed_Amplitude) == 0x000540, "Member 'ABP_AudioManager_C::Wind_Speed_Amplitude' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Use_Override_Biome) == 0x000548, "Member 'ABP_AudioManager_C::Use_Override_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Override_Biome) == 0x000549, "Member 'ABP_AudioManager_C::Override_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Red_Cat_Amount) == 0x00054C, "Member 'ABP_AudioManager_C::Red_Cat_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Green_Cat_Amount) == 0x000550, "Member 'ABP_AudioManager_C::Green_Cat_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Blue_Cat_Amount) == 0x000554, "Member 'ABP_AudioManager_C::Blue_Cat_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Alpha_Cat_Amount) == 0x000558, "Member 'ABP_AudioManager_C::Alpha_Cat_Amount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, IntrepidSky) == 0x000560, "Member 'ABP_AudioManager_C::IntrepidSky' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, TimeOfDayRTPCs) == 0x000568, "Member 'ABP_AudioManager_C::TimeOfDayRTPCs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, TimeOfYearRTPCs) == 0x000578, "Member 'ABP_AudioManager_C::TimeOfYearRTPCs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, IntensityWindRTPCs) == 0x000588, "Member 'ABP_AudioManager_C::IntensityWindRTPCs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, IntensityRainRTPCs) == 0x000598, "Member 'ABP_AudioManager_C::IntensityRainRTPCs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Wind_Speed_Intermediate) == 0x0005A8, "Member 'ABP_AudioManager_C::Wind_Speed_Intermediate' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Material_Reverbs) == 0x0005B0, "Member 'ABP_AudioManager_C::Material_Reverbs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Reverb_Sets) == 0x000600, "Member 'ABP_AudioManager_C::Reverb_Sets' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Material_Reverbs_Buffer) == 0x000650, "Member 'ABP_AudioManager_C::Material_Reverbs_Buffer' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Biome_Music_Assets) == 0x000660, "Member 'ABP_AudioManager_C::Biome_Music_Assets' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, Default_Music_Biome) == 0x0006B0, "Member 'ABP_AudioManager_C::Default_Music_Biome' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, InteriorOverrideCount) == 0x0006B4, "Member 'ABP_AudioManager_C::InteriorOverrideCount' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, TemperatureRTPCs) == 0x0006B8, "Member 'ABP_AudioManager_C::TemperatureRTPCs' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, OutdoorSettingsStack) == 0x0006C8, "Member 'ABP_AudioManager_C::OutdoorSettingsStack' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, UnderwaterStartEvents) == 0x0006D8, "Member 'ABP_AudioManager_C::UnderwaterStartEvents' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, UnderwaterStopEvents) == 0x0006E8, "Member 'ABP_AudioManager_C::UnderwaterStopEvents' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, GlobalStartEvents) == 0x0006F8, "Member 'ABP_AudioManager_C::GlobalStartEvents' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, GlobalStopEvents) == 0x000708, "Member 'ABP_AudioManager_C::GlobalStopEvents' has a wrong offset!");
static_assert(offsetof(ABP_AudioManager_C, OutdoorSettingsPriorities) == 0x000718, "Member 'ABP_AudioManager_C::OutdoorSettingsPriorities' has a wrong offset!");

}

