#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh

#include "Basic.hpp"

#include "BP_SplineMesh_classes.hpp"
#include "BP_SplineMesh_parameters.hpp"


namespace SDK
{

// Function BP_SplineMesh.BP_SplineMesh_C.Add Meshes To Spline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSSplineMeshEntry>&       In_Entries                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FSSplineMeshEntry&         In_Override_Entry_Start                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FSSplineMeshEntry&         In_Override_Entry_End                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::Add_Meshes_To_Spline(class USplineComponent* Spline_Component, TArray<struct FSSplineMeshEntry>& In_Entries, const struct FSSplineMeshEntry& In_Override_Entry_Start, const struct FSSplineMeshEntry& In_Override_Entry_End, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Add Meshes To Spline");

	Params::BP_SplineMesh_C_Add_Meshes_To_Spline Parms{};

	Parms.Spline_Component = Spline_Component;
	Parms.In_Entries = std::move(In_Entries);
	Parms.In_Override_Entry_Start = std::move(In_Override_Entry_Start);
	Parms.In_Override_Entry_End = std::move(In_Override_Entry_End);

	UObject::ProcessEvent(Func, &Parms);

	In_Entries = std::move(Parms.In_Entries);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_SplineMesh.BP_SplineMesh_C.Bake
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Bake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Bake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Build Spline Mesh Actor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Build_Spline_Mesh_Actor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Build Spline Mesh Actor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Clear Previous Meshes
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Clear_Previous_Meshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Clear Previous Meshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.disable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::disable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "disable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Enable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Enable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Enable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Join
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Join()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Join");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Show Indices
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Show_Indices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Show Indices");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Snap Spline to Ground
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_C::Snap_Spline_to_Ground(class USplineComponent* Spline_Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Snap Spline to Ground");

	Params::BP_SplineMesh_C_Snap_Spline_to_Ground Parms{};

	Parms.Spline_Component = Spline_Component;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineMesh.BP_SplineMesh_C.Split
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::Split()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "Split");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineMesh.BP_SplineMesh_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineMesh_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

