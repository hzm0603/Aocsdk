#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Wander

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "AIModule_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK::Params
{

// Function STT_Wander.STT_Wander_C.CheckCVarEnabled
// 0x0001 (0x0001 - 0x0000)
struct STT_Wander_C_CheckCVarEnabled final
{
public:
	bool                                          CallFunc_GetSTTWanderEnabled_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_CheckCVarEnabled) == 0x000001, "Wrong alignment on STT_Wander_C_CheckCVarEnabled");
static_assert(sizeof(STT_Wander_C_CheckCVarEnabled) == 0x000001, "Wrong size on STT_Wander_C_CheckCVarEnabled");
static_assert(offsetof(STT_Wander_C_CheckCVarEnabled, CallFunc_GetSTTWanderEnabled_ReturnValue) == 0x000000, "Member 'STT_Wander_C_CheckCVarEnabled::CallFunc_GetSTTWanderEnabled_ReturnValue' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.ExecuteUbergraph_STT_Wander
// 0x01E0 (0x01E0 - 0x0000)
struct STT_Wander_C_ExecuteUbergraph_STT_Wander final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPathFollowingStatus                          CallFunc_GetMoveStatus_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetOuterObject_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ANPCPawn_C*                             K2Node_DynamicCast_AsNPCPawn;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FExprValue                             CallFunc_EvaluateExpression_Source_ReturnValue;    // 0x0038(0x00C8)()
	class AAIController*                          CallFunc_GetAIController_ReturnValue_2;            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPathFollowingRequestResult                   CallFunc_MoveToLocation_ReturnValue;               // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTime;                            // 0x010C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStateTreeTransitionResult             K2Node_Event_Transition_1;                         // 0x0110(0x002E)(ConstParm, NoDestructor)
	struct FStateTreeTransitionResult             K2Node_Event_Transition;                           // 0x013E(0x002E)(ConstParm, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SimpleGetWanderTarget_Valid;              // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPivotInLineOfSight_IsValid;             // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x016F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPathFollowingRequestResult                   CallFunc_MoveToLocation_ReturnValue_1;             // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetOuterObject_ReturnValue_1;             // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANPCPawn_C*                             K2Node_DynamicCast_AsNPCPawn_1;                    // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          CallFunc_GetAIController_ReturnValue_3;            // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MoveToLocation_AcceptanceRadius_ImplicitCast; // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_OriginalSpeed_ImplicitCast;     // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast_1;    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_ExecuteUbergraph_STT_Wander) == 0x000008, "Wrong alignment on STT_Wander_C_ExecuteUbergraph_STT_Wander");
static_assert(sizeof(STT_Wander_C_ExecuteUbergraph_STT_Wander) == 0x0001E0, "Wrong size on STT_Wander_C_ExecuteUbergraph_STT_Wander");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, EntryPoint) == 0x000000, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::EntryPoint' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetAIController_ReturnValue) == 0x000008, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetMoveStatus_ReturnValue) == 0x000010, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetMoveStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetOuterObject_ReturnValue) == 0x000018, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetOuterObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_DynamicCast_AsNPCPawn) == 0x000020, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_DynamicCast_AsNPCPawn' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetAIController_ReturnValue_1) == 0x000030, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetAIController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_EvaluateExpression_Source_ReturnValue) == 0x000038, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_EvaluateExpression_Source_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetAIController_ReturnValue_2) == 0x000100, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetAIController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_MoveToLocation_ReturnValue) == 0x000108, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_MoveToLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_SwitchEnum_CmpSuccess) == 0x000109, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_Event_DeltaTime) == 0x00010C, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_Event_Transition_1) == 0x000110, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_Event_Transition_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_Event_Transition) == 0x00013E, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_Event_Transition' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_IsValid_ReturnValue_1) == 0x00016C, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_SimpleGetWanderTarget_Valid) == 0x00016D, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_SimpleGetWanderTarget_Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_IsPivotInLineOfSight_IsValid) == 0x00016E, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_IsPivotInLineOfSight_IsValid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00016F, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_BooleanAND_ReturnValue) == 0x000170, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000178, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000180, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_Add_IntInt_ReturnValue) == 0x000188, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_MakeLiteralByte_ReturnValue) == 0x00018C, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00018D, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x00018E, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00018F, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_MoveToLocation_ReturnValue_1) == 0x000190, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_MoveToLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetOuterObject_ReturnValue_1) == 0x000198, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetOuterObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_SwitchEnum_CmpSuccess_1) == 0x0001A0, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_DynamicCast_AsNPCPawn_1) == 0x0001A8, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_DynamicCast_AsNPCPawn_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_DynamicCast_bSuccess_1) == 0x0001B0, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_GetAIController_ReturnValue_3) == 0x0001B8, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_GetAIController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_IsValid_ReturnValue_2) == 0x0001C0, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_MoveToLocation_AcceptanceRadius_ImplicitCast) == 0x0001C4, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_MoveToLocation_AcceptanceRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0001C8, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_VariableSet_OriginalSpeed_ImplicitCast) == 0x0001D0, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_VariableSet_OriginalSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x0001D8, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_ExecuteUbergraph_STT_Wander, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast_1) == 0x0001DC, "Member 'STT_Wander_C_ExecuteUbergraph_STT_Wander::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast_1' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.GetPotentialWanderTargets
// 0x00B8 (0x00B8 - 0x0000)
struct STT_Wander_C_GetPotentialWanderTargets final
{
public:
	double                                        CurrentDis;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngle;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RadiansToDegrees_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPivotInLineOfSight_IsValid;             // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InAngleRange_Valid;                       // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast;    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_GetPotentialWanderTargets) == 0x000008, "Wrong alignment on STT_Wander_C_GetPotentialWanderTargets");
static_assert(sizeof(STT_Wander_C_GetPotentialWanderTargets) == 0x0000B8, "Wrong size on STT_Wander_C_GetPotentialWanderTargets");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CurrentDis) == 0x000000, "Member 'STT_Wander_C_GetPotentialWanderTargets::CurrentDis' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CurrentAngle) == 0x000008, "Member 'STT_Wander_C_GetPotentialWanderTargets::CurrentAngle' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000020, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000030, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000040, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_RadiansToDegrees_ReturnValue) == 0x000048, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_RadiansToDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000068, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_RotateAngleAxis_ReturnValue) == 0x000070, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Add_VectorVector_ReturnValue) == 0x000088, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Array_Add_ReturnValue) == 0x0000A0, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000A4, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_IsPivotInLineOfSight_IsValid) == 0x0000A5, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_IsPivotInLineOfSight_IsValid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_InAngleRange_Valid) == 0x0000A6, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_InAngleRange_Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetPotentialWanderTargets, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast) == 0x0000B4, "Member 'STT_Wander_C_GetPotentialWanderTargets::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.GetWanderTarget
// 0x0068 (0x0068 - 0x0000)
struct STT_Wander_C_GetWanderTarget final
{
public:
	bool                                          HasWanderTarget;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Attempt;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidWanderPoint_Valid;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_IsValidWanderPoint_NavLoc;                // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_GetWanderTarget) == 0x000008, "Wrong alignment on STT_Wander_C_GetWanderTarget");
static_assert(sizeof(STT_Wander_C_GetWanderTarget) == 0x000068, "Wrong size on STT_Wander_C_GetWanderTarget");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, HasWanderTarget) == 0x000000, "Member 'STT_Wander_C_GetWanderTarget::HasWanderTarget' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, Index_0) == 0x000004, "Member 'STT_Wander_C_GetWanderTarget::Index_0' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, Attempt) == 0x000008, "Member 'STT_Wander_C_GetWanderTarget::Attempt' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_Array_Length_ReturnValue_1) == 0x000014, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00001C, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_Array_Get_Item) == 0x000028, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_IsValidWanderPoint_Valid) == 0x000040, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_IsValidWanderPoint_Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_IsValidWanderPoint_NavLoc) == 0x000048, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_IsValidWanderPoint_NavLoc' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_GetWanderTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'STT_Wander_C_GetWanderTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.InAngleRange
// 0x00F0 (0x00F0 - 0x0000)
struct STT_Wander_C_InAngleRange final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetNavAgentLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_InAngleRange) == 0x000008, "Wrong alignment on STT_Wander_C_InAngleRange");
static_assert(sizeof(STT_Wander_C_InAngleRange) == 0x0000F0, "Wrong size on STT_Wander_C_InAngleRange");
static_assert(offsetof(STT_Wander_C_InAngleRange, Loc) == 0x000000, "Member 'STT_Wander_C_InAngleRange::Loc' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, Valid) == 0x000018, "Member 'STT_Wander_C_InAngleRange::Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_GetNavAgentLocation_ReturnValue) == 0x000020, "Member 'STT_Wander_C_InAngleRange::CallFunc_GetNavAgentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'STT_Wander_C_InAngleRange::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000050, "Member 'STT_Wander_C_InAngleRange::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_Normal_ReturnValue) == 0x000068, "Member 'STT_Wander_C_InAngleRange::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_BreakVector_X) == 0x000080, "Member 'STT_Wander_C_InAngleRange::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_BreakVector_Y) == 0x000088, "Member 'STT_Wander_C_InAngleRange::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_BreakVector_Z) == 0x000090, "Member 'STT_Wander_C_InAngleRange::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'STT_Wander_C_InAngleRange::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_Normal_ReturnValue_1) == 0x0000B0, "Member 'STT_Wander_C_InAngleRange::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_VSize_ReturnValue) == 0x0000C8, "Member 'STT_Wander_C_InAngleRange::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000D0, "Member 'STT_Wander_C_InAngleRange::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'STT_Wander_C_InAngleRange::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_DegAcos_ReturnValue) == 0x0000E0, "Member 'STT_Wander_C_InAngleRange::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'STT_Wander_C_InAngleRange::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x0000E9, "Member 'STT_Wander_C_InAngleRange::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_InAngleRange, CallFunc_BooleanAND_ReturnValue) == 0x0000EA, "Member 'STT_Wander_C_InAngleRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.IsPivotInLineOfSight
// 0x0120 (0x0120 - 0x0000)
struct STT_Wander_C_IsPivotInLineOfSight final
{
public:
	struct FVector                                InLoc;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0030(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_IsPivotInLineOfSight) == 0x000008, "Wrong alignment on STT_Wander_C_IsPivotInLineOfSight");
static_assert(sizeof(STT_Wander_C_IsPivotInLineOfSight) == 0x000120, "Wrong size on STT_Wander_C_IsPivotInLineOfSight");
static_assert(offsetof(STT_Wander_C_IsPivotInLineOfSight, InLoc) == 0x000000, "Member 'STT_Wander_C_IsPivotInLineOfSight::InLoc' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsPivotInLineOfSight, IsValid) == 0x000018, "Member 'STT_Wander_C_IsPivotInLineOfSight::IsValid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsPivotInLineOfSight, Temp_object_Variable) == 0x000020, "Member 'STT_Wander_C_IsPivotInLineOfSight::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsPivotInLineOfSight, CallFunc_LineTraceSingle_OutHit) == 0x000030, "Member 'STT_Wander_C_IsPivotInLineOfSight::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsPivotInLineOfSight, CallFunc_LineTraceSingle_ReturnValue) == 0x000118, "Member 'STT_Wander_C_IsPivotInLineOfSight::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsPivotInLineOfSight, CallFunc_Not_PreBool_ReturnValue) == 0x000119, "Member 'STT_Wander_C_IsPivotInLineOfSight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.IsValidWanderPoint
// 0x0298 (0x0298 - 0x0000)
struct STT_Wander_C_IsValidWanderPoint final
{
public:
	struct FVector                                Loc;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Valid;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NavLoc;                                            // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0038(0x0010)(ConstParm, ReferenceParm)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecastNavMesh*                         CallFunc_GetActorOfClass_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0098(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0220(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_ProjectPointToNavigation_ProjectedLocation; // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_ProjectPointToNavigation_ReturnValue;  // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_IsValidWanderPoint) == 0x000008, "Wrong alignment on STT_Wander_C_IsValidWanderPoint");
static_assert(sizeof(STT_Wander_C_IsValidWanderPoint) == 0x000298, "Wrong size on STT_Wander_C_IsValidWanderPoint");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, Loc) == 0x000000, "Member 'STT_Wander_C_IsValidWanderPoint::Loc' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, Valid) == 0x000018, "Member 'STT_Wander_C_IsValidWanderPoint::Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, NavLoc) == 0x000020, "Member 'STT_Wander_C_IsValidWanderPoint::NavLoc' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, Temp_object_Variable) == 0x000038, "Member 'STT_Wander_C_IsValidWanderPoint::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_MakeLiteralByte_ReturnValue) == 0x000048, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, K2Node_MakeArray_Array) == 0x000068, "Member 'STT_Wander_C_IsValidWanderPoint::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000078, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_GetActorOfClass_ReturnValue) == 0x000090, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000098, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000180, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_MakeVector_ReturnValue) == 0x000188, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A0, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001A1, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_Time) == 0x0001A4, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_Distance) == 0x0001A8, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_Location) == 0x0001B0, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_ImpactPoint) == 0x0001C8, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_Normal) == 0x0001E0, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_ImpactNormal) == 0x0001F8, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_PhysMat) == 0x000210, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_HitActor) == 0x000218, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_HitComponent) == 0x000220, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_HitBoneName) == 0x000228, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_BoneName) == 0x000230, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_HitItem) == 0x000238, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_ElementIndex) == 0x00023C, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_FaceIndex) == 0x000240, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_TraceStart) == 0x000248, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_BreakHitResult_TraceEnd) == 0x000260, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_K2_ProjectPointToNavigation_ProjectedLocation) == 0x000278, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_K2_ProjectPointToNavigation_ProjectedLocation' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_IsValidWanderPoint, CallFunc_K2_ProjectPointToNavigation_ReturnValue) == 0x000290, "Member 'STT_Wander_C_IsValidWanderPoint::CallFunc_K2_ProjectPointToNavigation_ReturnValue' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.ReceiveExitState
// 0x002E (0x002E - 0x0000)
struct STT_Wander_C_ReceiveExitState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_Wander_C_ReceiveExitState) == 0x000002, "Wrong alignment on STT_Wander_C_ReceiveExitState");
static_assert(sizeof(STT_Wander_C_ReceiveExitState) == 0x00002E, "Wrong size on STT_Wander_C_ReceiveExitState");
static_assert(offsetof(STT_Wander_C_ReceiveExitState, Transition) == 0x000000, "Member 'STT_Wander_C_ReceiveExitState::Transition' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.ReceiveLatentEnterState
// 0x002E (0x002E - 0x0000)
struct STT_Wander_C_ReceiveLatentEnterState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_Wander_C_ReceiveLatentEnterState) == 0x000002, "Wrong alignment on STT_Wander_C_ReceiveLatentEnterState");
static_assert(sizeof(STT_Wander_C_ReceiveLatentEnterState) == 0x00002E, "Wrong size on STT_Wander_C_ReceiveLatentEnterState");
static_assert(offsetof(STT_Wander_C_ReceiveLatentEnterState, Transition) == 0x000000, "Member 'STT_Wander_C_ReceiveLatentEnterState::Transition' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.ReceiveLatentTick
// 0x0004 (0x0004 - 0x0000)
struct STT_Wander_C_ReceiveLatentTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_ReceiveLatentTick) == 0x000004, "Wrong alignment on STT_Wander_C_ReceiveLatentTick");
static_assert(sizeof(STT_Wander_C_ReceiveLatentTick) == 0x000004, "Wrong size on STT_Wander_C_ReceiveLatentTick");
static_assert(offsetof(STT_Wander_C_ReceiveLatentTick, DeltaTime) == 0x000000, "Member 'STT_Wander_C_ReceiveLatentTick::DeltaTime' has a wrong offset!");

// Function STT_Wander.STT_Wander_C.SimpleGetWanderTarget
// 0x00A0 (0x00A0 - 0x0000)
struct STT_Wander_C_SimpleGetWanderTarget final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidWanderPoint_Valid;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_IsValidWanderPoint_NavLoc;                // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast;    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Wander_C_SimpleGetWanderTarget) == 0x000008, "Wrong alignment on STT_Wander_C_SimpleGetWanderTarget");
static_assert(sizeof(STT_Wander_C_SimpleGetWanderTarget) == 0x0000A0, "Wrong size on STT_Wander_C_SimpleGetWanderTarget");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, Valid) == 0x000000, "Member 'STT_Wander_C_SimpleGetWanderTarget::Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_RotateAngleAxis_ReturnValue) == 0x000010, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000028, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000030, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000048, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_IsValidWanderPoint_Valid) == 0x000078, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_IsValidWanderPoint_Valid' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_IsValidWanderPoint_NavLoc) == 0x000080, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_IsValidWanderPoint_NavLoc' has a wrong offset!");
static_assert(offsetof(STT_Wander_C_SimpleGetWanderTarget, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast) == 0x000098, "Member 'STT_Wander_C_SimpleGetWanderTarget::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast' has a wrong offset!");

}

