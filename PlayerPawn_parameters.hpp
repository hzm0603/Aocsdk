#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerPawn

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PlayerPawn.PlayerPawn_C.CreateAndShowDeathWidget
// 0x0018 (0x0018 - 0x0000)
struct PlayerPawn_C_CreateAndShowDeathWidget final
{
public:
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCPlayerController*                   K2Node_DynamicCast_AsAo_CPlayer_Controller;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_CreateAndShowDeathWidget) == 0x000008, "Wrong alignment on PlayerPawn_C_CreateAndShowDeathWidget");
static_assert(sizeof(PlayerPawn_C_CreateAndShowDeathWidget) == 0x000018, "Wrong size on PlayerPawn_C_CreateAndShowDeathWidget");
static_assert(offsetof(PlayerPawn_C_CreateAndShowDeathWidget, CallFunc_GetController_ReturnValue) == 0x000000, "Member 'PlayerPawn_C_CreateAndShowDeathWidget::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_CreateAndShowDeathWidget, K2Node_DynamicCast_AsAo_CPlayer_Controller) == 0x000008, "Member 'PlayerPawn_C_CreateAndShowDeathWidget::K2Node_DynamicCast_AsAo_CPlayer_Controller' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_CreateAndShowDeathWidget, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'PlayerPawn_C_CreateAndShowDeathWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.DamageFlinchBP
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_DamageFlinchBP final
{
public:
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_DamageFlinchBP) == 0x000008, "Wrong alignment on PlayerPawn_C_DamageFlinchBP");
static_assert(sizeof(PlayerPawn_C_DamageFlinchBP) == 0x000008, "Wrong size on PlayerPawn_C_DamageFlinchBP");
static_assert(offsetof(PlayerPawn_C_DamageFlinchBP, DamageType) == 0x000000, "Member 'PlayerPawn_C_DamageFlinchBP::DamageType' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.DialogueServerEvent
// 0x0018 (0x0018 - 0x0000)
struct PlayerPawn_C_DialogueServerEvent final
{
public:
	class ANPCPawn_C*                             NPC;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 Tag;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_DialogueServerEvent) == 0x000008, "Wrong alignment on PlayerPawn_C_DialogueServerEvent");
static_assert(sizeof(PlayerPawn_C_DialogueServerEvent) == 0x000018, "Wrong size on PlayerPawn_C_DialogueServerEvent");
static_assert(offsetof(PlayerPawn_C_DialogueServerEvent, NPC) == 0x000000, "Member 'PlayerPawn_C_DialogueServerEvent::NPC' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_DialogueServerEvent, Tag) == 0x000008, "Member 'PlayerPawn_C_DialogueServerEvent::Tag' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.EnableCursor
// 0x0018 (0x0018 - 0x0000)
struct PlayerPawn_C_EnableCursor final
{
public:
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCPlayerController*                   K2Node_DynamicCast_AsAo_CPlayer_Controller;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_EnableCursor) == 0x000008, "Wrong alignment on PlayerPawn_C_EnableCursor");
static_assert(sizeof(PlayerPawn_C_EnableCursor) == 0x000018, "Wrong size on PlayerPawn_C_EnableCursor");
static_assert(offsetof(PlayerPawn_C_EnableCursor, CallFunc_GetController_ReturnValue) == 0x000000, "Member 'PlayerPawn_C_EnableCursor::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_EnableCursor, K2Node_DynamicCast_AsAo_CPlayer_Controller) == 0x000008, "Member 'PlayerPawn_C_EnableCursor::K2Node_DynamicCast_AsAo_CPlayer_Controller' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_EnableCursor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'PlayerPawn_C_EnableCursor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.ExecuteUbergraph_PlayerPawn
// 0x0438 (0x0438 - 0x0000)
struct PlayerPawn_C_ExecuteUbergraph_PlayerPawn final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UniqueObjectNameForCooking_NotifyName_4;           // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       UniqueObjectNameForCooking_OutputDelegate;         // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   UniqueObjectNameForCooking_NotifyName_3;           // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       UniqueObjectNameForCooking_OutputDelegate_1;       // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   UniqueObjectNameForCooking_NotifyName_2;           // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       UniqueObjectNameForCooking_OutputDelegate_2;       // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   UniqueObjectNameForCooking_NotifyName_1;           // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       UniqueObjectNameForCooking_OutputDelegate_3;       // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   UniqueObjectNameForCooking_NotifyName;             // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       UniqueObjectNameForCooking_OutputDelegate_4;       // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             UniqueObjectNameForCooking_OutputDelegate_5;       // 0x0084(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AHarvestableResource_C*                 K2Node_DynamicCast_AsHarvestable_Resource;         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         K2Node_Event_Target;                               // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RevHealthPercent;                     // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ReviveManaPercent;                    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ReviveStaminaPercent;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bZoomIn;                              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         K2Node_Event_Attacker_1;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCGameStateBase*                      K2Node_DynamicCast_AsAo_CGame_State_Base;          // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseCharacter*                         K2Node_Event_Attacker;                             // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_CameraLagSpeed;                 // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Falling;                        // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Dodging_1;                      // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_WasFalling;                     // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Dodging;                        // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_PreviousCameraLagValue;         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_2;              // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCPlayerController*                   K2Node_DynamicCast_AsAo_CPlayer_Controller;        // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAoCPlayerController*                   K2Node_DynamicCast_AsAo_CPlayer_Controller_1;      // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_NewController;                        // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UDamageType>                K2Node_Event_DamageType;                           // 0x0178(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ANPCPawn_C*                             K2Node_CustomEvent_NPC;                            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_Tag;                            // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CameraLagSpeed;                       // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_OldCameraLagSpeed;                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_Location;                             // 0x01A8(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNameplateWidgetBase*                   K2Node_DynamicCast_AsNameplate_Widget_Base;        // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue_1;                   // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x01DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0238(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ClampAngle_ReturnValue;                   // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AAoCCameraManager*                      CallFunc_GetCameraManager_CameraManager;           // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCCameraManager*                      CallFunc_GetCameraManager_CameraManager_1;         // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_DefaultTargetingFov_ImplicitCast; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_InitialCameraArmLength_ImplicitCast; // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast;    // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast_1;  // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast_2;  // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_CachedDefaultFOV_ImplicitCast;  // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_StartCameraLag_CameraLagSpeed_ImplicitCast; // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_StopCameraLag_PreviousCameraLagValue_ImplicitCast; // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_2;                // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_DefaultFov_ImplicitCast;        // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_3;                // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast_3;  // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_4;                // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_5;                // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast_4;  // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_CameraLagSpeed_ImplicitCast_5;  // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_TargetArmLength_ImplicitCast;   // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ClampAngle_AngleDegrees_ImplicitCast;     // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn) == 0x000008, "Wrong alignment on PlayerPawn_C_ExecuteUbergraph_PlayerPawn");
static_assert(sizeof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn) == 0x000438, "Wrong size on PlayerPawn_C_ExecuteUbergraph_PlayerPawn");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, EntryPoint) == 0x000000, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::EntryPoint' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_NotifyName_4) == 0x000004, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_NotifyName_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_OutputDelegate) == 0x00000C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_NotifyName_3) == 0x00001C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_NotifyName_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_OutputDelegate_1) == 0x000024, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_NotifyName_2) == 0x000034, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_NotifyName_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_OutputDelegate_2) == 0x00003C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_NotifyName_1) == 0x00004C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_NotifyName_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_OutputDelegate_3) == 0x000054, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_NotifyName) == 0x000064, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_NotifyName' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_OutputDelegate_4) == 0x00006C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, Temp_name_Variable) == 0x00007C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, UniqueObjectNameForCooking_OutputDelegate_5) == 0x000084, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::UniqueObjectNameForCooking_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000098, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_AsHarvestable_Resource) == 0x0000A0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_AsHarvestable_Resource' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue) == 0x0000A9, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_SwitchEnum_CmpSuccess) == 0x0000AA, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_ReturnValue) == 0x0000B0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_Target) == 0x0000B8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_Target' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_RevHealthPercent) == 0x0000C0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_RevHealthPercent' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_ReviveManaPercent) == 0x0000C4, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_ReviveManaPercent' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_ReviveStaminaPercent) == 0x0000C8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_ReviveStaminaPercent' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_bZoomIn) == 0x0000CC, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_bZoomIn' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0000D0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue_1) == 0x0000D8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetController_ReturnValue) == 0x0000E0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsDead_ReturnValue) == 0x0000E8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetGameState_ReturnValue) == 0x0000F0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_Attacker_1) == 0x0000F8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_Attacker_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_AsAo_CGame_State_Base) == 0x000100, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_AsAo_CGame_State_Base' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_bSuccess_1) == 0x000108, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_Attacker) == 0x000110, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_Attacker' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_CameraLagSpeed) == 0x000118, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_Falling) == 0x000120, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_Falling' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_Dodging_1) == 0x000121, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_Dodging_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_WasFalling) == 0x000122, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_WasFalling' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_Dodging) == 0x000123, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_Dodging' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_PreviousCameraLagValue) == 0x000128, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_PreviousCameraLagValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_ReturnValue_1) == 0x000130, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsServer_ReturnValue) == 0x000138, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetController_ReturnValue_1) == 0x000140, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetController_ReturnValue_2) == 0x000148, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_AsAo_CPlayer_Controller) == 0x000150, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_AsAo_CPlayer_Controller' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_bSuccess_2) == 0x000158, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_AsAo_CPlayer_Controller_1) == 0x000160, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_AsAo_CPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_bSuccess_3) == 0x000168, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_NewController) == 0x000170, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_DamageType) == 0x000178, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_NPC) == 0x000180, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_NPC' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_CustomEvent_Tag) == 0x000188, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_CustomEvent_Tag' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_CameraLagSpeed) == 0x000198, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_OldCameraLagSpeed) == 0x00019C, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_OldCameraLagSpeed' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_bEnable) == 0x0001A0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_Event_Location) == 0x0001A8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_Event_Location' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_HasAuthority_ReturnValue) == 0x0001C0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetWidget_ReturnValue) == 0x0001C8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_AsNameplate_Widget_Base) == 0x0001D0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_AsNameplate_Widget_Base' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_DynamicCast_bSuccess_4) == 0x0001D8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_HasAuthority_ReturnValue_1) == 0x0001D9, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsServer_ReturnValue_1) == 0x0001DA, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_SwitchEnum_CmpSuccess_1) == 0x0001DB, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetPlayerController_ReturnValue) == 0x0001E0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_ReturnValue_2) == 0x0001E8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue_2) == 0x0001F0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_K2_GetPawn_ReturnValue) == 0x0001F8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue_3) == 0x000200, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_ReturnValue_3) == 0x000208, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_ReturnValue_4) == 0x000210, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_ReturnValue_5) == 0x000218, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_VLerp_ReturnValue) == 0x000220, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000238, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000320, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000328, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_BreakRotator_Roll) == 0x000340, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_BreakRotator_Pitch) == 0x000344, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_BreakRotator_Yaw) == 0x000348, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_ClampAngle_ReturnValue) == 0x000350, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_MakeRotator_ReturnValue) == 0x000358, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetCameraManager_CameraManager) == 0x000370, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetCameraManager_CameraManager' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetCameraManager_CameraManager_1) == 0x000378, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetCameraManager_CameraManager_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue_4) == 0x000380, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue_5) == 0x000381, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_GetGameMode_ReturnValue) == 0x000388, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_IsValid_ReturnValue_6) == 0x000390, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000398, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_DefaultTargetingFov_ImplicitCast) == 0x0003A0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_DefaultTargetingFov_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_InitialCameraArmLength_ImplicitCast) == 0x0003A8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_InitialCameraArmLength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x0003B0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CameraLagSpeed_ImplicitCast) == 0x0003B8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CameraLagSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CameraLagSpeed_ImplicitCast_1) == 0x0003BC, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CameraLagSpeed_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CameraLagSpeed_ImplicitCast_2) == 0x0003C0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CameraLagSpeed_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CachedDefaultFOV_ImplicitCast) == 0x0003C8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CachedDefaultFOV_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_StartCameraLag_CameraLagSpeed_ImplicitCast) == 0x0003D0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_StartCameraLag_CameraLagSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_StopCameraLag_PreviousCameraLagValue_ImplicitCast) == 0x0003D8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_StopCameraLag_PreviousCameraLagValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_Alpha_ImplicitCast_2) == 0x0003E0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_DefaultFov_ImplicitCast) == 0x0003E8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_DefaultFov_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_Alpha_ImplicitCast_3) == 0x0003F0, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CameraLagSpeed_ImplicitCast_3) == 0x0003F8, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CameraLagSpeed_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_Alpha_ImplicitCast_4) == 0x000400, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_Alpha_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Lerp_Alpha_ImplicitCast_5) == 0x000408, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Lerp_Alpha_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CameraLagSpeed_ImplicitCast_4) == 0x000410, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CameraLagSpeed_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_CameraLagSpeed_ImplicitCast_5) == 0x000414, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_CameraLagSpeed_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000418, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, K2Node_VariableSet_TargetArmLength_ImplicitCast) == 0x000420, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::K2Node_VariableSet_TargetArmLength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_ClampAngle_AngleDegrees_ImplicitCast) == 0x000428, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_ClampAngle_AngleDegrees_ImplicitCast' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_ExecuteUbergraph_PlayerPawn, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000430, "Member 'PlayerPawn_C_ExecuteUbergraph_PlayerPawn::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.GetCameraManager
// 0x0020 (0x0020 - 0x0000)
struct PlayerPawn_C_GetCameraManager final
{
public:
	class AAoCCameraManager*                      CameraManager;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCCameraManager*                      K2Node_DynamicCast_AsAo_CCamera_Manager;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_GetCameraManager) == 0x000008, "Wrong alignment on PlayerPawn_C_GetCameraManager");
static_assert(sizeof(PlayerPawn_C_GetCameraManager) == 0x000020, "Wrong size on PlayerPawn_C_GetCameraManager");
static_assert(offsetof(PlayerPawn_C_GetCameraManager, CameraManager) == 0x000000, "Member 'PlayerPawn_C_GetCameraManager::CameraManager' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_GetCameraManager, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000008, "Member 'PlayerPawn_C_GetCameraManager::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_GetCameraManager, K2Node_DynamicCast_AsAo_CCamera_Manager) == 0x000010, "Member 'PlayerPawn_C_GetCameraManager::K2Node_DynamicCast_AsAo_CCamera_Manager' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_GetCameraManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PlayerPawn_C_GetCameraManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.GetDrivenSiegeWeapon
// 0x0010 (0x0010 - 0x0000)
struct PlayerPawn_C_GetDrivenSiegeWeapon final
{
public:
	class USiegeWeaponComponent*                  SiegeWeaponComponent;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USiegeWeaponComponent*                  CallFunc_GetSiegeWeapon_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_GetDrivenSiegeWeapon) == 0x000008, "Wrong alignment on PlayerPawn_C_GetDrivenSiegeWeapon");
static_assert(sizeof(PlayerPawn_C_GetDrivenSiegeWeapon) == 0x000010, "Wrong size on PlayerPawn_C_GetDrivenSiegeWeapon");
static_assert(offsetof(PlayerPawn_C_GetDrivenSiegeWeapon, SiegeWeaponComponent) == 0x000000, "Member 'PlayerPawn_C_GetDrivenSiegeWeapon::SiegeWeaponComponent' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_GetDrivenSiegeWeapon, CallFunc_GetSiegeWeapon_ReturnValue) == 0x000008, "Member 'PlayerPawn_C_GetDrivenSiegeWeapon::CallFunc_GetSiegeWeapon_ReturnValue' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000004, "Wrong alignment on PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(sizeof(PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000008, "Wrong size on PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(offsetof(PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325, NotifyName) == 0x000000, "Member 'PlayerPawn_C_OnBlendOut_1F40CC6D49EF4D93F75E2E94FCC7F325::NotifyName' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnCameraZoomClient
// 0x0001 (0x0001 - 0x0000)
struct PlayerPawn_C_OnCameraZoomClient final
{
public:
	bool                                          bZoomIn;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnCameraZoomClient) == 0x000001, "Wrong alignment on PlayerPawn_C_OnCameraZoomClient");
static_assert(sizeof(PlayerPawn_C_OnCameraZoomClient) == 0x000001, "Wrong size on PlayerPawn_C_OnCameraZoomClient");
static_assert(offsetof(PlayerPawn_C_OnCameraZoomClient, bZoomIn) == 0x000000, "Member 'PlayerPawn_C_OnCameraZoomClient::bZoomIn' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000004, "Wrong alignment on PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(sizeof(PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000008, "Wrong size on PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(offsetof(PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325, NotifyName) == 0x000000, "Member 'PlayerPawn_C_OnCompleted_1F40CC6D49EF4D93F75E2E94FCC7F325::NotifyName' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000004, "Wrong alignment on PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(sizeof(PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000008, "Wrong size on PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(offsetof(PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325, NotifyName) == 0x000000, "Member 'PlayerPawn_C_OnInterrupted_1F40CC6D49EF4D93F75E2E94FCC7F325::NotifyName' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000004, "Wrong alignment on PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(sizeof(PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000008, "Wrong size on PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(offsetof(PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325, NotifyName) == 0x000000, "Member 'PlayerPawn_C_OnNotifyBegin_1F40CC6D49EF4D93F75E2E94FCC7F325::NotifyName' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000004, "Wrong alignment on PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(sizeof(PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325) == 0x000008, "Wrong size on PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325");
static_assert(offsetof(PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325, NotifyName) == 0x000000, "Member 'PlayerPawn_C_OnNotifyEnd_1F40CC6D49EF4D93F75E2E94FCC7F325::NotifyName' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnReviveBP
// 0x0018 (0x0018 - 0x0000)
struct PlayerPawn_C_OnReviveBP final
{
public:
	class ABaseCharacter*                         Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         RevHealthPercent;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReviveManaPercent;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReviveStaminaPercent;                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnReviveBP) == 0x000008, "Wrong alignment on PlayerPawn_C_OnReviveBP");
static_assert(sizeof(PlayerPawn_C_OnReviveBP) == 0x000018, "Wrong size on PlayerPawn_C_OnReviveBP");
static_assert(offsetof(PlayerPawn_C_OnReviveBP, Target) == 0x000000, "Member 'PlayerPawn_C_OnReviveBP::Target' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_OnReviveBP, RevHealthPercent) == 0x000008, "Member 'PlayerPawn_C_OnReviveBP::RevHealthPercent' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_OnReviveBP, ReviveManaPercent) == 0x00000C, "Member 'PlayerPawn_C_OnReviveBP::ReviveManaPercent' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_OnReviveBP, ReviveStaminaPercent) == 0x000010, "Member 'PlayerPawn_C_OnReviveBP::ReviveStaminaPercent' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnSetLastDeathLocationBP
// 0x0018 (0x0018 - 0x0000)
struct PlayerPawn_C_OnSetLastDeathLocationBP final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnSetLastDeathLocationBP) == 0x000008, "Wrong alignment on PlayerPawn_C_OnSetLastDeathLocationBP");
static_assert(sizeof(PlayerPawn_C_OnSetLastDeathLocationBP) == 0x000018, "Wrong size on PlayerPawn_C_OnSetLastDeathLocationBP");
static_assert(offsetof(PlayerPawn_C_OnSetLastDeathLocationBP, Location) == 0x000000, "Member 'PlayerPawn_C_OnSetLastDeathLocationBP::Location' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnSuccessfulBlockServerBP
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnSuccessfulBlockServerBP final
{
public:
	class ABaseCharacter*                         Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnSuccessfulBlockServerBP) == 0x000008, "Wrong alignment on PlayerPawn_C_OnSuccessfulBlockServerBP");
static_assert(sizeof(PlayerPawn_C_OnSuccessfulBlockServerBP) == 0x000008, "Wrong size on PlayerPawn_C_OnSuccessfulBlockServerBP");
static_assert(offsetof(PlayerPawn_C_OnSuccessfulBlockServerBP, Attacker) == 0x000000, "Member 'PlayerPawn_C_OnSuccessfulBlockServerBP::Attacker' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnSuccessfulEvasionServerBP
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_OnSuccessfulEvasionServerBP final
{
public:
	class ABaseCharacter*                         Attacker;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnSuccessfulEvasionServerBP) == 0x000008, "Wrong alignment on PlayerPawn_C_OnSuccessfulEvasionServerBP");
static_assert(sizeof(PlayerPawn_C_OnSuccessfulEvasionServerBP) == 0x000008, "Wrong size on PlayerPawn_C_OnSuccessfulEvasionServerBP");
static_assert(offsetof(PlayerPawn_C_OnSuccessfulEvasionServerBP, Attacker) == 0x000000, "Member 'PlayerPawn_C_OnSuccessfulEvasionServerBP::Attacker' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.OnToggleGMTagBP
// 0x0001 (0x0001 - 0x0000)
struct PlayerPawn_C_OnToggleGMTagBP final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_OnToggleGMTagBP) == 0x000001, "Wrong alignment on PlayerPawn_C_OnToggleGMTagBP");
static_assert(sizeof(PlayerPawn_C_OnToggleGMTagBP) == 0x000001, "Wrong size on PlayerPawn_C_OnToggleGMTagBP");
static_assert(offsetof(PlayerPawn_C_OnToggleGMTagBP, bEnable) == 0x000000, "Member 'PlayerPawn_C_OnToggleGMTagBP::bEnable' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.PCFlag_Clear
// 0x000C (0x000C - 0x0000)
struct PlayerPawn_C_PCFlag_Clear final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_PCFlag_Clear) == 0x000004, "Wrong alignment on PlayerPawn_C_PCFlag_Clear");
static_assert(sizeof(PlayerPawn_C_PCFlag_Clear) == 0x00000C, "Wrong size on PlayerPawn_C_PCFlag_Clear");
static_assert(offsetof(PlayerPawn_C_PCFlag_Clear, FlagName) == 0x000000, "Member 'PlayerPawn_C_PCFlag_Clear::FlagName' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_PCFlag_Clear, Success) == 0x000008, "Member 'PlayerPawn_C_PCFlag_Clear::Success' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_PCFlag_Clear, K2Node_SwitchName_CmpSuccess) == 0x000009, "Member 'PlayerPawn_C_PCFlag_Clear::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.PCFlag_Set
// 0x000C (0x000C - 0x0000)
struct PlayerPawn_C_PCFlag_Set final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_PCFlag_Set) == 0x000004, "Wrong alignment on PlayerPawn_C_PCFlag_Set");
static_assert(sizeof(PlayerPawn_C_PCFlag_Set) == 0x00000C, "Wrong size on PlayerPawn_C_PCFlag_Set");
static_assert(offsetof(PlayerPawn_C_PCFlag_Set, FlagName) == 0x000000, "Member 'PlayerPawn_C_PCFlag_Set::FlagName' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_PCFlag_Set, Success) == 0x000008, "Member 'PlayerPawn_C_PCFlag_Set::Success' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_PCFlag_Set, K2Node_SwitchName_CmpSuccess) == 0x000009, "Member 'PlayerPawn_C_PCFlag_Set::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_ReceivePossessed) == 0x000008, "Wrong alignment on PlayerPawn_C_ReceivePossessed");
static_assert(sizeof(PlayerPawn_C_ReceivePossessed) == 0x000008, "Wrong size on PlayerPawn_C_ReceivePossessed");
static_assert(offsetof(PlayerPawn_C_ReceivePossessed, NewController) == 0x000000, "Member 'PlayerPawn_C_ReceivePossessed::NewController' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.Set Targeting Decal Distance
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_Set_Targeting_Decal_Distance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_Set_Targeting_Decal_Distance) == 0x000008, "Wrong alignment on PlayerPawn_C_Set_Targeting_Decal_Distance");
static_assert(sizeof(PlayerPawn_C_Set_Targeting_Decal_Distance) == 0x000008, "Wrong size on PlayerPawn_C_Set_Targeting_Decal_Distance");
static_assert(offsetof(PlayerPawn_C_Set_Targeting_Decal_Distance, Distance) == 0x000000, "Member 'PlayerPawn_C_Set_Targeting_Decal_Distance::Distance' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.SetTargetingMeshDistance
// 0x0008 (0x0008 - 0x0000)
struct PlayerPawn_C_SetTargetingMeshDistance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_SetTargetingMeshDistance) == 0x000008, "Wrong alignment on PlayerPawn_C_SetTargetingMeshDistance");
static_assert(sizeof(PlayerPawn_C_SetTargetingMeshDistance) == 0x000008, "Wrong size on PlayerPawn_C_SetTargetingMeshDistance");
static_assert(offsetof(PlayerPawn_C_SetTargetingMeshDistance, Distance) == 0x000000, "Member 'PlayerPawn_C_SetTargetingMeshDistance::Distance' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.SprintLogic
// 0x0080 (0x0080 - 0x0000)
struct PlayerPawn_C_SprintLogic final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintActive;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ParticleSpawnTransform;                            // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TickDeltaTime;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    LocalCameraBoom;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_SprintLogic) == 0x000010, "Wrong alignment on PlayerPawn_C_SprintLogic");
static_assert(sizeof(PlayerPawn_C_SprintLogic) == 0x000080, "Wrong size on PlayerPawn_C_SprintLogic");
static_assert(offsetof(PlayerPawn_C_SprintLogic, DeltaTime) == 0x000000, "Member 'PlayerPawn_C_SprintLogic::DeltaTime' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_SprintLogic, SprintActive) == 0x000008, "Member 'PlayerPawn_C_SprintLogic::SprintActive' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_SprintLogic, ParticleSpawnTransform) == 0x000010, "Member 'PlayerPawn_C_SprintLogic::ParticleSpawnTransform' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_SprintLogic, TickDeltaTime) == 0x000070, "Member 'PlayerPawn_C_SprintLogic::TickDeltaTime' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_SprintLogic, LocalCameraBoom) == 0x000078, "Member 'PlayerPawn_C_SprintLogic::LocalCameraBoom' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.StartCameraLag
// 0x0010 (0x0010 - 0x0000)
struct PlayerPawn_C_StartCameraLag final
{
public:
	double                                        CameraLagSpeed;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Falling;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dodging;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_StartCameraLag) == 0x000008, "Wrong alignment on PlayerPawn_C_StartCameraLag");
static_assert(sizeof(PlayerPawn_C_StartCameraLag) == 0x000010, "Wrong size on PlayerPawn_C_StartCameraLag");
static_assert(offsetof(PlayerPawn_C_StartCameraLag, CameraLagSpeed) == 0x000000, "Member 'PlayerPawn_C_StartCameraLag::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_StartCameraLag, Falling) == 0x000008, "Member 'PlayerPawn_C_StartCameraLag::Falling' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_StartCameraLag, Dodging) == 0x000009, "Member 'PlayerPawn_C_StartCameraLag::Dodging' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.StartCameraLagBP
// 0x0004 (0x0004 - 0x0000)
struct PlayerPawn_C_StartCameraLagBP final
{
public:
	float                                         CameraLagSpeed;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_StartCameraLagBP) == 0x000004, "Wrong alignment on PlayerPawn_C_StartCameraLagBP");
static_assert(sizeof(PlayerPawn_C_StartCameraLagBP) == 0x000004, "Wrong size on PlayerPawn_C_StartCameraLagBP");
static_assert(offsetof(PlayerPawn_C_StartCameraLagBP, CameraLagSpeed) == 0x000000, "Member 'PlayerPawn_C_StartCameraLagBP::CameraLagSpeed' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.StopCameraLag
// 0x0010 (0x0010 - 0x0000)
struct PlayerPawn_C_StopCameraLag final
{
public:
	bool                                          WasFalling;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dodging;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PreviousCameraLagValue;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_StopCameraLag) == 0x000008, "Wrong alignment on PlayerPawn_C_StopCameraLag");
static_assert(sizeof(PlayerPawn_C_StopCameraLag) == 0x000010, "Wrong size on PlayerPawn_C_StopCameraLag");
static_assert(offsetof(PlayerPawn_C_StopCameraLag, WasFalling) == 0x000000, "Member 'PlayerPawn_C_StopCameraLag::WasFalling' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_StopCameraLag, Dodging) == 0x000001, "Member 'PlayerPawn_C_StopCameraLag::Dodging' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_StopCameraLag, PreviousCameraLagValue) == 0x000008, "Member 'PlayerPawn_C_StopCameraLag::PreviousCameraLagValue' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.StopCameraLagBP
// 0x0004 (0x0004 - 0x0000)
struct PlayerPawn_C_StopCameraLagBP final
{
public:
	float                                         OldCameraLagSpeed;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_StopCameraLagBP) == 0x000004, "Wrong alignment on PlayerPawn_C_StopCameraLagBP");
static_assert(sizeof(PlayerPawn_C_StopCameraLagBP) == 0x000004, "Wrong size on PlayerPawn_C_StopCameraLagBP");
static_assert(offsetof(PlayerPawn_C_StopCameraLagBP, OldCameraLagSpeed) == 0x000000, "Member 'PlayerPawn_C_StopCameraLagBP::OldCameraLagSpeed' has a wrong offset!");

// Function PlayerPawn.PlayerPawn_C.UpdateQuestSidebar
// 0x0020 (0x0020 - 0x0000)
struct PlayerPawn_C_UpdateQuestSidebar final
{
public:
	class AController*                            LocalController;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AAoCPlayerController*                   CallFunc_GetActualController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAoCPlayerController*                   K2Node_DynamicCast_AsAo_CPlayer_Controller;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetQuestsDrawDirty_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PlayerPawn_C_UpdateQuestSidebar) == 0x000008, "Wrong alignment on PlayerPawn_C_UpdateQuestSidebar");
static_assert(sizeof(PlayerPawn_C_UpdateQuestSidebar) == 0x000020, "Wrong size on PlayerPawn_C_UpdateQuestSidebar");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, LocalController) == 0x000000, "Member 'PlayerPawn_C_UpdateQuestSidebar::LocalController' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, CallFunc_GetActualController_ReturnValue) == 0x000008, "Member 'PlayerPawn_C_UpdateQuestSidebar::CallFunc_GetActualController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, K2Node_DynamicCast_AsAo_CPlayer_Controller) == 0x000010, "Member 'PlayerPawn_C_UpdateQuestSidebar::K2Node_DynamicCast_AsAo_CPlayer_Controller' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'PlayerPawn_C_UpdateQuestSidebar::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'PlayerPawn_C_UpdateQuestSidebar::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, CallFunc_GetQuestsDrawDirty_ReturnValue) == 0x00001A, "Member 'PlayerPawn_C_UpdateQuestSidebar::CallFunc_GetQuestsDrawDirty_ReturnValue' has a wrong offset!");
static_assert(offsetof(PlayerPawn_C_UpdateQuestSidebar, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'PlayerPawn_C_UpdateQuestSidebar::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

