#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Backpedal

#include "Basic.hpp"

#include "STT_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DesignDataPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_Backpedal.STT_Backpedal_C
// 0x0178 (0x01F0 - 0x0078)
class USTT_Backpedal_C final : public USTT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAoCExpression                         Target_Expression;                                 // 0x0080(0x0050)(Edit, BlueprintVisible)
	class ABaseCharacter*                         Target;                                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FAoCExpression                         Speed_Multiplier;                                  // 0x00D8(0x0050)(Edit, BlueprintVisible)
	double                                        Deviation_Angle_Limit;                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAoCExpression                         Duration;                                          // 0x0130(0x0050)(Edit, BlueprintVisible)
	double                                        BlockFailureTime;                                  // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         Agent;                                             // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Multiplier_Value;                            // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OriginalSpeed;                                     // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVector;                                        // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustedMoveVector;                                // 0x01B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration_Value;                                    // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlockFailureTimer;                                 // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         Stored_Target;                                     // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AdjustDirectionByNav(const struct FVector& Original_Direction, double Length, struct FVector* AdjustedDirection, bool* Valid, struct FVector* ProjectedLocation);
	void ExecuteUbergraph_STT_Backpedal(int32 EntryPoint);
	void Get_Character_Closest_Nav_Location(class ABaseCharacter* Agent_0, struct FVector* Location);
	void GetAngleBetweenVectors(const struct FVector& v1, const struct FVector& v2, double* Angle);
	void ReceiveExitState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime);
	void RotateToTarget(const struct FVector& TargetVec, class AActor* Source, double YawDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_Backpedal_C">();
	}
	static class USTT_Backpedal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_Backpedal_C>();
	}
};
static_assert(alignof(USTT_Backpedal_C) == 0x000008, "Wrong alignment on USTT_Backpedal_C");
static_assert(sizeof(USTT_Backpedal_C) == 0x0001F0, "Wrong size on USTT_Backpedal_C");
static_assert(offsetof(USTT_Backpedal_C, UberGraphFrame) == 0x000078, "Member 'USTT_Backpedal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Target_Expression) == 0x000080, "Member 'USTT_Backpedal_C::Target_Expression' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Target) == 0x0000D0, "Member 'USTT_Backpedal_C::Target' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Speed_Multiplier) == 0x0000D8, "Member 'USTT_Backpedal_C::Speed_Multiplier' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Deviation_Angle_Limit) == 0x000128, "Member 'USTT_Backpedal_C::Deviation_Angle_Limit' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Duration) == 0x000130, "Member 'USTT_Backpedal_C::Duration' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, BlockFailureTime) == 0x000180, "Member 'USTT_Backpedal_C::BlockFailureTime' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Agent) == 0x000188, "Member 'USTT_Backpedal_C::Agent' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Speed_Multiplier_Value) == 0x000190, "Member 'USTT_Backpedal_C::Speed_Multiplier_Value' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, OriginalSpeed) == 0x000198, "Member 'USTT_Backpedal_C::OriginalSpeed' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, MoveVector) == 0x0001A0, "Member 'USTT_Backpedal_C::MoveVector' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, AdjustedMoveVector) == 0x0001B8, "Member 'USTT_Backpedal_C::AdjustedMoveVector' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Duration_Value) == 0x0001D0, "Member 'USTT_Backpedal_C::Duration_Value' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Timer) == 0x0001D8, "Member 'USTT_Backpedal_C::Timer' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, BlockFailureTimer) == 0x0001E0, "Member 'USTT_Backpedal_C::BlockFailureTimer' has a wrong offset!");
static_assert(offsetof(USTT_Backpedal_C, Stored_Target) == 0x0001E8, "Member 'USTT_Backpedal_C::Stored_Target' has a wrong offset!");

}

