#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABLScript_Ramekin_RuneofVigorReleaseCheck

#include "Basic.hpp"

#include "GameSystemsPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABLScript_Ramekin_RuneofVigorReleaseCheck.ABLScript_Ramekin_RuneofVigorReleaseCheck_C.RunScript
// 0x0858 (0x0858 - 0x0000)
struct ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript final
{
public:
	struct FScriptActorInfo                       Target;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	struct FScriptActorInfo                       Instigator;                                        // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	struct FScriptActorInfo                       Source;                                            // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference)
	struct FVector                                AttackOrigin;                                      // 0x0030(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScriptTriggerInfo                     TriggerInfo;                                       // 0x0048(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	int32                                         ReturnValue;                                       // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARamekin_Healer_C*                      Agent;                                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ARamekin_Healer_C*                      K2Node_DynamicCast_AsRamekin_Healer;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasHealingTarget_Valid;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FEffectRecord                          CallFunc_GetEffectRecordById_ReturnValue;          // 0x00A0(0x0788)(ConstParm)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValueAsInt_ReturnValue;                // 0x0830(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x0834(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x083C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83D[0x3];                                      // 0x083D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_2;            // 0x0840(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetValueAsInt_ReturnValue_1;              // 0x084C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript) == 0x000008, "Wrong alignment on ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript");
static_assert(sizeof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript) == 0x000858, "Wrong size on ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, Target) == 0x000000, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::Target' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, Instigator) == 0x000010, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::Instigator' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, Source) == 0x000020, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::Source' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, AttackOrigin) == 0x000030, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::AttackOrigin' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, TriggerInfo) == 0x000048, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::TriggerInfo' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, ReturnValue) == 0x000060, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, Agent) == 0x000068, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::Agent' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, K2Node_DynamicCast_AsRamekin_Healer) == 0x000070, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::K2Node_DynamicCast_AsRamekin_Healer' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_GetBlackboard_ReturnValue) == 0x000080, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_IsValid_ReturnValue) == 0x000088, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_HasHealingTarget_Valid) == 0x000089, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_HasHealingTarget_Valid' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_Not_PreBool_ReturnValue) == 0x00008A, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_Conv_BoolToString_ReturnValue) == 0x000090, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_GetEffectRecordById_ReturnValue) == 0x0000A0, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_GetEffectRecordById_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_MakeLiteralName_ReturnValue) == 0x000828, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_GetValueAsInt_ReturnValue) == 0x000830, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_GetValueAsInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_MakeLiteralName_ReturnValue_1) == 0x000834, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00083C, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_MakeLiteralName_ReturnValue_2) == 0x000840, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_MakeLiteralName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_BooleanOR_ReturnValue) == 0x000848, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_GetValueAsInt_ReturnValue_1) == 0x00084C, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_GetValueAsInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript, CallFunc_Add_IntInt_ReturnValue) == 0x000850, "Member 'ABLScript_Ramekin_RuneofVigorReleaseCheck_C_RunScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

