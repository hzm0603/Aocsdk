#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Wander

#include "Basic.hpp"

#include "STT_Wander_classes.hpp"
#include "STT_Wander_parameters.hpp"


namespace SDK
{

// Function STT_Wander.STT_Wander_C.CheckCVarEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void USTT_Wander_C::CheckCVarEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "CheckCVarEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function STT_Wander.STT_Wander_C.ExecuteUbergraph_STT_Wander
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::ExecuteUbergraph_STT_Wander(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "ExecuteUbergraph_STT_Wander");

	Params::STT_Wander_C_ExecuteUbergraph_STT_Wander Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Wander.STT_Wander_C.GetPotentialWanderTargets
// (Public, BlueprintCallable, BlueprintEvent)

void USTT_Wander_C::GetPotentialWanderTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "GetPotentialWanderTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function STT_Wander.STT_Wander_C.GetWanderTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   HasWanderTarget                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::GetWanderTarget(bool* HasWanderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "GetWanderTarget");

	Params::STT_Wander_C_GetWanderTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasWanderTarget != nullptr)
		*HasWanderTarget = Parms.HasWanderTarget;
}


// Function STT_Wander.STT_Wander_C.InAngleRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Loc                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::InAngleRange(const struct FVector& Loc, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "InAngleRange");

	Params::STT_Wander_C_InAngleRange Parms{};

	Parms.Loc = std::move(Loc);

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function STT_Wander.STT_Wander_C.IsPivotInLineOfSight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InLoc                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::IsPivotInLineOfSight(const struct FVector& InLoc, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "IsPivotInLineOfSight");

	Params::STT_Wander_C_IsPivotInLineOfSight Parms{};

	Parms.InLoc = std::move(InLoc);

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function STT_Wander.STT_Wander_C.IsValidWanderPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Loc                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         NavLoc                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::IsValidWanderPoint(const struct FVector& Loc, bool* Valid, struct FVector* NavLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "IsValidWanderPoint");

	Params::STT_Wander_C_IsValidWanderPoint Parms{};

	Parms.Loc = std::move(Loc);

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (NavLoc != nullptr)
		*NavLoc = std::move(Parms.NavLoc);
}


// Function STT_Wander.STT_Wander_C.ReceiveExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_Wander_C::ReceiveExitState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "ReceiveExitState");

	Params::STT_Wander_C_ReceiveExitState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Wander.STT_Wander_C.ReceiveLatentEnterState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_Wander_C::ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "ReceiveLatentEnterState");

	Params::STT_Wander_C_ReceiveLatentEnterState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Wander.STT_Wander_C.ReceiveLatentTick
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::ReceiveLatentTick(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "ReceiveLatentTick");

	Params::STT_Wander_C_ReceiveLatentTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Wander.STT_Wander_C.SimpleGetWanderTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Wander_C::SimpleGetWanderTarget(bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Wander_C", "SimpleGetWanderTarget");

	Params::STT_Wander_C_SimpleGetWanderTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}

}

