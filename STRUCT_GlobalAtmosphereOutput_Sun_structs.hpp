#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STRUCT_GlobalAtmosphereOutput_Sun

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// UserDefinedStruct STRUCT_GlobalAtmosphereOutput_Sun.STRUCT_GlobalAtmosphereOutput_Sun
// 0x0088 (0x0088 - 0x0000)
struct FSTRUCT_GlobalAtmosphereOutput_Sun final
{
public:
	double                                        SunIntensity_4_6F6B915842C1CBB13028DCBD307E9F37;   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunColor_29_5C63A4424DC686D3950409A4A512EF71;      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunSourceAngle_9_8672401542559E62E15947B3D37DACDF; // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunSoftSourceAngle_33_A56CDAE74014094917C2C6B7FCEC38E2; // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunTemperature_11_610A082D4D1996BE5C78A3A19FEBDCB0; // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunVolumetricScattering_13_D90F093847D2E141CC5E7B9701AA394E; // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunSpecularScale_15_29847E5B417DCBEC22E7E89FC3B839C5; // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLightShaftOcclusion_35_B54754614C74A6C216DEFBA7DE08E377; // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OcclusionDepthRange_38_C3C6A798449E7351C9D1F99E29F2AC3A; // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OcclusionMaskDarkness_40_B23040A74273DF0030A7E09DEDA262CD; // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLightShaftBloom_45_7F6CB814443439A1B2BB129639C00023; // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BloomScale_44_4E77ED06415055F9E1FFFEBD8C79836E;    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloomThreshold_54_72BF5D2643BD75FBFAE6228B7F2E7BDD; // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloomMaxBrightness_53_DB4AF2A543420633F1470087B603FD3D; // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BloomTint_55_E30B19BF4763B0C017E3E0A4647570F0;     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FSTRUCT_GlobalAtmosphereOutput_Sun) == 0x000008, "Wrong alignment on FSTRUCT_GlobalAtmosphereOutput_Sun");
static_assert(sizeof(FSTRUCT_GlobalAtmosphereOutput_Sun) == 0x000088, "Wrong size on FSTRUCT_GlobalAtmosphereOutput_Sun");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunIntensity_4_6F6B915842C1CBB13028DCBD307E9F37) == 0x000000, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunIntensity_4_6F6B915842C1CBB13028DCBD307E9F37' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunColor_29_5C63A4424DC686D3950409A4A512EF71) == 0x000008, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunColor_29_5C63A4424DC686D3950409A4A512EF71' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunSourceAngle_9_8672401542559E62E15947B3D37DACDF) == 0x000018, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunSourceAngle_9_8672401542559E62E15947B3D37DACDF' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunSoftSourceAngle_33_A56CDAE74014094917C2C6B7FCEC38E2) == 0x000020, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunSoftSourceAngle_33_A56CDAE74014094917C2C6B7FCEC38E2' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunTemperature_11_610A082D4D1996BE5C78A3A19FEBDCB0) == 0x000028, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunTemperature_11_610A082D4D1996BE5C78A3A19FEBDCB0' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunVolumetricScattering_13_D90F093847D2E141CC5E7B9701AA394E) == 0x000030, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunVolumetricScattering_13_D90F093847D2E141CC5E7B9701AA394E' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, SunSpecularScale_15_29847E5B417DCBEC22E7E89FC3B839C5) == 0x000038, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::SunSpecularScale_15_29847E5B417DCBEC22E7E89FC3B839C5' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, EnableLightShaftOcclusion_35_B54754614C74A6C216DEFBA7DE08E377) == 0x000040, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::EnableLightShaftOcclusion_35_B54754614C74A6C216DEFBA7DE08E377' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, OcclusionDepthRange_38_C3C6A798449E7351C9D1F99E29F2AC3A) == 0x000048, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::OcclusionDepthRange_38_C3C6A798449E7351C9D1F99E29F2AC3A' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, OcclusionMaskDarkness_40_B23040A74273DF0030A7E09DEDA262CD) == 0x000050, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::OcclusionMaskDarkness_40_B23040A74273DF0030A7E09DEDA262CD' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, EnableLightShaftBloom_45_7F6CB814443439A1B2BB129639C00023) == 0x000058, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::EnableLightShaftBloom_45_7F6CB814443439A1B2BB129639C00023' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, BloomScale_44_4E77ED06415055F9E1FFFEBD8C79836E) == 0x000060, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::BloomScale_44_4E77ED06415055F9E1FFFEBD8C79836E' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, BloomThreshold_54_72BF5D2643BD75FBFAE6228B7F2E7BDD) == 0x000068, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::BloomThreshold_54_72BF5D2643BD75FBFAE6228B7F2E7BDD' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, BloomMaxBrightness_53_DB4AF2A543420633F1470087B603FD3D) == 0x000070, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::BloomMaxBrightness_53_DB4AF2A543420633F1470087B603FD3D' has a wrong offset!");
static_assert(offsetof(FSTRUCT_GlobalAtmosphereOutput_Sun, BloomTint_55_E30B19BF4763B0C017E3E0A4647570F0) == 0x000078, "Member 'FSTRUCT_GlobalAtmosphereOutput_Sun::BloomTint_55_E30B19BF4763B0C017E3E0A4647570F0' has a wrong offset!");

}

