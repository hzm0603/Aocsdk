#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommissionBoard_NodeHunting

#include "Basic.hpp"

#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CommissionBoard_NodeHunting.CommissionBoard_NodeHunting_C
// 0x0038 (0x03E0 - 0x03A8)
class ACommissionBoard_NodeHunting_C final : public ACommissionBulletinBoard
{
public:
	class UMapRegistrationComponentBP_C*          MapRegistrationComponentBP;                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAoCNodePlotComponent*                  AoCNodePlot;                                       // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Board;                                             // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNameplateComponent*                    Nameplate;                                         // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractableComponent*                 Interactable;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_0;                                            // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CommissionBoard_NodeHunting_C">();
	}
	static class ACommissionBoard_NodeHunting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACommissionBoard_NodeHunting_C>();
	}
};
static_assert(alignof(ACommissionBoard_NodeHunting_C) == 0x000008, "Wrong alignment on ACommissionBoard_NodeHunting_C");
static_assert(sizeof(ACommissionBoard_NodeHunting_C) == 0x0003E0, "Wrong size on ACommissionBoard_NodeHunting_C");
static_assert(offsetof(ACommissionBoard_NodeHunting_C, MapRegistrationComponentBP) == 0x0003A8, "Member 'ACommissionBoard_NodeHunting_C::MapRegistrationComponentBP' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeHunting_C, AoCNodePlot) == 0x0003B0, "Member 'ACommissionBoard_NodeHunting_C::AoCNodePlot' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeHunting_C, Board) == 0x0003B8, "Member 'ACommissionBoard_NodeHunting_C::Board' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeHunting_C, Nameplate) == 0x0003C0, "Member 'ACommissionBoard_NodeHunting_C::Nameplate' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeHunting_C, Interactable) == 0x0003C8, "Member 'ACommissionBoard_NodeHunting_C::Interactable' has a wrong offset!");
static_assert(offsetof(ACommissionBoard_NodeHunting_C, Name_0) == 0x0003D0, "Member 'ACommissionBoard_NodeHunting_C::Name_0' has a wrong offset!");

}

