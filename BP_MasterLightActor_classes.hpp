#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterLightActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ENUM_SunPosition_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterLightActor.BP_MasterLightActor_C
// 0x0478 (0x07C0 - 0x0348)
class ABP_MasterLightActor_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Light_Transform;                                   // 0x0360(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Light_Fixture_Component;                           // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Light_Fixture_Mesh;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Support_Fixture_Component;                         // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Light_Fixture_Transform;                           // 0x03E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_Fixture_Cast_Shadow;                         // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Support_Fixture_Mesh;                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Support_Fixture_Transform;                         // 0x0450(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Point_Light;                                   // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point_Light_Intensity;                             // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Point_Light_Color;                                 // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Point_Use_Temperature;                             // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point_Temperature;                                 // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Point_Cast_Shadows;                                // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point_Attenuation_Radius;                          // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Source_Radius;                               // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Soft_Source_Radius;                          // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Source_Length;                               // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Volumetric_Scattering;                       // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Point_Contact_Shadow_Length_in_World_Space_Units;  // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point_Contact_Shadow_Length;                       // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Light_Falloff_Exponent;                      // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Point_Use_Inverse_Square_Falloff;                  // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Point_Contact_Shadow_Casting_Intensity;            // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    Spot_Light_Component;                              // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Spot_Light;                                    // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spot_Intensity;                                    // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Spot_Light_Color;                                  // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spot_Use_Temperature;                              // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spot_Temperature;                                  // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spot_Cast_Shadows;                                 // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spot_Attenuation_Radius;                           // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Inner_Cone_Angle;                             // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Outer_Cone_Angle;                             // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Source_Radius;                                // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Source_Length;                                // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Volumetric_Scattering;                        // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spot_Inverse_Square_Falloff;                       // 0x0544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spot_Light_Falloff_Exponent;                       // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Contact_Shadow_Length;                        // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spot_Contact_Shadow_Length_in_World_Space_Units;   // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spot_Contact_Shadow_Casting_Intensity;             // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              VFX_Components;                                    // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UNiagaraSystem*                         Niagra_VFX;                                        // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             VFX_Transform;                                     // 0x0570(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Scale;                                             // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Smoke_Spawn;                                       // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VFX_Color;                                         // 0x05E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VFX_Enclosed;                                      // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraSystem*>                 Socketed_VFX;                                      // 0x05F8(0x0010)(Edit, BlueprintVisible)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Emissive_Light_Transform;                          // 0x0610(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Sphere_Emissive;                               // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_671[0x3];                                      // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Spherical_Emissive_Color;                          // 0x0674(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Sphere_Emissive_Material;                          // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sphere_Emissive_DMI;                               // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Plane_Emissive;                                // 0x0698(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Plane_Emissive_Color;                              // 0x069C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Plane_Emissive_Transform;                          // 0x06B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Plane_Emissive_Material;                           // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Plane_Emissive_DMI;                                // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Point_Light_Component;                             // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TOD_Visability;                                    // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_VerraWorld_GlobalSky_C*             Verra_World_Global_Sky;                            // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Speed;                                  // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Alpha;                                  // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_Emissive_Component;                          // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Emissive_Component;                         // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Mesh_DMIs;                                         // 0x0758(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 Emissive_Strengths;                                // 0x0768(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTextureCube*                           Point_Light_Shadow_Texture;                        // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Soft_Shadow_Amount;                                // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soft_Shadow_Focus_Offset;                          // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_Flicker_Amount;                              // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Point_Light_Function_DMI;                          // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Max_Draw_Distance;                            // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spot_Max_Distance_Fade_Range;                      // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Max_Draw_Distance;                           // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Point_Max_Distance_Fade_Range;                     // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Event;                                          // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkSwitchValue*                         Ak_Switch;                                         // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Light_Components();
	void Add_Mesh();
	void Add_Plane_Emissive();
	void Add_Point();
	void Add_Sperical_Emissive();
	void Add_Spot();
	void Add_VFX_Components();
	void Add_VFX_Components_at_Sockets();
	void Editor_Time_Refresh();
	void ExecuteUbergraph_BP_MasterLightActor(int32 EntryPoint);
	void Get_Light_Socket_Transform();
	void Make_DMIs_from_Mesh_Materials();
	void OnConstruct();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void Resize_Socketed_VFX_Array();
	void Sound_Module();
	void Sun_Altitude_Phase_Changed();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterLightActor_C">();
	}
	static class ABP_MasterLightActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterLightActor_C>();
	}
};
static_assert(alignof(ABP_MasterLightActor_C) == 0x000010, "Wrong alignment on ABP_MasterLightActor_C");
static_assert(sizeof(ABP_MasterLightActor_C) == 0x0007C0, "Wrong size on ABP_MasterLightActor_C");
static_assert(offsetof(ABP_MasterLightActor_C, UberGraphFrame) == 0x000348, "Member 'ABP_MasterLightActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, DefaultSceneRoot) == 0x000350, "Member 'ABP_MasterLightActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Light_Transform) == 0x000360, "Member 'ABP_MasterLightActor_C::Light_Transform' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Light_Fixture_Component) == 0x0003C0, "Member 'ABP_MasterLightActor_C::Light_Fixture_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Light_Fixture_Mesh) == 0x0003C8, "Member 'ABP_MasterLightActor_C::Light_Fixture_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Support_Fixture_Component) == 0x0003D0, "Member 'ABP_MasterLightActor_C::Support_Fixture_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Light_Fixture_Transform) == 0x0003E0, "Member 'ABP_MasterLightActor_C::Light_Fixture_Transform' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Light_Fixture_Cast_Shadow) == 0x000440, "Member 'ABP_MasterLightActor_C::Light_Fixture_Cast_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Support_Fixture_Mesh) == 0x000448, "Member 'ABP_MasterLightActor_C::Support_Fixture_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Support_Fixture_Transform) == 0x000450, "Member 'ABP_MasterLightActor_C::Support_Fixture_Transform' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Use_Point_Light) == 0x0004B0, "Member 'ABP_MasterLightActor_C::Use_Point_Light' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Light_Intensity) == 0x0004B4, "Member 'ABP_MasterLightActor_C::Point_Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Light_Color) == 0x0004B8, "Member 'ABP_MasterLightActor_C::Point_Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Use_Temperature) == 0x0004C8, "Member 'ABP_MasterLightActor_C::Point_Use_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Temperature) == 0x0004CC, "Member 'ABP_MasterLightActor_C::Point_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Cast_Shadows) == 0x0004D0, "Member 'ABP_MasterLightActor_C::Point_Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Attenuation_Radius) == 0x0004D4, "Member 'ABP_MasterLightActor_C::Point_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Source_Radius) == 0x0004D8, "Member 'ABP_MasterLightActor_C::Point_Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Soft_Source_Radius) == 0x0004DC, "Member 'ABP_MasterLightActor_C::Point_Soft_Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Source_Length) == 0x0004E0, "Member 'ABP_MasterLightActor_C::Point_Source_Length' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Volumetric_Scattering) == 0x0004E4, "Member 'ABP_MasterLightActor_C::Point_Volumetric_Scattering' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Contact_Shadow_Length_in_World_Space_Units) == 0x0004E8, "Member 'ABP_MasterLightActor_C::Point_Contact_Shadow_Length_in_World_Space_Units' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Contact_Shadow_Length) == 0x0004EC, "Member 'ABP_MasterLightActor_C::Point_Contact_Shadow_Length' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Light_Falloff_Exponent) == 0x0004F0, "Member 'ABP_MasterLightActor_C::Point_Light_Falloff_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Use_Inverse_Square_Falloff) == 0x0004F4, "Member 'ABP_MasterLightActor_C::Point_Use_Inverse_Square_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Contact_Shadow_Casting_Intensity) == 0x0004F8, "Member 'ABP_MasterLightActor_C::Point_Contact_Shadow_Casting_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Light_Component) == 0x000500, "Member 'ABP_MasterLightActor_C::Spot_Light_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Use_Spot_Light) == 0x000508, "Member 'ABP_MasterLightActor_C::Use_Spot_Light' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Intensity) == 0x00050C, "Member 'ABP_MasterLightActor_C::Spot_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Light_Color) == 0x000510, "Member 'ABP_MasterLightActor_C::Spot_Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Use_Temperature) == 0x000520, "Member 'ABP_MasterLightActor_C::Spot_Use_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Temperature) == 0x000524, "Member 'ABP_MasterLightActor_C::Spot_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Cast_Shadows) == 0x000528, "Member 'ABP_MasterLightActor_C::Spot_Cast_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Attenuation_Radius) == 0x00052C, "Member 'ABP_MasterLightActor_C::Spot_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Inner_Cone_Angle) == 0x000530, "Member 'ABP_MasterLightActor_C::Spot_Inner_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Outer_Cone_Angle) == 0x000534, "Member 'ABP_MasterLightActor_C::Spot_Outer_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Source_Radius) == 0x000538, "Member 'ABP_MasterLightActor_C::Spot_Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Source_Length) == 0x00053C, "Member 'ABP_MasterLightActor_C::Spot_Source_Length' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Volumetric_Scattering) == 0x000540, "Member 'ABP_MasterLightActor_C::Spot_Volumetric_Scattering' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Inverse_Square_Falloff) == 0x000544, "Member 'ABP_MasterLightActor_C::Spot_Inverse_Square_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Light_Falloff_Exponent) == 0x000548, "Member 'ABP_MasterLightActor_C::Spot_Light_Falloff_Exponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Contact_Shadow_Length) == 0x00054C, "Member 'ABP_MasterLightActor_C::Spot_Contact_Shadow_Length' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Contact_Shadow_Length_in_World_Space_Units) == 0x000550, "Member 'ABP_MasterLightActor_C::Spot_Contact_Shadow_Length_in_World_Space_Units' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Contact_Shadow_Casting_Intensity) == 0x000554, "Member 'ABP_MasterLightActor_C::Spot_Contact_Shadow_Casting_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, VFX_Components) == 0x000558, "Member 'ABP_MasterLightActor_C::VFX_Components' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Niagra_VFX) == 0x000568, "Member 'ABP_MasterLightActor_C::Niagra_VFX' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, VFX_Transform) == 0x000570, "Member 'ABP_MasterLightActor_C::VFX_Transform' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Scale) == 0x0005D0, "Member 'ABP_MasterLightActor_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Smoke_Spawn) == 0x0005E0, "Member 'ABP_MasterLightActor_C::Smoke_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, VFX_Color) == 0x0005E4, "Member 'ABP_MasterLightActor_C::VFX_Color' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, VFX_Enclosed) == 0x0005F4, "Member 'ABP_MasterLightActor_C::VFX_Enclosed' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Socketed_VFX) == 0x0005F8, "Member 'ABP_MasterLightActor_C::Socketed_VFX' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Emissive_Light_Transform) == 0x000610, "Member 'ABP_MasterLightActor_C::Emissive_Light_Transform' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Use_Sphere_Emissive) == 0x000670, "Member 'ABP_MasterLightActor_C::Use_Sphere_Emissive' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spherical_Emissive_Color) == 0x000674, "Member 'ABP_MasterLightActor_C::Spherical_Emissive_Color' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Sphere_Emissive_Material) == 0x000688, "Member 'ABP_MasterLightActor_C::Sphere_Emissive_Material' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Sphere_Emissive_DMI) == 0x000690, "Member 'ABP_MasterLightActor_C::Sphere_Emissive_DMI' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Use_Plane_Emissive) == 0x000698, "Member 'ABP_MasterLightActor_C::Use_Plane_Emissive' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Plane_Emissive_Color) == 0x00069C, "Member 'ABP_MasterLightActor_C::Plane_Emissive_Color' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Plane_Emissive_Transform) == 0x0006B0, "Member 'ABP_MasterLightActor_C::Plane_Emissive_Transform' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Plane_Emissive_Material) == 0x000710, "Member 'ABP_MasterLightActor_C::Plane_Emissive_Material' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Plane_Emissive_DMI) == 0x000718, "Member 'ABP_MasterLightActor_C::Plane_Emissive_DMI' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Light_Component) == 0x000720, "Member 'ABP_MasterLightActor_C::Point_Light_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, TOD_Visability) == 0x000728, "Member 'ABP_MasterLightActor_C::TOD_Visability' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Verra_World_Global_Sky) == 0x000730, "Member 'ABP_MasterLightActor_C::Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Transition_Speed) == 0x000738, "Member 'ABP_MasterLightActor_C::Transition_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Transition_Alpha) == 0x000740, "Member 'ABP_MasterLightActor_C::Transition_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Plane_Emissive_Component) == 0x000748, "Member 'ABP_MasterLightActor_C::Plane_Emissive_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Sphere_Emissive_Component) == 0x000750, "Member 'ABP_MasterLightActor_C::Sphere_Emissive_Component' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Mesh_DMIs) == 0x000758, "Member 'ABP_MasterLightActor_C::Mesh_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Emissive_Strengths) == 0x000768, "Member 'ABP_MasterLightActor_C::Emissive_Strengths' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Light_Shadow_Texture) == 0x000778, "Member 'ABP_MasterLightActor_C::Point_Light_Shadow_Texture' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Soft_Shadow_Amount) == 0x000780, "Member 'ABP_MasterLightActor_C::Soft_Shadow_Amount' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Soft_Shadow_Focus_Offset) == 0x000788, "Member 'ABP_MasterLightActor_C::Soft_Shadow_Focus_Offset' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Light_Flicker_Amount) == 0x000790, "Member 'ABP_MasterLightActor_C::Light_Flicker_Amount' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Light_Function_DMI) == 0x000798, "Member 'ABP_MasterLightActor_C::Point_Light_Function_DMI' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Max_Draw_Distance) == 0x0007A0, "Member 'ABP_MasterLightActor_C::Spot_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Spot_Max_Distance_Fade_Range) == 0x0007A4, "Member 'ABP_MasterLightActor_C::Spot_Max_Distance_Fade_Range' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Max_Draw_Distance) == 0x0007A8, "Member 'ABP_MasterLightActor_C::Point_Max_Draw_Distance' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Point_Max_Distance_Fade_Range) == 0x0007AC, "Member 'ABP_MasterLightActor_C::Point_Max_Distance_Fade_Range' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Ak_Event) == 0x0007B0, "Member 'ABP_MasterLightActor_C::Ak_Event' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightActor_C, Ak_Switch) == 0x0007B8, "Member 'ABP_MasterLightActor_C::Ak_Switch' has a wrong offset!");

}

