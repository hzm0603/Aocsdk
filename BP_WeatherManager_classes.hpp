#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "STRUCT_SingularClimateData_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "E_Weather_FogCondition_structs.hpp"
#include "E_Weather_HumidityCondition_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Weather_SnowCondition_structs.hpp"
#include "E_Weather_RainCondition_structs.hpp"
#include "E_Weather_WindCondition_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherManager.BP_WeatherManager_C
// 0x0148 (0x0490 - 0x0348)
class ABP_WeatherManager_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Singular_Biome_Climate;                            // 0x0350(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Month;                                     // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Min_Temp;                                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Temp;                                          // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_Offset_Range;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Precip_Inches_Offset;                              // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sunshine_Hours_Offset;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Chance_of_Rain_Offset;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Fluctuation_Speed;                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temp;                                   // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wetness;                                           // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Biome_Data_Struct_Degrees_Day;                     // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Biome_Data_Struct_Sunshine_Hours;                  // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EBiomeType, struct FVector2D>            Biome_StartPeak;                                   // 0x03F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        FreezingPoint;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightnightThreshold;                               // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Raining;                                           // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_Rain;                                          // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snowing;                                           // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_Snow;                                          // 0x0453(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_RainCondition                       RainCondition;                                     // 0x0454(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_SnowCondition                       SnowCondition;                                     // 0x0455(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_WindCondition                       WindCondition;                                     // 0x0456(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_HumidityCondition                   HumidityCondition;                                 // 0x0457(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrecipTimer;                                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_FogCondition                        FogCondition;                                      // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Amount_Of_Precipitation;                           // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WetnessForTempCalc;                                // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetHumidity;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightningMOD;                                      // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempInF;                                           // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Absolute_Humidity(double Normalized_Temp_0, double Humidity, double* Dew_Pont);
	void Assign_Fog_Condition(double Fog_in, E_Weather_FogCondition* FogCondition_0);
	void Assign_Humidity_Condition(double Humidity, E_Weather_HumidityCondition* HumidityCondition_0);
	void Assign_Precipitation_Condition(double Precipitation, double Temperature, E_Weather_RainCondition* RainCondition_0, E_Weather_SnowCondition* SnowCondition_0);
	void Assign_Weather_Conditions(double Temperature, double Precipitation, double Humidity, double Fog, double Wind_Speed, E_Weather_RainCondition* RainCondition_0, E_Weather_SnowCondition* SnowCondition_0, E_Weather_WindCondition* WindCondition_0, E_Weather_HumidityCondition* HumidityCondition_0, E_Weather_FogCondition* FogCondition_0);
	void Assign_Wind_Condition(double WindSpeed, E_Weather_WindCondition* WindCondition_0);
	void Calculate_Dew_Point(double Normalized_Temp_0, double Current_Humidity, double Wetness_0, double* NormalizedDewPoint);
	double Calculate_Humidity(double Humidity, double In_Time_of_Year_in_hours, double Wetness_0, double Normalized_Temp_0, double* RetHumidity_0);
	void Calculate_Precipitation(EBiomeType Current_Biome, double Chance_Of_Precipitation, double In_TOY_in_hours, double In_Precip_Amount, double* Amount_Of_Precipitation_0);
	void Calculate_Saturation_Point(double Temp);
	void Calculate_Temperature(double Time_Of_Day_2400, EBiomeType Current_Biome, double Degrees_Low, double Degrees_High, double Normalized_Altitude, double In_Time_of_Year_in_hours, double AmountPrecip, double DeltaT, double* Current_Temp, double* Modified_Normalized_Temp, double* NonModified_Normalized_Temp);
	void Calculate_Weather(const struct FSingleDayClimate& In_Climate, double Time_Of_Day_2400, double In_Time_of_Year_in_hours, EBiomeType Current_Biome, bool bOverrideTemp, bool bOverridePrecip, bool bOverrideHumidity, bool bOverrideFog, double Local_FogIn, double Delta_Seconds, double* Normalized_Temp_Return, double* Amount_of_Precip_Return, double* Humidity_Return, double* Normalized_DewPoint_Return, double* Wetness_Return, double* Local_Fog_Return, double* Cloud_Lerp_Return);
	void Calculate_Wetness(double Precipitation, double Normalized_Temp_0, double Wetness_0, double* WetnessRet);
	void CalculateCloudLerp(double Humidity, double Normalized_Precip, int32 Sunshine_Hours, double* Cloud_Lerp);
	void CalculateLocalFog(double Normalized_DewPoint, double Normalized_Temperature, double* Local_Fog);
	void CalculateShouldLighting(bool* CouldLightning);
	double GaussianCurve(const struct FVector2D& Start_Peak, double Time);
	void Get_0_1_TimeOfDay_Normalized(double Value, double* Zero_1_Time_of_Day_Normalized);
	void GetBiomeNormalizedPrecipAmount(EBiomeType Current_Biome, double In_Precip, double* Normalized_Precip_Amount_For_Biome);
	void Random_Weather_Flucuations(double In_Float, double In_Time_of_Year_in_hours, double* Post_Noise);
	double S_Curve_For_Temp(const struct FVector2D& Start_Peak, double Time);
	void Set_Days_Climate_Data(const struct FStruct_BiomeClimate& Biome_Data_Struct, double* Min, double* Max, struct FSTRUCT_SingularClimateData* StructOut);
	void UpdateMPC();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherManager_C">();
	}
	static class ABP_WeatherManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherManager_C>();
	}
};
static_assert(alignof(ABP_WeatherManager_C) == 0x000008, "Wrong alignment on ABP_WeatherManager_C");
static_assert(sizeof(ABP_WeatherManager_C) == 0x000490, "Wrong size on ABP_WeatherManager_C");
static_assert(offsetof(ABP_WeatherManager_C, DefaultSceneRoot) == 0x000348, "Member 'ABP_WeatherManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Singular_Biome_Climate) == 0x000350, "Member 'ABP_WeatherManager_C::Singular_Biome_Climate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Month) == 0x000380, "Member 'ABP_WeatherManager_C::Current_Month' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Min_Temp) == 0x000388, "Member 'ABP_WeatherManager_C::Min_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Max_Temp) == 0x000390, "Member 'ABP_WeatherManager_C::Max_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Temp_Offset_Range) == 0x000398, "Member 'ABP_WeatherManager_C::Temp_Offset_Range' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Precip_Inches_Offset) == 0x0003A0, "Member 'ABP_WeatherManager_C::Precip_Inches_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Sunshine_Hours_Offset) == 0x0003A8, "Member 'ABP_WeatherManager_C::Sunshine_Hours_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Chance_of_Rain_Offset) == 0x0003B0, "Member 'ABP_WeatherManager_C::Chance_of_Rain_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Weather_Fluctuation_Speed) == 0x0003B8, "Member 'ABP_WeatherManager_C::Weather_Fluctuation_Speed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Normalized_Temp) == 0x0003C0, "Member 'ABP_WeatherManager_C::Normalized_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness) == 0x0003C8, "Member 'ABP_WeatherManager_C::Wetness' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Biome_Data_Struct_Degrees_Day) == 0x0003D0, "Member 'ABP_WeatherManager_C::Biome_Data_Struct_Degrees_Day' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Biome_Data_Struct_Sunshine_Hours) == 0x0003E0, "Member 'ABP_WeatherManager_C::Biome_Data_Struct_Sunshine_Hours' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Biome_StartPeak) == 0x0003F0, "Member 'ABP_WeatherManager_C::Biome_StartPeak' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, FreezingPoint) == 0x000440, "Member 'ABP_WeatherManager_C::FreezingPoint' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LightnightThreshold) == 0x000448, "Member 'ABP_WeatherManager_C::LightnightThreshold' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Raining) == 0x000450, "Member 'ABP_WeatherManager_C::Raining' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Did_Rain) == 0x000451, "Member 'ABP_WeatherManager_C::Did_Rain' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Snowing) == 0x000452, "Member 'ABP_WeatherManager_C::Snowing' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Did_Snow) == 0x000453, "Member 'ABP_WeatherManager_C::Did_Snow' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RainCondition) == 0x000454, "Member 'ABP_WeatherManager_C::RainCondition' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, SnowCondition) == 0x000455, "Member 'ABP_WeatherManager_C::SnowCondition' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, WindCondition) == 0x000456, "Member 'ABP_WeatherManager_C::WindCondition' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, HumidityCondition) == 0x000457, "Member 'ABP_WeatherManager_C::HumidityCondition' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, PrecipTimer) == 0x000458, "Member 'ABP_WeatherManager_C::PrecipTimer' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, FogCondition) == 0x000460, "Member 'ABP_WeatherManager_C::FogCondition' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Amount_Of_Precipitation) == 0x000468, "Member 'ABP_WeatherManager_C::Amount_Of_Precipitation' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, WetnessForTempCalc) == 0x000470, "Member 'ABP_WeatherManager_C::WetnessForTempCalc' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RetHumidity) == 0x000478, "Member 'ABP_WeatherManager_C::RetHumidity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LightningMOD) == 0x000480, "Member 'ABP_WeatherManager_C::LightningMOD' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, TempInF) == 0x000488, "Member 'ABP_WeatherManager_C::TempInF' has a wrong offset!");

}

