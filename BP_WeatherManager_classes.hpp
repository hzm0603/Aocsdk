#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "Struct_BiomeClimate_structs.hpp"
#include "STRUCT_SingularClimateData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_WeatherType_structs.hpp"
#include "STRUCT_CloudParameters_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherManager.BP_WeatherManager_C
// 0x0448 (0x0790 - 0x0348)
class ABP_WeatherManager_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             BiomeClimateData;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Row_Name;                                          // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Row_Name_0;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_BiomeClimate                   Biome_Data_Struct;                                 // 0x0368(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Singular_Biome_Climate;                            // 0x03D8(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Weather_Occur;                              // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_Precipitate;                                // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40A[0x6];                                      // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Temp;                                      // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Month;                                     // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Min_Temp;                                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Temp;                                          // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomStream;                                      // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	double                                        Temp_Offset_Range;                                 // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Precip_Inches_Offset;                              // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sunshine_Hours_Offset;                             // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Chance_of_Rain_Offset;                             // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Chance_Of_Rain;                                    // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Precipitation;                                     // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Weather_Decision_Made;                             // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_WeatherType, class UBPDA_CloudPreset_C*> WeatherPresets;                                    // 0x0470(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           Weather_Conditions;                                // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Current_Weather_Condition;                         // 0x04D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture2D*                             WeatherMapTexture;                                 // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UBPDA_CloudPreset_C*>            CloudTypeArray;                                    // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBPDA_CloudPreset_C*                    CloudA;                                            // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBPDA_CloudPreset_C*                    CloudB;                                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBPDA_CloudPreset_C*                    CloudFinalOutput;                                  // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CloudParameters                Cloud_Struct;                                      // 0x0518(0x0190)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Weather_Noise_Influence;                    // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Fluctuation_Speed;                         // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cloud_Vis;                                         // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B9[0x7];                                      // 0x06B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSTRUCT_CloudParameters> CloudPack;                                         // 0x06C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBPDA_CloudPreset_C*                    Target;                                            // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Dew_Point;                                         // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temp;                                   // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wetness;                                           // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_DewPoint;                               // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocalFog;                                          // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerraGlobalSkyCloudScenario*           CloudTestA;                                        // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVerraGlobalSkyCloudScenario*           CloudTestB;                                        // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Biome_Data_Struct_Degrees_Day;                     // 0x0750(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Biome_Data_Struct_Sunshine_Hours;                  // 0x0760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UVerraGlobalSkyCloudScenario*           CloudTestC;                                        // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVerraGlobalSkyCloudScenario*           CloudTestD;                                        // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVerraGlobalSkyCloudScenario*           CloudTestE;                                        // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVerraGlobalSkyCloudScenario*           CloudTestF;                                        // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Global_Noise_To_Climate(const struct FSingleDayClimate& Singular_Day_Climate, double TOD_for_Curves, double In_TOY_in_hours, double* Current_Temp_0, double* Amount_of_Precipitation, double* Current_Humidity);
	void Calculate_Dew_Point(double Current_Temp_0, double Current_Humidity, double* DewPoint);
	double Calculate_Weness(double Precipitation_0);
	void Cloud_DA_to_Struct(class UBPDA_CloudPreset_C* Cloud_DA_in, struct FSTRUCT_CloudParameters* StructOut);
	struct FVerraGlobalSkyVolumetricCloudSettings Cloud_Logic(double Humidity, double Chance_Of_Precipitation, double* DEBUG_Alpha_for_Blend, bool* Cloud_Vis_0, struct FSTRUCT_CloudParameters* StructOut);
	int32 Determine_Month(double In_Year);
	void LERP_Clouds(class UBPDA_CloudPreset_C* Clouds_1, class UBPDA_CloudPreset_C* Clouds_2, double ALPHA, class UBPDA_CloudPreset_C* Cloud_Blend, const struct FSTRUCT_CloudParameters& Cloud_Struct_IN, bool because_im_lazy_and_i_said_so, class UBPDA_CloudPreset_C** OutputPin, struct FSTRUCT_CloudParameters* Cloud_Struct_0);
	void LERP_Clouds2(double ALPHA, const TMap<class FString, struct FSTRUCT_CloudParameters>& CloudPack_0, int32 Cloud_A_Index, int32 Cloud_B_Index, bool Use_Previous_Struct, const struct FSTRUCT_CloudParameters& Previous_Cloud_Blend, struct FSTRUCT_CloudParameters* StructOut);
	void NatrualLog(double Target_Number);
	void Precip_Logic(const struct FSTRUCT_SingularClimateData& Singular_Biome_Climate_0, double Current_Temp_0, double Current_AMOUNT_of_Precip, double Current_Humidity, class UBPDA_CloudPreset_C** Value, struct FSTRUCT_SingularClimateData* Singular_Biome_Climate1, class FText* Output_Get, bool* Should_Precipitate_0);
	void Random_Chance_Of_Precip(double In_Float, double In_TOY_in_hours, double* Post_Noise);
	void Reset_Temp_Test();
	TMap<class FName, float> Run_Weather_BP_Functions(const struct FSingleDayClimate& Singular_Day_Climate, double TOD_for_Curves, double In_TOY_in_hours, bool OverridePrecip, bool OverrideHumidity, double* NormalizePrecipitation, double* NormalizedTemperature, double* Humidity, double* DewPoint, double* DEBUG_CurrentTemp, double* DEBUG_Precipitation_Amount, double* DEBUG_CurrentHumidity, bool* Cloud_Vis_0, struct FSTRUCT_CloudParameters* StructOut, struct FVerraGlobalSkyVolumetricCloudSettings* CloudScenarioStructOut);
	void Select_Cloud_Set();
	void Set_Days_Climate_Data(const struct FStruct_BiomeClimate& Biome_Data_Struct_0, double* Min, double* Max, struct FSTRUCT_SingularClimateData* StructOut);
	void UserConstructionScript();
	void WeatherOffsetMap();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherManager_C">();
	}
	static class ABP_WeatherManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherManager_C>();
	}
};
static_assert(alignof(ABP_WeatherManager_C) == 0x000008, "Wrong alignment on ABP_WeatherManager_C");
static_assert(sizeof(ABP_WeatherManager_C) == 0x000790, "Wrong size on ABP_WeatherManager_C");
static_assert(offsetof(ABP_WeatherManager_C, DefaultSceneRoot) == 0x000348, "Member 'ABP_WeatherManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, BiomeClimateData) == 0x000350, "Member 'ABP_WeatherManager_C::BiomeClimateData' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Row_Name) == 0x000358, "Member 'ABP_WeatherManager_C::Row_Name' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Row_Name_0) == 0x000360, "Member 'ABP_WeatherManager_C::Row_Name_0' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Biome_Data_Struct) == 0x000368, "Member 'ABP_WeatherManager_C::Biome_Data_Struct' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Singular_Biome_Climate) == 0x0003D8, "Member 'ABP_WeatherManager_C::Singular_Biome_Climate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Should_Weather_Occur) == 0x000408, "Member 'ABP_WeatherManager_C::Should_Weather_Occur' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Should_Precipitate) == 0x000409, "Member 'ABP_WeatherManager_C::Should_Precipitate' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Temp) == 0x000410, "Member 'ABP_WeatherManager_C::Current_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Month) == 0x000418, "Member 'ABP_WeatherManager_C::Current_Month' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Min_Temp) == 0x000420, "Member 'ABP_WeatherManager_C::Min_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Max_Temp) == 0x000428, "Member 'ABP_WeatherManager_C::Max_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, RandomStream) == 0x000430, "Member 'ABP_WeatherManager_C::RandomStream' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Temp_Offset_Range) == 0x000438, "Member 'ABP_WeatherManager_C::Temp_Offset_Range' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Precip_Inches_Offset) == 0x000440, "Member 'ABP_WeatherManager_C::Precip_Inches_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Sunshine_Hours_Offset) == 0x000448, "Member 'ABP_WeatherManager_C::Sunshine_Hours_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Chance_of_Rain_Offset) == 0x000450, "Member 'ABP_WeatherManager_C::Chance_of_Rain_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Chance_Of_Rain) == 0x000458, "Member 'ABP_WeatherManager_C::Chance_Of_Rain' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Precipitation) == 0x000460, "Member 'ABP_WeatherManager_C::Precipitation' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Weather_Decision_Made) == 0x000468, "Member 'ABP_WeatherManager_C::Weather_Decision_Made' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, WeatherPresets) == 0x000470, "Member 'ABP_WeatherManager_C::WeatherPresets' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Weather_Conditions) == 0x0004C0, "Member 'ABP_WeatherManager_C::Weather_Conditions' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Current_Weather_Condition) == 0x0004D0, "Member 'ABP_WeatherManager_C::Current_Weather_Condition' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, WeatherMapTexture) == 0x0004E8, "Member 'ABP_WeatherManager_C::WeatherMapTexture' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTypeArray) == 0x0004F0, "Member 'ABP_WeatherManager_C::CloudTypeArray' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudA) == 0x000500, "Member 'ABP_WeatherManager_C::CloudA' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudB) == 0x000508, "Member 'ABP_WeatherManager_C::CloudB' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudFinalOutput) == 0x000510, "Member 'ABP_WeatherManager_C::CloudFinalOutput' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Cloud_Struct) == 0x000518, "Member 'ABP_WeatherManager_C::Cloud_Struct' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Random_Weather_Noise_Influence) == 0x0006A8, "Member 'ABP_WeatherManager_C::Random_Weather_Noise_Influence' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Weather_Fluctuation_Speed) == 0x0006B0, "Member 'ABP_WeatherManager_C::Weather_Fluctuation_Speed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Cloud_Vis) == 0x0006B8, "Member 'ABP_WeatherManager_C::Cloud_Vis' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudPack) == 0x0006C0, "Member 'ABP_WeatherManager_C::CloudPack' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Target) == 0x000710, "Member 'ABP_WeatherManager_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Dew_Point) == 0x000718, "Member 'ABP_WeatherManager_C::Dew_Point' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Normalized_Temp) == 0x000720, "Member 'ABP_WeatherManager_C::Normalized_Temp' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Wetness) == 0x000728, "Member 'ABP_WeatherManager_C::Wetness' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Normalized_DewPoint) == 0x000730, "Member 'ABP_WeatherManager_C::Normalized_DewPoint' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, LocalFog) == 0x000738, "Member 'ABP_WeatherManager_C::LocalFog' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTestA) == 0x000740, "Member 'ABP_WeatherManager_C::CloudTestA' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTestB) == 0x000748, "Member 'ABP_WeatherManager_C::CloudTestB' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Biome_Data_Struct_Degrees_Day) == 0x000750, "Member 'ABP_WeatherManager_C::Biome_Data_Struct_Degrees_Day' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, Biome_Data_Struct_Sunshine_Hours) == 0x000760, "Member 'ABP_WeatherManager_C::Biome_Data_Struct_Sunshine_Hours' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTestC) == 0x000770, "Member 'ABP_WeatherManager_C::CloudTestC' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTestD) == 0x000778, "Member 'ABP_WeatherManager_C::CloudTestD' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTestE) == 0x000780, "Member 'ABP_WeatherManager_C::CloudTestE' has a wrong offset!");
static_assert(offsetof(ABP_WeatherManager_C, CloudTestF) == 0x000788, "Member 'ABP_WeatherManager_C::CloudTestF' has a wrong offset!");

}

