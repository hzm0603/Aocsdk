#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Accumulator

#include "Basic.hpp"

#include "GameSystemsPlugin_structs.hpp"
#include "StateTreeModule_structs.hpp"


namespace SDK::Params
{

// Function STT_Accumulator.STT_Accumulator_C.SetTargetValue
// 0x00D0 (0x00D0 - 0x0000)
struct STT_Accumulator_C_SetTargetValue final
{
public:
	struct FExprValue                             CallFunc_EvaluateExpression_ReturnValue;           // 0x0000(0x00C8)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Accumulator_C_SetTargetValue) == 0x000008, "Wrong alignment on STT_Accumulator_C_SetTargetValue");
static_assert(sizeof(STT_Accumulator_C_SetTargetValue) == 0x0000D0, "Wrong size on STT_Accumulator_C_SetTargetValue");
static_assert(offsetof(STT_Accumulator_C_SetTargetValue, CallFunc_EvaluateExpression_ReturnValue) == 0x000000, "Member 'STT_Accumulator_C_SetTargetValue::CallFunc_EvaluateExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_SetTargetValue, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C8, "Member 'STT_Accumulator_C_SetTargetValue::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function STT_Accumulator.STT_Accumulator_C.Reset
// 0x0008 (0x0008 - 0x0000)
struct STT_Accumulator_C_Reset final
{
public:
	class FName                                   Identifier_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Accumulator_C_Reset) == 0x000004, "Wrong alignment on STT_Accumulator_C_Reset");
static_assert(sizeof(STT_Accumulator_C_Reset) == 0x000008, "Wrong size on STT_Accumulator_C_Reset");
static_assert(offsetof(STT_Accumulator_C_Reset, Identifier_0) == 0x000000, "Member 'STT_Accumulator_C_Reset::Identifier_0' has a wrong offset!");

// Function STT_Accumulator.STT_Accumulator_C.ReceiveLatentTick
// 0x0004 (0x0004 - 0x0000)
struct STT_Accumulator_C_ReceiveLatentTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Accumulator_C_ReceiveLatentTick) == 0x000004, "Wrong alignment on STT_Accumulator_C_ReceiveLatentTick");
static_assert(sizeof(STT_Accumulator_C_ReceiveLatentTick) == 0x000004, "Wrong size on STT_Accumulator_C_ReceiveLatentTick");
static_assert(offsetof(STT_Accumulator_C_ReceiveLatentTick, DeltaTime) == 0x000000, "Member 'STT_Accumulator_C_ReceiveLatentTick::DeltaTime' has a wrong offset!");

// Function STT_Accumulator.STT_Accumulator_C.ReceiveLatentEnterState
// 0x002E (0x002E - 0x0000)
struct STT_Accumulator_C_ReceiveLatentEnterState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_Accumulator_C_ReceiveLatentEnterState) == 0x000002, "Wrong alignment on STT_Accumulator_C_ReceiveLatentEnterState");
static_assert(sizeof(STT_Accumulator_C_ReceiveLatentEnterState) == 0x00002E, "Wrong size on STT_Accumulator_C_ReceiveLatentEnterState");
static_assert(offsetof(STT_Accumulator_C_ReceiveLatentEnterState, Transition) == 0x000000, "Member 'STT_Accumulator_C_ReceiveLatentEnterState::Transition' has a wrong offset!");

// Function STT_Accumulator.STT_Accumulator_C.ReceiveExitState
// 0x002E (0x002E - 0x0000)
struct STT_Accumulator_C_ReceiveExitState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_Accumulator_C_ReceiveExitState) == 0x000002, "Wrong alignment on STT_Accumulator_C_ReceiveExitState");
static_assert(sizeof(STT_Accumulator_C_ReceiveExitState) == 0x00002E, "Wrong size on STT_Accumulator_C_ReceiveExitState");
static_assert(offsetof(STT_Accumulator_C_ReceiveExitState, Transition) == 0x000000, "Member 'STT_Accumulator_C_ReceiveExitState::Transition' has a wrong offset!");

// Function STT_Accumulator.STT_Accumulator_C.ExecuteUbergraph_STT_Accumulator
// 0x0090 (0x0090 - 0x0000)
struct STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName Identifier)>       UniqueObjectNameForCooking_OutputDelegate;         // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FStateTreeTransitionResult             K2Node_Event_Transition_1;                         // 0x0014(0x002E)(ConstParm, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_Identifier;                     // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTime;                            // 0x0050(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStateTreeTransitionResult             K2Node_Event_Transition;                           // 0x0054(0x002E)(ConstParm, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Accumulate_DeltaTime_ImplicitCast;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator) == 0x000008, "Wrong alignment on STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator");
static_assert(sizeof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator) == 0x000090, "Wrong size on STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, EntryPoint) == 0x000000, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::EntryPoint' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, UniqueObjectNameForCooking_OutputDelegate) == 0x000004, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::UniqueObjectNameForCooking_OutputDelegate' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, K2Node_Event_Transition_1) == 0x000014, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::K2Node_Event_Transition_1' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, K2Node_CustomEvent_Identifier) == 0x000044, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::K2Node_CustomEvent_Identifier' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00004C, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, K2Node_Event_DeltaTime) == 0x000050, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, K2Node_Event_Transition) == 0x000054, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::K2Node_Event_Transition' has a wrong offset!");
static_assert(offsetof(STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator, CallFunc_Accumulate_DeltaTime_ImplicitCast) == 0x000088, "Member 'STT_Accumulator_C_ExecuteUbergraph_STT_Accumulator::CallFunc_Accumulate_DeltaTime_ImplicitCast' has a wrong offset!");

// Function STT_Accumulator.STT_Accumulator_C.Accumulate
// 0x0008 (0x0008 - 0x0000)
struct STT_Accumulator_C_Accumulate final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_Accumulator_C_Accumulate) == 0x000008, "Wrong alignment on STT_Accumulator_C_Accumulate");
static_assert(sizeof(STT_Accumulator_C_Accumulate) == 0x000008, "Wrong size on STT_Accumulator_C_Accumulate");
static_assert(offsetof(STT_Accumulator_C_Accumulate, DeltaTime) == 0x000000, "Member 'STT_Accumulator_C_Accumulate::DeltaTime' has a wrong offset!");

}

