#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateTreeModule

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "StateTreeModule_structs.hpp"
#include "StructUtils_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class StateTreeModule.StateTreeSettings
// 0x0008 (0x0060 - 0x0058)
class UStateTreeSettings final : public UDeveloperSettings
{
public:
	bool                                          bAutoStartDebuggerTracesOnNonEditorTargets;        // 0x0058(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeSettings">();
	}
	static class UStateTreeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeSettings>();
	}
};
static_assert(alignof(UStateTreeSettings) == 0x000008, "Wrong alignment on UStateTreeSettings");
static_assert(sizeof(UStateTreeSettings) == 0x000060, "Wrong size on UStateTreeSettings");
static_assert(offsetof(UStateTreeSettings, bAutoStartDebuggerTracesOnNonEditorTargets) == 0x000058, "Member 'UStateTreeSettings::bAutoStartDebuggerTracesOnNonEditorTargets' has a wrong offset!");

// Class StateTreeModule.StateTreeNodeBlueprintBase
// 0x0018 (0x0060 - 0x0048)
class UStateTreeNodeBlueprintBase : public UObject
{
public:
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CachedOwner;                                       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void RequestTransition(const struct FStateTreeStateLink& TargetState, const EStateTreeTransitionPriority Priority);
	void SendEvent(const struct FStateTreeEvent& Event);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeNodeBlueprintBase">();
	}
	static class UStateTreeNodeBlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeNodeBlueprintBase>();
	}
};
static_assert(alignof(UStateTreeNodeBlueprintBase) == 0x000008, "Wrong alignment on UStateTreeNodeBlueprintBase");
static_assert(sizeof(UStateTreeNodeBlueprintBase) == 0x000060, "Wrong size on UStateTreeNodeBlueprintBase");
static_assert(offsetof(UStateTreeNodeBlueprintBase, CachedOwner) == 0x000058, "Member 'UStateTreeNodeBlueprintBase::CachedOwner' has a wrong offset!");

// Class StateTreeModule.StateTreeConditionBlueprintBase
// 0x0008 (0x0068 - 0x0060)
class UStateTreeConditionBlueprintBase : public UStateTreeNodeBlueprintBase
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ReceiveTestCondition() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeConditionBlueprintBase">();
	}
	static class UStateTreeConditionBlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeConditionBlueprintBase>();
	}
};
static_assert(alignof(UStateTreeConditionBlueprintBase) == 0x000008, "Wrong alignment on UStateTreeConditionBlueprintBase");
static_assert(sizeof(UStateTreeConditionBlueprintBase) == 0x000068, "Wrong size on UStateTreeConditionBlueprintBase");

// Class StateTreeModule.StateTreeEvaluatorBlueprintBase
// 0x0008 (0x0068 - 0x0060)
class UStateTreeEvaluatorBlueprintBase : public UStateTreeNodeBlueprintBase
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReceiveTick(const float DeltaTime);
	void ReceiveTreeStart();
	void ReceiveTreeStop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeEvaluatorBlueprintBase">();
	}
	static class UStateTreeEvaluatorBlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeEvaluatorBlueprintBase>();
	}
};
static_assert(alignof(UStateTreeEvaluatorBlueprintBase) == 0x000008, "Wrong alignment on UStateTreeEvaluatorBlueprintBase");
static_assert(sizeof(UStateTreeEvaluatorBlueprintBase) == 0x000068, "Wrong size on UStateTreeEvaluatorBlueprintBase");

// Class StateTreeModule.StateTreeTaskBlueprintBase
// 0x0010 (0x0070 - 0x0060)
class UStateTreeTaskBlueprintBase : public UStateTreeNodeBlueprintBase
{
public:
	int32                                         StateIndex;                                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeIndex;                                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x1];                                       // 0x0068(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bShouldStateChangeOnReselect : 1;                  // 0x0069(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_69_1 : 1;                                   // 0x0069(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bShouldCallTickOnlyOnEvents : 1;                   // 0x0069(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldCopyBoundPropertiesOnTick : 1;              // 0x0069(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldCopyBoundPropertiesOnExitState : 1;         // 0x0069(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishTask(const bool bSucceeded);
	void OnTaskPooled();
	EStateTreeRunStatus ReceiveEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveExitState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime);
	void ReceiveStateCompleted(const EStateTreeRunStatus CompletionStatus, const struct FStateTreeActiveStates& CompletedActiveStates);
	EStateTreeRunStatus ReceiveTick(const float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeTaskBlueprintBase">();
	}
	static class UStateTreeTaskBlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeTaskBlueprintBase>();
	}
};
static_assert(alignof(UStateTreeTaskBlueprintBase) == 0x000008, "Wrong alignment on UStateTreeTaskBlueprintBase");
static_assert(sizeof(UStateTreeTaskBlueprintBase) == 0x000070, "Wrong size on UStateTreeTaskBlueprintBase");
static_assert(offsetof(UStateTreeTaskBlueprintBase, StateIndex) == 0x000060, "Member 'UStateTreeTaskBlueprintBase::StateIndex' has a wrong offset!");
static_assert(offsetof(UStateTreeTaskBlueprintBase, NodeIndex) == 0x000064, "Member 'UStateTreeTaskBlueprintBase::NodeIndex' has a wrong offset!");

// Class StateTreeModule.StateTree
// 0x0150 (0x01A0 - 0x0050)
class UStateTree final : public UDataAsset
{
public:
	struct FStateTreeInstanceData                 DefaultInstanceData;                               // 0x0050(0x0010)(NativeAccessSpecifierPublic)
	uint32                                        LastCompiledEditorDataHash;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStateTreeSchema*                       Schema;                                            // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FCompactStateTreeState>         States;                                            // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FCompactStateTransition>        Transitions;                                       // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FInstancedStructContainer              Nodes;                                             // 0x0090(0x0010)(NativeAccessSpecifierPrivate)
	struct FStateTreeInstanceData                 SharedInstanceData;                                // 0x00A0(0x0010)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStateTreeExternalDataDesc>     ContextDataDescs;                                  // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FStateTreePropertyBindings             PropertyBindings;                                  // 0x00D8(0x0058)(NativeAccessSpecifierPrivate)
	TArray<struct FStateTreeStateIdToHandle>      IDToStateMappings;                                 // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FStateTreeNodeIdToIndex>        IDToNodeMappings;                                  // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FStateTreeTransitionIdToIndex>  IDToTransitionMappings;                            // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FInstancedPropertyBag                  Parameters;                                        // 0x0160(0x0010)(NativeAccessSpecifierPrivate)
	struct FStateTreeIndex8                       ParametersDataViewIndex;                           // 0x0170(0x0001)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_171[0x1];                                      // 0x0171(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        EvaluatorsBegin;                                   // 0x0172(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        EvaluatorsNum;                                     // 0x0174(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        GlobalTasksBegin;                                  // 0x0176(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint16                                        GlobalTasksNum;                                    // 0x0178(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasGlobalTransitionTasks;                         // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_17B[0x5];                                      // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStateTreeExternalDataDesc>     ExternalDataDescs;                                 // 0x0180(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	int32                                         ExternalDataBaseIndex;                             // 0x0190(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumDataViews;                                      // 0x0194(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTree">();
	}
	static class UStateTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTree>();
	}
};
static_assert(alignof(UStateTree) == 0x000008, "Wrong alignment on UStateTree");
static_assert(sizeof(UStateTree) == 0x0001A0, "Wrong size on UStateTree");
static_assert(offsetof(UStateTree, DefaultInstanceData) == 0x000050, "Member 'UStateTree::DefaultInstanceData' has a wrong offset!");
static_assert(offsetof(UStateTree, LastCompiledEditorDataHash) == 0x000060, "Member 'UStateTree::LastCompiledEditorDataHash' has a wrong offset!");
static_assert(offsetof(UStateTree, Schema) == 0x000068, "Member 'UStateTree::Schema' has a wrong offset!");
static_assert(offsetof(UStateTree, States) == 0x000070, "Member 'UStateTree::States' has a wrong offset!");
static_assert(offsetof(UStateTree, Transitions) == 0x000080, "Member 'UStateTree::Transitions' has a wrong offset!");
static_assert(offsetof(UStateTree, Nodes) == 0x000090, "Member 'UStateTree::Nodes' has a wrong offset!");
static_assert(offsetof(UStateTree, SharedInstanceData) == 0x0000A0, "Member 'UStateTree::SharedInstanceData' has a wrong offset!");
static_assert(offsetof(UStateTree, ContextDataDescs) == 0x0000C8, "Member 'UStateTree::ContextDataDescs' has a wrong offset!");
static_assert(offsetof(UStateTree, PropertyBindings) == 0x0000D8, "Member 'UStateTree::PropertyBindings' has a wrong offset!");
static_assert(offsetof(UStateTree, IDToStateMappings) == 0x000130, "Member 'UStateTree::IDToStateMappings' has a wrong offset!");
static_assert(offsetof(UStateTree, IDToNodeMappings) == 0x000140, "Member 'UStateTree::IDToNodeMappings' has a wrong offset!");
static_assert(offsetof(UStateTree, IDToTransitionMappings) == 0x000150, "Member 'UStateTree::IDToTransitionMappings' has a wrong offset!");
static_assert(offsetof(UStateTree, Parameters) == 0x000160, "Member 'UStateTree::Parameters' has a wrong offset!");
static_assert(offsetof(UStateTree, ParametersDataViewIndex) == 0x000170, "Member 'UStateTree::ParametersDataViewIndex' has a wrong offset!");
static_assert(offsetof(UStateTree, EvaluatorsBegin) == 0x000172, "Member 'UStateTree::EvaluatorsBegin' has a wrong offset!");
static_assert(offsetof(UStateTree, EvaluatorsNum) == 0x000174, "Member 'UStateTree::EvaluatorsNum' has a wrong offset!");
static_assert(offsetof(UStateTree, GlobalTasksBegin) == 0x000176, "Member 'UStateTree::GlobalTasksBegin' has a wrong offset!");
static_assert(offsetof(UStateTree, GlobalTasksNum) == 0x000178, "Member 'UStateTree::GlobalTasksNum' has a wrong offset!");
static_assert(offsetof(UStateTree, bHasGlobalTransitionTasks) == 0x00017A, "Member 'UStateTree::bHasGlobalTransitionTasks' has a wrong offset!");
static_assert(offsetof(UStateTree, ExternalDataDescs) == 0x000180, "Member 'UStateTree::ExternalDataDescs' has a wrong offset!");
static_assert(offsetof(UStateTree, ExternalDataBaseIndex) == 0x000190, "Member 'UStateTree::ExternalDataBaseIndex' has a wrong offset!");
static_assert(offsetof(UStateTree, NumDataViews) == 0x000194, "Member 'UStateTree::NumDataViews' has a wrong offset!");

// Class StateTreeModule.AoCTasksPool
// 0x0050 (0x0098 - 0x0048)
class UAoCTasksPool final : public UObject
{
public:
	TMap<int32, struct FTaskArray>                TasksMap;                                          // 0x0048(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AoCTasksPool">();
	}
	static class UAoCTasksPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAoCTasksPool>();
	}
};
static_assert(alignof(UAoCTasksPool) == 0x000008, "Wrong alignment on UAoCTasksPool");
static_assert(sizeof(UAoCTasksPool) == 0x000098, "Wrong size on UAoCTasksPool");
static_assert(offsetof(UAoCTasksPool, TasksMap) == 0x000048, "Member 'UAoCTasksPool::TasksMap' has a wrong offset!");

// Class StateTreeModule.StateTreeSchema
// 0x0000 (0x0048 - 0x0048)
class UStateTreeSchema : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeSchema">();
	}
	static class UStateTreeSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeSchema>();
	}
};
static_assert(alignof(UStateTreeSchema) == 0x000008, "Wrong alignment on UStateTreeSchema");
static_assert(sizeof(UStateTreeSchema) == 0x000048, "Wrong size on UStateTreeSchema");

}

