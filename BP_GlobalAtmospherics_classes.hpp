#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalAtmospherics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Skylight_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_SkyAtmosphere_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Sun_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Moon_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_ExponentialHeightFog_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_structs.hpp"
#include "STRUCT_CloudParameters_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalAtmospherics.BP_GlobalAtmospherics_C
// 0x0918 (0x0C60 - 0x0348)
class ABP_GlobalAtmospherics_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   NewSkyDome;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Sun_Direction_Vector;                              // 0x0368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force_Moon_Near_Zenith;                            // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPDA_GlobalAtmospherics_C*             GlobalAtmo_Default_Data_Asset;                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Dot_Up;                                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Sun     Sun_Struct;                                        // 0x0398(0x0088)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Moon    Moon_Struct;                                       // 0x0420(0x0088)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphere Sky_Atmosphere_Struct;                       // 0x04A8(0x0090)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Skylight Skylight_Struct;                                  // 0x0538(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFog Exp_Height_Fog_Struct;                // 0x0580(0x00F8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Skydome_MID;                                       // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_X;                                        // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Y;                                        // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Z;                                        // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Daytime_Moon1_MID;                                 // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Daytime_Moon2_MID;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Daytime_Moon3_MID;                                 // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Cloud_MID;                              // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         Final_Output_Struct_USE_THIS_ONE;                  // 0x06B0(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Disk_Color;                                    // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBPDA_CloudPreset_C*                    Volumetric_Cloud_DA;                               // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBPDA_CloudPreset_C*                    Current_Clouds;                                    // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_Sun_Is_Visible;                              // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_Sun_Is_Casting_Shadow;                       // 0x09B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_Moon_Is_Visible;                             // 0x09B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_Moon_Is_Casting_Shadows;                     // 0x09B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Horizon_Daytime_Value;                             // 0x09B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Horizon_Nighttime_Value;                           // 0x09C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Horizon_Edge_Glow_Extent;                          // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Horizon_Edge_Glow;                                 // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Horizon_Edge_Mask_Exten;                           // 0x09DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Horizon_Line_Brightness;                           // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nebulae_Brightness;                                // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Star_Brightness;                                   // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9EC[0x4];                                      // 0x09EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_Of_Game_Year_Hours;                           // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Sunrise;                                // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunrise_Offset;                                    // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CloudParameters                TEST_Cloud_Sturct;                                 // 0x0A08(0x0190)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TEST_COLOR_;                                       // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B99[0x3];                                      // 0x0B99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Test_Color;                                        // 0x0B9C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAC[0x4];                                      // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Night_Moon1_MID;                                   // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Night_Moon2_MID;                                   // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Night_Moon3_MID;                                   // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MainMoonVector;                                    // 0x0BC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Initial_ROT_at_6am;                                // 0x0BE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Sun_Altitiude;                                     // 0x0BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Azimuth;                                       // 0x0BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SUNBaseROT;                                        // 0x0C00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Moon3_Vector;                                      // 0x0C18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Moon1_Vector;                                      // 0x0C30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResnaMoonPhase;                                    // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SholMoonPhase;                                     // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SenrimMoonPhase;                                   // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	double Directional_ROTs(double Time_of_Game_Year_Normalized_input, float Equator_Rotation, double Time_Of_Game_Day_24h, double Time_Of_Game_Year_Hours_0, const struct FRotator& SunROTin, const struct FRotator& Moon1ROT, const struct FRotator& Moon2ROT, const struct FRotator& Moon3ROT, const struct FRotator& ArbitSunROT, struct FRotator* SunROT);
	void ExecuteUbergraph_BP_GlobalAtmospherics(int32 EntryPoint);
	void Exp_Height_Fog_Param_Config(double In_Time, struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFog* Exp_Fog_Struct);
	void Get_Sun_Dot(double* Sun_Dot_Up_0);
	void Is_Valid_Curve__Color_(class UCurveLinearColor* Color_Curve, const struct FLinearColor& Default_Color, double Time_Input, struct FLinearColor* Return_Color);
	void Is_Valid_Curve__Float_(class UCurveFloat* Float_Curve, double Default_Float, double Time_Input, double* Return_Float);
	void Manage_Directional_Light_Shadows();
	void Moon_Param_Config(float Time_Of_Game_Day_24h, struct FSTRUCT_GlobalAtmosphereOutput_Moon* Moon_Struct_0);
	void ReceiveTick(float DeltaSeconds);
	void Run_Expo_Height_Fog_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput, double Player_Position_Z, double* Fog_Height);
	void Run_Moon_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput);
	void Run_Sky_Atmosphere_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput);
	void Run_Skylight_Parameters(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput);
	void Run_Sun_Params(bool Use_Override, const struct FSTRUCT_GlobalAtmosphereOutput& STRUCT_GlobalAtmosphereOutput);
	void RunIt(const struct FSTRUCT_GlobalAtmosphereOutput& Final_Struct_Input, class UBPDA_CloudPreset_C* Cloud_DA_for_testing, bool Cloud_Testing, bool bNewVisibility, class UBPDA_CloudPreset_C* CloudInput, const struct FSTRUCT_CloudParameters& Cloud_Stuct, double Player_Position_Z, double TOD_24hr, double* Fog_Height);
	void Sky_Atmosphere_Param_Config(float Tine_of_Game_Day_24h, struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphere* StructOut);
	void Skylight_Param_Config(double In_Time, struct FSTRUCT_GlobalAtmosphereOutput_Skylight* Skylight_Struct_0);
	void Sun_Param_Config(float Tine_of_Game_Day_24h, struct FSTRUCT_GlobalAtmosphereOutput_Sun* Sun_Struct_0);
	void Volumetric_Cloud_Config(const struct FSTRUCT_CloudParameters& STRUCT_CloudParameters);
	void Volumetric_Cloud_MID_Not_Necessary_(bool Use_New_Clouds_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalAtmospherics_C">();
	}
	static class ABP_GlobalAtmospherics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalAtmospherics_C>();
	}
};
static_assert(alignof(ABP_GlobalAtmospherics_C) == 0x000008, "Wrong alignment on ABP_GlobalAtmospherics_C");
static_assert(sizeof(ABP_GlobalAtmospherics_C) == 0x000C60, "Wrong size on ABP_GlobalAtmospherics_C");
static_assert(offsetof(ABP_GlobalAtmospherics_C, UberGraphFrame) == 0x000348, "Member 'ABP_GlobalAtmospherics_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, NewSkyDome) == 0x000350, "Member 'ABP_GlobalAtmospherics_C::NewSkyDome' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, VolumetricCloud) == 0x000358, "Member 'ABP_GlobalAtmospherics_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, DefaultSceneRoot) == 0x000360, "Member 'ABP_GlobalAtmospherics_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sun_Direction_Vector) == 0x000368, "Member 'ABP_GlobalAtmospherics_C::Sun_Direction_Vector' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Force_Moon_Near_Zenith) == 0x000380, "Member 'ABP_GlobalAtmospherics_C::Force_Moon_Near_Zenith' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, GlobalAtmo_Default_Data_Asset) == 0x000388, "Member 'ABP_GlobalAtmospherics_C::GlobalAtmo_Default_Data_Asset' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sun_Dot_Up) == 0x000390, "Member 'ABP_GlobalAtmospherics_C::Sun_Dot_Up' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sun_Struct) == 0x000398, "Member 'ABP_GlobalAtmospherics_C::Sun_Struct' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Moon_Struct) == 0x000420, "Member 'ABP_GlobalAtmospherics_C::Moon_Struct' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sky_Atmosphere_Struct) == 0x0004A8, "Member 'ABP_GlobalAtmospherics_C::Sky_Atmosphere_Struct' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Skylight_Struct) == 0x000538, "Member 'ABP_GlobalAtmospherics_C::Skylight_Struct' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Exp_Height_Fog_Struct) == 0x000580, "Member 'ABP_GlobalAtmospherics_C::Exp_Height_Fog_Struct' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Skydome_MID) == 0x000678, "Member 'ABP_GlobalAtmospherics_C::Skydome_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Rotation_X) == 0x000680, "Member 'ABP_GlobalAtmospherics_C::Rotation_X' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Rotation_Y) == 0x000684, "Member 'ABP_GlobalAtmospherics_C::Rotation_Y' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Rotation_Z) == 0x000688, "Member 'ABP_GlobalAtmospherics_C::Rotation_Z' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Daytime_Moon1_MID) == 0x000690, "Member 'ABP_GlobalAtmospherics_C::Daytime_Moon1_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Daytime_Moon2_MID) == 0x000698, "Member 'ABP_GlobalAtmospherics_C::Daytime_Moon2_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Daytime_Moon3_MID) == 0x0006A0, "Member 'ABP_GlobalAtmospherics_C::Daytime_Moon3_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Volumetric_Cloud_MID) == 0x0006A8, "Member 'ABP_GlobalAtmospherics_C::Volumetric_Cloud_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Final_Output_Struct_USE_THIS_ONE) == 0x0006B0, "Member 'ABP_GlobalAtmospherics_C::Final_Output_Struct_USE_THIS_ONE' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sun_Disk_Color) == 0x000990, "Member 'ABP_GlobalAtmospherics_C::Sun_Disk_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Volumetric_Cloud_DA) == 0x0009A0, "Member 'ABP_GlobalAtmospherics_C::Volumetric_Cloud_DA' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Current_Clouds) == 0x0009A8, "Member 'ABP_GlobalAtmospherics_C::Current_Clouds' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, DEBUG_Sun_Is_Visible) == 0x0009B0, "Member 'ABP_GlobalAtmospherics_C::DEBUG_Sun_Is_Visible' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, DEBUG_Sun_Is_Casting_Shadow) == 0x0009B1, "Member 'ABP_GlobalAtmospherics_C::DEBUG_Sun_Is_Casting_Shadow' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, DEBUG_Moon_Is_Visible) == 0x0009B2, "Member 'ABP_GlobalAtmospherics_C::DEBUG_Moon_Is_Visible' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, DEBUG_Moon_Is_Casting_Shadows) == 0x0009B3, "Member 'ABP_GlobalAtmospherics_C::DEBUG_Moon_Is_Casting_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Horizon_Daytime_Value) == 0x0009B4, "Member 'ABP_GlobalAtmospherics_C::Horizon_Daytime_Value' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Horizon_Nighttime_Value) == 0x0009C4, "Member 'ABP_GlobalAtmospherics_C::Horizon_Nighttime_Value' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Horizon_Edge_Glow_Extent) == 0x0009D4, "Member 'ABP_GlobalAtmospherics_C::Horizon_Edge_Glow_Extent' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Horizon_Edge_Glow) == 0x0009D8, "Member 'ABP_GlobalAtmospherics_C::Horizon_Edge_Glow' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Horizon_Edge_Mask_Exten) == 0x0009DC, "Member 'ABP_GlobalAtmospherics_C::Horizon_Edge_Mask_Exten' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Horizon_Line_Brightness) == 0x0009E0, "Member 'ABP_GlobalAtmospherics_C::Horizon_Line_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Nebulae_Brightness) == 0x0009E4, "Member 'ABP_GlobalAtmospherics_C::Nebulae_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Star_Brightness) == 0x0009E8, "Member 'ABP_GlobalAtmospherics_C::Star_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Time_Of_Game_Year_Hours) == 0x0009F0, "Member 'ABP_GlobalAtmospherics_C::Time_Of_Game_Year_Hours' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Normalized_Sunrise) == 0x0009F8, "Member 'ABP_GlobalAtmospherics_C::Normalized_Sunrise' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sunrise_Offset) == 0x000A00, "Member 'ABP_GlobalAtmospherics_C::Sunrise_Offset' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, TEST_Cloud_Sturct) == 0x000A08, "Member 'ABP_GlobalAtmospherics_C::TEST_Cloud_Sturct' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, TEST_COLOR_) == 0x000B98, "Member 'ABP_GlobalAtmospherics_C::TEST_COLOR_' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Test_Color) == 0x000B9C, "Member 'ABP_GlobalAtmospherics_C::Test_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Night_Moon1_MID) == 0x000BB0, "Member 'ABP_GlobalAtmospherics_C::Night_Moon1_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Night_Moon2_MID) == 0x000BB8, "Member 'ABP_GlobalAtmospherics_C::Night_Moon2_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Night_Moon3_MID) == 0x000BC0, "Member 'ABP_GlobalAtmospherics_C::Night_Moon3_MID' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, MainMoonVector) == 0x000BC8, "Member 'ABP_GlobalAtmospherics_C::MainMoonVector' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Initial_ROT_at_6am) == 0x000BE0, "Member 'ABP_GlobalAtmospherics_C::Initial_ROT_at_6am' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sun_Altitiude) == 0x000BF8, "Member 'ABP_GlobalAtmospherics_C::Sun_Altitiude' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Sun_Azimuth) == 0x000BFC, "Member 'ABP_GlobalAtmospherics_C::Sun_Azimuth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, SUNBaseROT) == 0x000C00, "Member 'ABP_GlobalAtmospherics_C::SUNBaseROT' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Moon3_Vector) == 0x000C18, "Member 'ABP_GlobalAtmospherics_C::Moon3_Vector' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, Moon1_Vector) == 0x000C30, "Member 'ABP_GlobalAtmospherics_C::Moon1_Vector' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, ResnaMoonPhase) == 0x000C48, "Member 'ABP_GlobalAtmospherics_C::ResnaMoonPhase' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, SholMoonPhase) == 0x000C50, "Member 'ABP_GlobalAtmospherics_C::SholMoonPhase' has a wrong offset!");
static_assert(offsetof(ABP_GlobalAtmospherics_C, SenrimMoonPhase) == 0x000C58, "Member 'ABP_GlobalAtmospherics_C::SenrimMoonPhase' has a wrong offset!");

}

