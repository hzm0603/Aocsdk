#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterLightActor

#include "Basic.hpp"

#include "BP_MasterLightActor_classes.hpp"
#include "BP_MasterLightActor_parameters.hpp"


namespace SDK
{

// Function BP_MasterLightActor.BP_MasterLightActor_C.Add Light Components
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_Light_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add Light Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Add Mesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_Mesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add Mesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Add Plane Emissive
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_Plane_Emissive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add Plane Emissive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Add Point
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_Point()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add Point");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Add Sperical Emissive
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_Sperical_Emissive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add Sperical Emissive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Add Spot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_Spot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add Spot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Add VFX Components
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Add_VFX_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Add VFX Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.AdjustLightTransForWidgetOffset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FTransform&                InTransform                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Z                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform ABP_MasterLightActor_C::AdjustLightTransForWidgetOffset(const struct FTransform& InTransform, double Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "AdjustLightTransForWidgetOffset");

	Params::BP_MasterLightActor_C_AdjustLightTransForWidgetOffset Parms{};

	Parms.InTransform = std::move(InTransform);
	Parms.Z = Z;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Check If AKEvent Is Overridden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAkAudioEvent*                    Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAkAudioEvent*                    Default                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAkAudioEvent**                   Color                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::Check_If_AKEvent_Is_Overridden(class UAkAudioEvent* Instance, class UAkAudioEvent* Default, class UAkAudioEvent** Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Check If AKEvent Is Overridden");

	Params::BP_MasterLightActor_C_Check_If_AKEvent_Is_Overridden Parms{};

	Parms.Instance = Instance;
	Parms.Default = Default;

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = Parms.Color;
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Check if AKSwitch Is Overriden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAkSwitchValue*                   Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAkSwitchValue*                   Default                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAkSwitchValue**                  Color                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::Check_if_AKSwitch_Is_Overriden(class UAkSwitchValue* Instance, class UAkSwitchValue* Default, class UAkSwitchValue** Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Check if AKSwitch Is Overriden");

	Params::BP_MasterLightActor_C_Check_if_AKSwitch_Is_Overriden Parms{};

	Parms.Instance = Instance;
	Parms.Default = Default;

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = Parms.Color;
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Check if Color Overridden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Default                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::Check_if_Color_Overridden(const struct FLinearColor& Instance, const struct FLinearColor& Default, struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Check if Color Overridden");

	Params::BP_MasterLightActor_C_Check_if_Color_Overridden Parms{};

	Parms.Instance = std::move(Instance);
	Parms.Default = std::move(Default);

	UObject::ProcessEvent(Func, &Parms);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Check if Float Overridden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Default                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 float_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::Check_if_Float_Overridden(double Instance, double Default, double* float_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Check if Float Overridden");

	Params::BP_MasterLightActor_C_Check_if_Float_Overridden Parms{};

	Parms.Instance = Instance;
	Parms.Default = Default;

	UObject::ProcessEvent(Func, &Parms);

	if (float_0 != nullptr)
		*float_0 = Parms.float_0;
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Check if VFX Is Overridden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UNiagaraSystem*                   Instance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   Default                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem**                  VFX                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::Check_if_VFX_Is_Overridden(class UNiagaraSystem* Instance, class UNiagaraSystem* Default, class UNiagaraSystem** VFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Check if VFX Is Overridden");

	Params::BP_MasterLightActor_C_Check_if_VFX_Is_Overridden Parms{};

	Parms.Instance = Instance;
	Parms.Default = Default;

	UObject::ProcessEvent(Func, &Parms);

	if (VFX != nullptr)
		*VFX = Parms.VFX;
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Editor Time Refresh
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Editor_Time_Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Editor Time Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.ExecuteUbergraph_BP_MasterLightActor
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::ExecuteUbergraph_BP_MasterLightActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "ExecuteUbergraph_BP_MasterLightActor");

	Params::BP_MasterLightActor_C_ExecuteUbergraph_BP_MasterLightActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Get Socket Transform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Get_Socket_Transform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Get Socket Transform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.InitializeDefaults
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::InitializeDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "InitializeDefaults");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Make DMIs from Mesh Materials
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Make_DMIs_from_Mesh_Materials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Make DMIs from Mesh Materials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.OnConstruct
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::OnConstruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "OnConstruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MasterLightActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_MasterLightActor_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterLightActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "ReceiveTick");

	Params::BP_MasterLightActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Refresh
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.ResetDefaults
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::ResetDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "ResetDefaults");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Sound Module
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Sound_Module()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Sound Module");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.Sun Altitude Phase Changed
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::Sun_Altitude_Phase_Changed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "Sun Altitude Phase Changed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterLightActor.BP_MasterLightActor_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterLightActor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterLightActor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

