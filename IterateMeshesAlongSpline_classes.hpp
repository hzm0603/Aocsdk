#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IterateMeshesAlongSpline

#include "Basic.hpp"

#include "PCG_structs.hpp"
#include "PCG_classes.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_FencePosition_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IterateMeshesAlongSpline.IterateMeshesAlongSpline_C
// 0x02F8 (0x0380 - 0x0088)
class UIterateMeshesAlongSpline_C final : public UPCGBlueprintElement
{
public:
	class AActor*                                 Owner;                                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPCGSpatialData*                        Spatial_Data;                                      // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPCGPoint>                      Out_Points;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FIterationPointData>            Final_Iteration_Data;                              // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FIterationPointData>            Stack_Iteration_Data;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRandomStream                          Random_Stream;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	class USplineComponent*                       Spline;                                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Spline_Index;                                      // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Point_Increment;                                   // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curve_Distance_Threshold;                          // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Curvature_Threshold;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flip_Meshes;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Point_Distribution_Calculations;               // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Smaller_Meshes_Around_Curves;                      // 0x00FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Scale_Meshes_to_Fit_Spline;                        // 0x00FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pivot_in_Center;                                   // 0x00FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Randomize;                                         // 0x00FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Random_Stream_Seed;                                // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineCoordinateSpace                        Coordinate_Space;                                  // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0xB];                                      // 0x0105(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAoCSplineMeshEntry                    Override_First_Mesh;                               // 0x0110(0x0100)(Edit, BlueprintVisible)
	struct FAoCSplineMeshEntry                    Override_Last_Mesh;                                // 0x0210(0x0100)(Edit, BlueprintVisible)
	bool                                          Close_Loop;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Mesh_Entry_Starting_Index;                         // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Mesh_Attribute_Name;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddStringAttribute;                                // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSecondMeshList;                                // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAoCSplineMeshEntry>            Incoming_Fence_Objects;                            // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Stacks;                                            // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Stack_Spacing;                                     // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Failsafe;                                          // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Failsafe_Limit;                                    // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stop_Debug;                                        // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Alternate_Row_Offset;                              // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dilapidation;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dilapidation_Level;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reverse_Spline_Direction;                          // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FencePosition                               Spline_Position;                                   // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x2];                                      // 0x036A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Fence_Data_Index;                                  // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Road_Decals;                                   // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Assign_Length(const struct FAoCSplineMeshEntry& Entry, const struct FRandomStream& Stream, double* Total_Length, double* Scaled_Mesh_Length, double* Scale, float* Random_Padding, float* Random_Scale);
	void Choose_Next_Mesh_Entry(TArray<struct FIterationPointData>& Point_Data_Array, TArray<struct FAoCSplineMeshEntry>& Mesh_Entry_List, int32 Consecutive_Index, bool* Mesh_Found, struct FIterationPointData* Point_Data);
	void ExecuteWithContext(struct FPCGContext& InContext, const struct FPCGDataCollection& Input, struct FPCGDataCollection* Output);
	void Find_Mesh_To_Fit_Area(TArray<struct FAoCSplineMeshEntry>& Mesh_Entry_List, TArray<struct FPCGPoint>& All_Points, int32 Mesh_Start_Index, int32 Final_Spline_Index, int32 Consecutive_Mesh_Index, struct FIterationPointData& End_Data, double End_Scaled_Mesh_Length, bool* Mesh_Found_, struct FIterationPointData* Iteration_Point_Data, bool* First_Placed, bool* Last_Placed);
	void Get_Curvature_of_Spline_Between_Points(int32 Start_Point_Index, int32 End_Point_Index, TArray<struct FPCGPoint>& All_Points, double* Average_Curvature);
	void Get_Distance_Along_Spline_Between_Points(int32 Start_Point_Index, int32 End_Point_Index, TArray<struct FPCGPoint>& All_Points, double* Distance);
	void Get_Point_Closest_to_Location(const struct FVector& Location, TArray<struct FPCGPoint>& Points, int32* Index_0, bool* Found);

	class FName NodeTitleOverride() const;
	bool PointLoopBody(const struct FPCGContext& InContext, const class UPCGPointData* InData, const struct FPCGPoint& InPoint, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IterateMeshesAlongSpline_C">();
	}
	static class UIterateMeshesAlongSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIterateMeshesAlongSpline_C>();
	}
};
static_assert(alignof(UIterateMeshesAlongSpline_C) == 0x000010, "Wrong alignment on UIterateMeshesAlongSpline_C");
static_assert(sizeof(UIterateMeshesAlongSpline_C) == 0x000380, "Wrong size on UIterateMeshesAlongSpline_C");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Owner) == 0x000088, "Member 'UIterateMeshesAlongSpline_C::Owner' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Spatial_Data) == 0x000090, "Member 'UIterateMeshesAlongSpline_C::Spatial_Data' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Out_Points) == 0x000098, "Member 'UIterateMeshesAlongSpline_C::Out_Points' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Final_Iteration_Data) == 0x0000A8, "Member 'UIterateMeshesAlongSpline_C::Final_Iteration_Data' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Stack_Iteration_Data) == 0x0000B8, "Member 'UIterateMeshesAlongSpline_C::Stack_Iteration_Data' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Random_Stream) == 0x0000C8, "Member 'UIterateMeshesAlongSpline_C::Random_Stream' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Spline) == 0x0000D0, "Member 'UIterateMeshesAlongSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Spline_Index) == 0x0000D8, "Member 'UIterateMeshesAlongSpline_C::Spline_Index' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Point_Increment) == 0x0000E0, "Member 'UIterateMeshesAlongSpline_C::Point_Increment' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Curve_Distance_Threshold) == 0x0000E8, "Member 'UIterateMeshesAlongSpline_C::Curve_Distance_Threshold' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Curvature_Threshold) == 0x0000F0, "Member 'UIterateMeshesAlongSpline_C::Curvature_Threshold' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Flip_Meshes) == 0x0000F8, "Member 'UIterateMeshesAlongSpline_C::Flip_Meshes' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Use_Point_Distribution_Calculations) == 0x0000F9, "Member 'UIterateMeshesAlongSpline_C::Use_Point_Distribution_Calculations' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Smaller_Meshes_Around_Curves) == 0x0000FA, "Member 'UIterateMeshesAlongSpline_C::Smaller_Meshes_Around_Curves' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Scale_Meshes_to_Fit_Spline) == 0x0000FB, "Member 'UIterateMeshesAlongSpline_C::Scale_Meshes_to_Fit_Spline' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Pivot_in_Center) == 0x0000FC, "Member 'UIterateMeshesAlongSpline_C::Pivot_in_Center' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Randomize) == 0x0000FD, "Member 'UIterateMeshesAlongSpline_C::Randomize' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Random_Stream_Seed) == 0x000100, "Member 'UIterateMeshesAlongSpline_C::Random_Stream_Seed' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Coordinate_Space) == 0x000104, "Member 'UIterateMeshesAlongSpline_C::Coordinate_Space' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Override_First_Mesh) == 0x000110, "Member 'UIterateMeshesAlongSpline_C::Override_First_Mesh' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Override_Last_Mesh) == 0x000210, "Member 'UIterateMeshesAlongSpline_C::Override_Last_Mesh' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Close_Loop) == 0x000310, "Member 'UIterateMeshesAlongSpline_C::Close_Loop' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Mesh_Entry_Starting_Index) == 0x000314, "Member 'UIterateMeshesAlongSpline_C::Mesh_Entry_Starting_Index' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Mesh_Attribute_Name) == 0x000318, "Member 'UIterateMeshesAlongSpline_C::Mesh_Attribute_Name' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, AddStringAttribute) == 0x000320, "Member 'UIterateMeshesAlongSpline_C::AddStringAttribute' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, bUseSecondMeshList) == 0x000321, "Member 'UIterateMeshesAlongSpline_C::bUseSecondMeshList' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Incoming_Fence_Objects) == 0x000328, "Member 'UIterateMeshesAlongSpline_C::Incoming_Fence_Objects' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Stacks) == 0x000338, "Member 'UIterateMeshesAlongSpline_C::Stacks' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Stack_Spacing) == 0x000340, "Member 'UIterateMeshesAlongSpline_C::Stack_Spacing' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Failsafe) == 0x000348, "Member 'UIterateMeshesAlongSpline_C::Failsafe' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Failsafe_Limit) == 0x00034C, "Member 'UIterateMeshesAlongSpline_C::Failsafe_Limit' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Stop_Debug) == 0x000350, "Member 'UIterateMeshesAlongSpline_C::Stop_Debug' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Alternate_Row_Offset) == 0x000354, "Member 'UIterateMeshesAlongSpline_C::Alternate_Row_Offset' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Dilapidation) == 0x000358, "Member 'UIterateMeshesAlongSpline_C::Dilapidation' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Dilapidation_Level) == 0x000360, "Member 'UIterateMeshesAlongSpline_C::Dilapidation_Level' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Reverse_Spline_Direction) == 0x000368, "Member 'UIterateMeshesAlongSpline_C::Reverse_Spline_Direction' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Spline_Position) == 0x000369, "Member 'UIterateMeshesAlongSpline_C::Spline_Position' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Fence_Data_Index) == 0x00036C, "Member 'UIterateMeshesAlongSpline_C::Fence_Data_Index' has a wrong offset!");
static_assert(offsetof(UIterateMeshesAlongSpline_C, Use_Road_Decals) == 0x000370, "Member 'UIterateMeshesAlongSpline_C::Use_Road_Decals' has a wrong offset!");

}

