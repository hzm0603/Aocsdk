#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricBlood

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VolumetricBlood.BP_VolumetricBlood_C
// 0x0188 (0x04D0 - 0x0348)
class ABP_VolumetricBlood_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   WindDirectionText;                                 // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   VolumeCube;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_TestAnimateIn_SpeedTrack_3FC22105415660BBD6EDFFB10AACD5FB; // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_TestAnimateIn_Alpha_3FC22105415660BBD6EDFFB10AACD5FB; // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_TestAnimateIn__Direction_3FC22105415660BBD6EDFFB10AACD5FB; // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_TestAnimateIn;                            // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     VolumetricParentMaterial;                          // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideWindDirection_;                            // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WindDirectionOverride;                             // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     VolumetricParentMaterialRVT;                       // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                AreaScale;                                         // 0x03B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           VolumetricColor;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseScale;                                        // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryNoiseScale;                               // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Height;                                        // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Falloff;                                           // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricDensity;                                 // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricContrast;                                // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                RecordedWindVector;                                // 0x03F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindSpeed;                                         // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DynamicWindDirection;                              // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmissiveStrength;                                  // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DF_AO_Intensity;                                   // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         defaultStateSurfaceHeight;                         // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        calculatedSurfaceHeight;                           // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DF_AO_Distance;                                    // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxDrawDistance;                                   // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Primary_Speed;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Secondary_Speed;                                   // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClimbValue;                                        // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         WindContribution;                                  // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Opacity;                                           // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Noise_Shadow_Intensity;                            // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimPosition;                                      // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         defaultVolumetricDensity;                          // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        calculatedVolumetricDensity;                       // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         defaultFalloff;                                    // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         calculatedFalloff;                                 // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        minFalloff;                                        // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        maxFalloff;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        minAnimNoise2Scale;                                // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         defaultNoise2Scale;                                // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        maxAnimNoise2Scale;                                // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         calculatedNoise2Scale;                             // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimMovementSpeed;                                 // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugTestAnimation_;                               // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        defaultNoise1Speed;                                // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        calculatedNoise1Speed;                             // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	double CalculateFalloff();
	void CheckForWindActor(bool* WindActorExists, class AWindDirectionalSource** WindActor);
	void ControlWindArrow();
	void CreateMID();
	void ExecuteUbergraph_BP_VolumetricBlood(int32 EntryPoint);
	void GatherConfigVariables();
	void GetWindDirection(struct FVector* WindDirection, bool* Changed, struct FRotator* Rotation);
	void OneTimeAreaScaleFix();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Refresh();
	void RefreshAnimatedParameters();
	void SetAnimPosition(double AnimPosition_0);
	void SetAreaScale();
	void SetRenderingLimits();
	void TestAnimation();
	void Timeline_TestAnimateIn__FinishedFunc();
	void Timeline_TestAnimateIn__UpdateFunc();
	void UpdateAnimation(double AnimPosition_0);
	void UpdateMID();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VolumetricBlood_C">();
	}
	static class ABP_VolumetricBlood_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VolumetricBlood_C>();
	}
};
static_assert(alignof(ABP_VolumetricBlood_C) == 0x000008, "Wrong alignment on ABP_VolumetricBlood_C");
static_assert(sizeof(ABP_VolumetricBlood_C) == 0x0004D0, "Wrong size on ABP_VolumetricBlood_C");
static_assert(offsetof(ABP_VolumetricBlood_C, UberGraphFrame) == 0x000348, "Member 'ABP_VolumetricBlood_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, TextRender) == 0x000350, "Member 'ABP_VolumetricBlood_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, WindDirectionText) == 0x000358, "Member 'ABP_VolumetricBlood_C::WindDirectionText' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Arrow) == 0x000360, "Member 'ABP_VolumetricBlood_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, VolumeCube) == 0x000368, "Member 'ABP_VolumetricBlood_C::VolumeCube' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, DefaultSceneRoot) == 0x000370, "Member 'ABP_VolumetricBlood_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Timeline_TestAnimateIn_SpeedTrack_3FC22105415660BBD6EDFFB10AACD5FB) == 0x000378, "Member 'ABP_VolumetricBlood_C::Timeline_TestAnimateIn_SpeedTrack_3FC22105415660BBD6EDFFB10AACD5FB' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Timeline_TestAnimateIn_Alpha_3FC22105415660BBD6EDFFB10AACD5FB) == 0x00037C, "Member 'ABP_VolumetricBlood_C::Timeline_TestAnimateIn_Alpha_3FC22105415660BBD6EDFFB10AACD5FB' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Timeline_TestAnimateIn__Direction_3FC22105415660BBD6EDFFB10AACD5FB) == 0x000380, "Member 'ABP_VolumetricBlood_C::Timeline_TestAnimateIn__Direction_3FC22105415660BBD6EDFFB10AACD5FB' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Timeline_TestAnimateIn) == 0x000388, "Member 'ABP_VolumetricBlood_C::Timeline_TestAnimateIn' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, VolumetricParentMaterial) == 0x000390, "Member 'ABP_VolumetricBlood_C::VolumetricParentMaterial' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Mid) == 0x000398, "Member 'ABP_VolumetricBlood_C::Mid' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, OverrideWindDirection_) == 0x0003A0, "Member 'ABP_VolumetricBlood_C::OverrideWindDirection_' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, WindDirectionOverride) == 0x0003A8, "Member 'ABP_VolumetricBlood_C::WindDirectionOverride' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, VolumetricParentMaterialRVT) == 0x0003B0, "Member 'ABP_VolumetricBlood_C::VolumetricParentMaterialRVT' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, AreaScale) == 0x0003B8, "Member 'ABP_VolumetricBlood_C::AreaScale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, VolumetricColor) == 0x0003D0, "Member 'ABP_VolumetricBlood_C::VolumetricColor' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, NoiseScale) == 0x0003E0, "Member 'ABP_VolumetricBlood_C::NoiseScale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, SecondaryNoiseScale) == 0x0003E4, "Member 'ABP_VolumetricBlood_C::SecondaryNoiseScale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Fog_Height) == 0x0003E8, "Member 'ABP_VolumetricBlood_C::Fog_Height' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Falloff) == 0x0003EC, "Member 'ABP_VolumetricBlood_C::Falloff' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, VolumetricDensity) == 0x0003F0, "Member 'ABP_VolumetricBlood_C::VolumetricDensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, VolumetricContrast) == 0x0003F4, "Member 'ABP_VolumetricBlood_C::VolumetricContrast' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, RecordedWindVector) == 0x0003F8, "Member 'ABP_VolumetricBlood_C::RecordedWindVector' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, WindSpeed) == 0x000410, "Member 'ABP_VolumetricBlood_C::WindSpeed' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, DynamicWindDirection) == 0x000414, "Member 'ABP_VolumetricBlood_C::DynamicWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, EmissiveStrength) == 0x000418, "Member 'ABP_VolumetricBlood_C::EmissiveStrength' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, DF_AO_Intensity) == 0x00041C, "Member 'ABP_VolumetricBlood_C::DF_AO_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, defaultStateSurfaceHeight) == 0x000420, "Member 'ABP_VolumetricBlood_C::defaultStateSurfaceHeight' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, calculatedSurfaceHeight) == 0x000428, "Member 'ABP_VolumetricBlood_C::calculatedSurfaceHeight' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, DF_AO_Distance) == 0x000430, "Member 'ABP_VolumetricBlood_C::DF_AO_Distance' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, MaxDrawDistance) == 0x000438, "Member 'ABP_VolumetricBlood_C::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Primary_Speed) == 0x000440, "Member 'ABP_VolumetricBlood_C::Primary_Speed' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Secondary_Speed) == 0x000448, "Member 'ABP_VolumetricBlood_C::Secondary_Speed' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, ClimbValue) == 0x000450, "Member 'ABP_VolumetricBlood_C::ClimbValue' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, WindContribution) == 0x000454, "Member 'ABP_VolumetricBlood_C::WindContribution' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Opacity) == 0x000458, "Member 'ABP_VolumetricBlood_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, Noise_Shadow_Intensity) == 0x00045C, "Member 'ABP_VolumetricBlood_C::Noise_Shadow_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, AnimPosition) == 0x000460, "Member 'ABP_VolumetricBlood_C::AnimPosition' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, defaultVolumetricDensity) == 0x000468, "Member 'ABP_VolumetricBlood_C::defaultVolumetricDensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, calculatedVolumetricDensity) == 0x000470, "Member 'ABP_VolumetricBlood_C::calculatedVolumetricDensity' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, defaultFalloff) == 0x000478, "Member 'ABP_VolumetricBlood_C::defaultFalloff' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, calculatedFalloff) == 0x00047C, "Member 'ABP_VolumetricBlood_C::calculatedFalloff' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, minFalloff) == 0x000480, "Member 'ABP_VolumetricBlood_C::minFalloff' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, maxFalloff) == 0x000488, "Member 'ABP_VolumetricBlood_C::maxFalloff' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, minAnimNoise2Scale) == 0x000490, "Member 'ABP_VolumetricBlood_C::minAnimNoise2Scale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, defaultNoise2Scale) == 0x000498, "Member 'ABP_VolumetricBlood_C::defaultNoise2Scale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, maxAnimNoise2Scale) == 0x0004A0, "Member 'ABP_VolumetricBlood_C::maxAnimNoise2Scale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, calculatedNoise2Scale) == 0x0004A8, "Member 'ABP_VolumetricBlood_C::calculatedNoise2Scale' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, AnimMovementSpeed) == 0x0004B0, "Member 'ABP_VolumetricBlood_C::AnimMovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, DebugTestAnimation_) == 0x0004B8, "Member 'ABP_VolumetricBlood_C::DebugTestAnimation_' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, defaultNoise1Speed) == 0x0004C0, "Member 'ABP_VolumetricBlood_C::defaultNoise1Speed' has a wrong offset!");
static_assert(offsetof(ABP_VolumetricBlood_C, calculatedNoise1Speed) == 0x0004C8, "Member 'ABP_VolumetricBlood_C::calculatedNoise1Speed' has a wrong offset!");

}

