#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_SplineClosedLoopFollow

#include "Basic.hpp"

#include "BP_Audio_SplineClosedLoopFollow_classes.hpp"
#include "BP_Audio_SplineClosedLoopFollow_parameters.hpp"


namespace SDK
{

// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.UpdateEmitterLocationProxy
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_SplineClosedLoopFollow_C::UpdateEmitterLocationProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "UpdateEmitterLocationProxy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.Update Emitter Slowly
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_SplineClosedLoopFollow_C::Update_Emitter_Slowly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "Update Emitter Slowly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineClosedLoopFollow_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "ReceiveTick");

	Params::BP_Audio_SplineClosedLoopFollow_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Audio_SplineClosedLoopFollow_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.PostNodeInit
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_SplineClosedLoopFollow_C::PostNodeInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "PostNodeInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.GetSplineEmitterComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class USceneComponent* ABP_Audio_SplineClosedLoopFollow_C::GetSplineEmitterComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "GetSplineEmitterComponent");

	Params::BP_Audio_SplineClosedLoopFollow_C_GetSplineEmitterComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.GetSplineComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class USplineComponent* ABP_Audio_SplineClosedLoopFollow_C::GetSplineComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "GetSplineComponent");

	Params::BP_Audio_SplineClosedLoopFollow_C_GetSplineComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.GetPlayerControllerCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator*                        PlayerControllerCameraRotation                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Audio_SplineClosedLoopFollow_C::GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "GetPlayerControllerCameraRotation");

	Params::BP_Audio_SplineClosedLoopFollow_C_GetPlayerControllerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerControllerCameraRotation != nullptr)
		*PlayerControllerCameraRotation = std::move(Parms.PlayerControllerCameraRotation);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.GetInsideSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsInsideSpine_                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInsideSplineChanged_                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineClosedLoopFollow_C::GetInsideSpline(bool* IsInsideSpine_, bool* IsInsideSplineChanged_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "GetInsideSpline");

	Params::BP_Audio_SplineClosedLoopFollow_C_GetInsideSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInsideSpine_ != nullptr)
		*IsInsideSpine_ = Parms.IsInsideSpine_;

	if (IsInsideSplineChanged_ != nullptr)
		*IsInsideSplineChanged_ = Parms.IsInsideSplineChanged_;
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.GetDistanceFromPlayerToClosestSplintPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 DistanceToPlayerFromClosestSpawnPoint                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineClosedLoopFollow_C::GetDistanceFromPlayerToClosestSplintPoint(double* DistanceToPlayerFromClosestSpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "GetDistanceFromPlayerToClosestSplintPoint");

	Params::BP_Audio_SplineClosedLoopFollow_C_GetDistanceFromPlayerToClosestSplintPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DistanceToPlayerFromClosestSpawnPoint != nullptr)
		*DistanceToPlayerFromClosestSpawnPoint = Parms.DistanceToPlayerFromClosestSpawnPoint;
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.GetControlledPawnLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn**                           ControlledPawnReference                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ControlledPawnLocation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineClosedLoopFollow_C::GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "GetControlledPawnLocation");

	Params::BP_Audio_SplineClosedLoopFollow_C_GetControlledPawnLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControlledPawnReference != nullptr)
		*ControlledPawnReference = Parms.ControlledPawnReference;

	if (ControlledPawnLocation != nullptr)
		*ControlledPawnLocation = std::move(Parms.ControlledPawnLocation);
}


// Function BP_Audio_SplineClosedLoopFollow.BP_Audio_SplineClosedLoopFollow_C.ExecuteUbergraph_BP_Audio_SplineClosedLoopFollow
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineClosedLoopFollow_C::ExecuteUbergraph_BP_Audio_SplineClosedLoopFollow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineClosedLoopFollow_C", "ExecuteUbergraph_BP_Audio_SplineClosedLoopFollow");

	Params::BP_Audio_SplineClosedLoopFollow_C_ExecuteUbergraph_BP_Audio_SplineClosedLoopFollow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

