#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_OnPawnOverlap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "StateTreeModule_structs.hpp"


namespace SDK::Params
{

// Function STT_OnPawnOverlap.STT_OnPawnOverlap_C.ExecuteUbergraph_STT_OnPawnOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      CallFunc_GetCapsuleComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStateTreeTransitionResult             K2Node_Event_Transition;                           // 0x0014(0x002E)(ConstParm, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate; // 0x0044(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0054(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseCharacter*                         K2Node_DynamicCast_AsBase_Character;               // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDead_ReturnValue;                       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap) == 0x000008, "Wrong alignment on STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap");
static_assert(sizeof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap) == 0x0000A8, "Wrong size on STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, EntryPoint) == 0x000000, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::EntryPoint' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, Temp_bool_True_if_break_was_hit_Variable) == 0x000004, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_GetCapsuleComponent_ReturnValue) == 0x000008, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_GetCapsuleComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, Temp_int_Array_Index_Variable) == 0x000010, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, K2Node_Event_Transition) == 0x000014, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::K2Node_Event_Transition' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, K2Node_CreateDelegate_OutputDelegate) == 0x000044, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, K2Node_Event_DeltaTime) == 0x000054, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, K2Node_CreateDelegate_OutputDelegate_1) == 0x000058, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Array_Get_Item) == 0x000068, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, K2Node_DynamicCast_AsBase_Character) == 0x000078, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::K2Node_DynamicCast_AsBase_Character' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_IsDead_ReturnValue) == 0x000081, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_IsDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_GetDistanceTo_ReturnValue) == 0x000084, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Not_PreBool_ReturnValue_1) == 0x000088, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000089, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00008A, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Array_Length_ReturnValue_1) == 0x00008C, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, Temp_int_Loop_Counter_Variable) == 0x000090, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Greater_IntInt_ReturnValue) == 0x000094, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_BooleanAND_ReturnValue) == 0x000095, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Less_IntInt_ReturnValue) == 0x000096, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_BooleanAND_ReturnValue_1) == 0x000097, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Add_IntInt_ReturnValue) == 0x000098, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_Not_PreBool_ReturnValue_2) == 0x00009C, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x0000A0, "Member 'STT_OnPawnOverlap_C_ExecuteUbergraph_STT_OnPawnOverlap::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function STT_OnPawnOverlap.STT_OnPawnOverlap_C.OnCapsuleEndOverlap
// 0x0030 (0x0030 - 0x0000)
struct STT_OnPawnOverlap_C_OnCapsuleEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Temp_object_Variable;                              // 0x0020(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap) == 0x000008, "Wrong alignment on STT_OnPawnOverlap_C_OnCapsuleEndOverlap");
static_assert(sizeof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap) == 0x000030, "Wrong size on STT_OnPawnOverlap_C_OnCapsuleEndOverlap");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, OverlappedComponent) == 0x000000, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, OtherActor) == 0x000008, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, OtherComp) == 0x000010, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, OtherBodyIndex) == 0x000018, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, Temp_object_Variable) == 0x000020, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, CallFunc_Array_Contains_ReturnValue) == 0x000028, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleEndOverlap, CallFunc_Array_RemoveItem_ReturnValue) == 0x000029, "Member 'STT_OnPawnOverlap_C_OnCapsuleEndOverlap::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function STT_OnPawnOverlap.STT_OnPawnOverlap_C.OnCapsuleOverlap
// 0x0128 (0x0128 - 0x0000)
struct STT_OnPawnOverlap_C_OnCapsuleOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APlayerCharacter*                       K2Node_DynamicCast_AsPlayer_Character;             // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_OnPawnOverlap_C_OnCapsuleOverlap) == 0x000008, "Wrong alignment on STT_OnPawnOverlap_C_OnCapsuleOverlap");
static_assert(sizeof(STT_OnPawnOverlap_C_OnCapsuleOverlap) == 0x000128, "Wrong size on STT_OnPawnOverlap_C_OnCapsuleOverlap");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, OverlappedComponent) == 0x000000, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, OtherActor) == 0x000008, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, OtherComp) == 0x000010, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, OtherBodyIndex) == 0x000018, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, bFromSweep) == 0x00001C, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, SweepResult) == 0x000020, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::SweepResult' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, K2Node_DynamicCast_AsPlayer_Character) == 0x000108, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::K2Node_DynamicCast_AsPlayer_Character' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, CallFunc_Array_Add_ReturnValue) == 0x000114, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000118, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STT_OnPawnOverlap_C_OnCapsuleOverlap, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000120, "Member 'STT_OnPawnOverlap_C_OnCapsuleOverlap::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function STT_OnPawnOverlap.STT_OnPawnOverlap_C.ReceiveLatentEnterState
// 0x002E (0x002E - 0x0000)
struct STT_OnPawnOverlap_C_ReceiveLatentEnterState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x002E)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(STT_OnPawnOverlap_C_ReceiveLatentEnterState) == 0x000002, "Wrong alignment on STT_OnPawnOverlap_C_ReceiveLatentEnterState");
static_assert(sizeof(STT_OnPawnOverlap_C_ReceiveLatentEnterState) == 0x00002E, "Wrong size on STT_OnPawnOverlap_C_ReceiveLatentEnterState");
static_assert(offsetof(STT_OnPawnOverlap_C_ReceiveLatentEnterState, Transition) == 0x000000, "Member 'STT_OnPawnOverlap_C_ReceiveLatentEnterState::Transition' has a wrong offset!");

// Function STT_OnPawnOverlap.STT_OnPawnOverlap_C.ReceiveLatentTick
// 0x0004 (0x0004 - 0x0000)
struct STT_OnPawnOverlap_C_ReceiveLatentTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STT_OnPawnOverlap_C_ReceiveLatentTick) == 0x000004, "Wrong alignment on STT_OnPawnOverlap_C_ReceiveLatentTick");
static_assert(sizeof(STT_OnPawnOverlap_C_ReceiveLatentTick) == 0x000004, "Wrong size on STT_OnPawnOverlap_C_ReceiveLatentTick");
static_assert(offsetof(STT_OnPawnOverlap_C_ReceiveLatentTick, DeltaTime) == 0x000000, "Member 'STT_OnPawnOverlap_C_ReceiveLatentTick::DeltaTime' has a wrong offset!");

}

