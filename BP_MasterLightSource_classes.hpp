#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterLightSource

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_LightSourceLightType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_TimeOfDayOverrides_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterLightSource.BP_MasterLightSource_C
// 0x0138 (0x0480 - 0x0348)
class ABP_MasterLightSource_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Particle_System;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightSourceMesh;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightsourceMeshContainer;                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   IntrepidAK;                                        // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MountingMesh;                                      // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Light_On_Value;                                    // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Light_Intensity;                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Indirect_Light_Intensity;                          // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Color_Temperature;                                 // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attenuation_Radius;                                // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specular_Scale;                                    // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Inner_Cone_Angle;                                  // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Outer_Cone_Angle;                                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flicker_;                                          // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Light_Intensity_Multiplier;                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        AttenuationMultiplier;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cone_Angle_Multiplier;                             // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Dynamic_Shadows;                              // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Contact_Shadow_Reach;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ULocalLightComponent*                   MyLight;                                           // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_LightSourceLightType                        Light_Type;                                        // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Particles_;                                    // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Mounting_Mesh_;                                // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3[0x5];                                      // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Light_Function_Material;                           // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentLightIntensity;                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               UsableLightFunctionMaterial;                       // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Flicker_Speed;                                     // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flicker_Floor;                                     // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mesh_Material_Flicker_;                            // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Contact_Shadow__Light_Source_;                 // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Contact_Shadow__Mounting_Mesh_;                // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B[0x5];                                      // 0x041B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InstanceLightIntensity;                            // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InstanceUseTimeOfDay;                              // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TimeOfDayOverrides                          Time_of_Day_Override;                              // 0x0429(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Time_of_Day_;                                  // 0x042A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42B[0x5];                                      // 0x042B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Day_Time_Multiplier;                               // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Daytime_Multiplier_;                      // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Day_Time_Multiplier_Override;                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InstanceDayTimeMultiplier;                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightsource_Mesh_Scale;                            // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EmissiveColor;                                     // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MasterUseLightFunction_;                           // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Sound_;                                        // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Sound;                                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Light;                                          // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DestroyAllLights();
	void ExecuteUbergraph_BP_MasterLightSource(int32 EntryPoint);
	void Manage_Sound();
	void ManageParticles();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Refresh();
	void RuntimeLightTypeSwitch();
	void SetCurrentIntensity();
	void SetLightProperties();
	void SetLightType();
	void SetMeshProperties();
	void SetTimeOfDayProperties();
	void UpdateLightOnValue();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterLightSource_C">();
	}
	static class ABP_MasterLightSource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterLightSource_C>();
	}
};
static_assert(alignof(ABP_MasterLightSource_C) == 0x000008, "Wrong alignment on ABP_MasterLightSource_C");
static_assert(sizeof(ABP_MasterLightSource_C) == 0x000480, "Wrong size on ABP_MasterLightSource_C");
static_assert(offsetof(ABP_MasterLightSource_C, UberGraphFrame) == 0x000348, "Member 'ABP_MasterLightSource_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, PointLight) == 0x000350, "Member 'ABP_MasterLightSource_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Particle_System) == 0x000358, "Member 'ABP_MasterLightSource_C::Particle_System' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, SpotLight) == 0x000360, "Member 'ABP_MasterLightSource_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, LightSourceMesh) == 0x000368, "Member 'ABP_MasterLightSource_C::LightSourceMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, LightsourceMeshContainer) == 0x000370, "Member 'ABP_MasterLightSource_C::LightsourceMeshContainer' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, IntrepidAK) == 0x000378, "Member 'ABP_MasterLightSource_C::IntrepidAK' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, MountingMesh) == 0x000380, "Member 'ABP_MasterLightSource_C::MountingMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, DefaultSceneRoot) == 0x000388, "Member 'ABP_MasterLightSource_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Light_On_Value) == 0x000390, "Member 'ABP_MasterLightSource_C::Light_On_Value' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Base_Light_Intensity) == 0x000398, "Member 'ABP_MasterLightSource_C::Base_Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Indirect_Light_Intensity) == 0x0003A0, "Member 'ABP_MasterLightSource_C::Indirect_Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Color_Temperature) == 0x0003A8, "Member 'ABP_MasterLightSource_C::Color_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Attenuation_Radius) == 0x0003B0, "Member 'ABP_MasterLightSource_C::Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Specular_Scale) == 0x0003B4, "Member 'ABP_MasterLightSource_C::Specular_Scale' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Inner_Cone_Angle) == 0x0003B8, "Member 'ABP_MasterLightSource_C::Inner_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Outer_Cone_Angle) == 0x0003BC, "Member 'ABP_MasterLightSource_C::Outer_Cone_Angle' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Flicker_) == 0x0003C0, "Member 'ABP_MasterLightSource_C::Flicker_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Light_Intensity_Multiplier) == 0x0003C8, "Member 'ABP_MasterLightSource_C::Light_Intensity_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, AttenuationMultiplier) == 0x0003D0, "Member 'ABP_MasterLightSource_C::AttenuationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Cone_Angle_Multiplier) == 0x0003D8, "Member 'ABP_MasterLightSource_C::Cone_Angle_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Cast_Dynamic_Shadows) == 0x0003DC, "Member 'ABP_MasterLightSource_C::Cast_Dynamic_Shadows' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Contact_Shadow_Reach) == 0x0003E0, "Member 'ABP_MasterLightSource_C::Contact_Shadow_Reach' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, MyLight) == 0x0003E8, "Member 'ABP_MasterLightSource_C::MyLight' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Light_Type) == 0x0003F0, "Member 'ABP_MasterLightSource_C::Light_Type' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Has_Particles_) == 0x0003F1, "Member 'ABP_MasterLightSource_C::Has_Particles_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Has_Mounting_Mesh_) == 0x0003F2, "Member 'ABP_MasterLightSource_C::Has_Mounting_Mesh_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Light_Function_Material) == 0x0003F8, "Member 'ABP_MasterLightSource_C::Light_Function_Material' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, CurrentLightIntensity) == 0x000400, "Member 'ABP_MasterLightSource_C::CurrentLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, UsableLightFunctionMaterial) == 0x000408, "Member 'ABP_MasterLightSource_C::UsableLightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Flicker_Speed) == 0x000410, "Member 'ABP_MasterLightSource_C::Flicker_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Flicker_Floor) == 0x000414, "Member 'ABP_MasterLightSource_C::Flicker_Floor' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Mesh_Material_Flicker_) == 0x000418, "Member 'ABP_MasterLightSource_C::Mesh_Material_Flicker_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Use_Contact_Shadow__Light_Source_) == 0x000419, "Member 'ABP_MasterLightSource_C::Use_Contact_Shadow__Light_Source_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Use_Contact_Shadow__Mounting_Mesh_) == 0x00041A, "Member 'ABP_MasterLightSource_C::Use_Contact_Shadow__Mounting_Mesh_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, InstanceLightIntensity) == 0x000420, "Member 'ABP_MasterLightSource_C::InstanceLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, InstanceUseTimeOfDay) == 0x000428, "Member 'ABP_MasterLightSource_C::InstanceUseTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Time_of_Day_Override) == 0x000429, "Member 'ABP_MasterLightSource_C::Time_of_Day_Override' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Use_Time_of_Day_) == 0x00042A, "Member 'ABP_MasterLightSource_C::Use_Time_of_Day_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Day_Time_Multiplier) == 0x000430, "Member 'ABP_MasterLightSource_C::Day_Time_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Override_Daytime_Multiplier_) == 0x000438, "Member 'ABP_MasterLightSource_C::Override_Daytime_Multiplier_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Day_Time_Multiplier_Override) == 0x000440, "Member 'ABP_MasterLightSource_C::Day_Time_Multiplier_Override' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, InstanceDayTimeMultiplier) == 0x000448, "Member 'ABP_MasterLightSource_C::InstanceDayTimeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Lightsource_Mesh_Scale) == 0x000450, "Member 'ABP_MasterLightSource_C::Lightsource_Mesh_Scale' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, EmissiveColor) == 0x000458, "Member 'ABP_MasterLightSource_C::EmissiveColor' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, MasterUseLightFunction_) == 0x000468, "Member 'ABP_MasterLightSource_C::MasterUseLightFunction_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Has_Sound_) == 0x000469, "Member 'ABP_MasterLightSource_C::Has_Sound_' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, Sound) == 0x000470, "Member 'ABP_MasterLightSource_C::Sound' has a wrong offset!");
static_assert(offsetof(ABP_MasterLightSource_C, No_Light) == 0x000478, "Member 'ABP_MasterLightSource_C::No_Light' has a wrong offset!");

}

