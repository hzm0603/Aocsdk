#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_MoveToTarget

#include "Basic.hpp"

#include "STT_MoveToTarget_classes.hpp"
#include "STT_MoveToTarget_parameters.hpp"


namespace SDK
{

// Function STT_MoveToTarget.STT_MoveToTarget_C.ExecuteUbergraph_STT_MoveToTarget
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_MoveToTarget_C::ExecuteUbergraph_STT_MoveToTarget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_MoveToTarget_C", "ExecuteUbergraph_STT_MoveToTarget");

	Params::STT_MoveToTarget_C_ExecuteUbergraph_STT_MoveToTarget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_MoveToTarget.STT_MoveToTarget_C.ReceiveExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_MoveToTarget_C::ReceiveExitState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_MoveToTarget_C", "ReceiveExitState");

	Params::STT_MoveToTarget_C_ReceiveExitState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_MoveToTarget.STT_MoveToTarget_C.ReceiveLatentEnterState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_MoveToTarget_C::ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_MoveToTarget_C", "ReceiveLatentEnterState");

	Params::STT_MoveToTarget_C_ReceiveLatentEnterState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_MoveToTarget.STT_MoveToTarget_C.ReceiveLatentTick
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_MoveToTarget_C::ReceiveLatentTick(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_MoveToTarget_C", "ReceiveLatentTick");

	Params::STT_MoveToTarget_C_ReceiveLatentTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_MoveToTarget.STT_MoveToTarget_C.RotateToTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetVec                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  YawDelta                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_MoveToTarget_C::RotateToTarget(const struct FVector& TargetVec, class AActor* Source, double YawDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_MoveToTarget_C", "RotateToTarget");

	Params::STT_MoveToTarget_C_RotateToTarget Parms{};

	Parms.TargetVec = std::move(TargetVec);
	Parms.Source = Source;
	Parms.YawDelta = YawDelta;

	UObject::ProcessEvent(Func, &Parms);
}

}

