#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Landscape

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Landscape_structs.hpp"


namespace SDK
{

// Class Landscape.LandscapeGizmoActor
// 0x0000 (0x0348 - 0x0348)
class ALandscapeGizmoActor : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGizmoActor">();
	}
	static class ALandscapeGizmoActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeGizmoActor>();
	}
};
static_assert(alignof(ALandscapeGizmoActor) == 0x000008, "Wrong alignment on ALandscapeGizmoActor");
static_assert(sizeof(ALandscapeGizmoActor) == 0x000348, "Wrong size on ALandscapeGizmoActor");

// Class Landscape.LandscapeGizmoActiveActor
// 0x0050 (0x0398 - 0x0348)
class ALandscapeGizmoActiveActor final : public ALandscapeGizmoActor
{
public:
	uint8                                         Pad_348[0x50];                                     // 0x0348(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGizmoActiveActor">();
	}
	static class ALandscapeGizmoActiveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeGizmoActiveActor>();
	}
};
static_assert(alignof(ALandscapeGizmoActiveActor) == 0x000008, "Wrong alignment on ALandscapeGizmoActiveActor");
static_assert(sizeof(ALandscapeGizmoActiveActor) == 0x000398, "Wrong size on ALandscapeGizmoActiveActor");

// Class Landscape.ControlPointMeshComponent
// 0x0010 (0x0690 - 0x0680)
class UControlPointMeshComponent final : public UStaticMeshComponent
{
public:
	float                                         VirtualTextureMainPassMaxDrawDistance;             // 0x0680(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_684[0xC];                                      // 0x0684(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlPointMeshComponent">();
	}
	static class UControlPointMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControlPointMeshComponent>();
	}
};
static_assert(alignof(UControlPointMeshComponent) == 0x000010, "Wrong alignment on UControlPointMeshComponent");
static_assert(sizeof(UControlPointMeshComponent) == 0x000690, "Wrong size on UControlPointMeshComponent");
static_assert(offsetof(UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance) == 0x000680, "Member 'UControlPointMeshComponent::VirtualTextureMainPassMaxDrawDistance' has a wrong offset!");

// Class Landscape.LandscapeSplineInterface
// 0x0000 (0x0048 - 0x0048)
class ILandscapeSplineInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineInterface">();
	}
	static class ILandscapeSplineInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILandscapeSplineInterface>();
	}
};
static_assert(alignof(ILandscapeSplineInterface) == 0x000008, "Wrong alignment on ILandscapeSplineInterface");
static_assert(sizeof(ILandscapeSplineInterface) == 0x000048, "Wrong size on ILandscapeSplineInterface");

// Class Landscape.LandscapeProxy
// 0x0388 (0x06D0 - 0x0348)
class ALandscapeProxy : public APartitionActor
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULandscapeSplinesComponent*             SplineComponent;                                   // 0x0350(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  LandscapeGuid;                                     // 0x0358(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x10];                                     // 0x0368(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableNanite;                                     // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandscapePerLODMaterialOverride> PerLODOverrideMaterials;                           // 0x0380(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FIntPoint                              LandscapeSectionOffset;                            // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLODLevel;                                       // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ComponentScreenSizeToUseSubSections;               // 0x039C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LOD0ScreenSize;                                    // 0x03A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LODGroupKey;                                       // 0x03A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LOD0DistributionSetting;                           // 0x03A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODDistributionSetting;                            // 0x03AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StaticLightingLOD;                                 // 0x03B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      DefaultPhysMaterial;                               // 0x03B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StreamingDistanceMultiplier;                       // 0x03C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LandscapeMaterial;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D0[0x20];                                     // 0x03D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LandscapeHoleMaterial;                             // 0x03F0(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URuntimeVirtualTexture*>         RuntimeVirtualTextures;                            // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bSetCreateRuntimeVirtualTextureVolumes;            // 0x0408(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualTextureRenderWithQuad;                     // 0x0409(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVirtualTextureRenderWithQuadHQ;                   // 0x040A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40B[0x1];                                      // 0x040B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualTextureNumLods;                             // 0x040C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VirtualTextureLodBias;                             // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureMainPassType            VirtualTextureRenderPassType;                      // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NegativeZBoundsExtension;                          // 0x0418(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveZBoundsExtension;                          // 0x041C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULandscapeComponent*>            LandscapeComponents;                               // 0x0420(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class ULandscapeHeightfieldCollisionComponent*> CollisionComponents;                               // 0x0430(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UHierarchicalInstancedStaticMeshComponent*> FoliageComponents;                                 // 0x0440(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class ULandscapeNaniteComponent*              NaniteComponent;                                   // 0x0450(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULandscapeNaniteComponent*>      NaniteComponents;                                  // 0x0458(0x0010)(ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_468[0x64];                                     // 0x0468(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasLandscapeGrass;                                // 0x04CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticLightingResolution;                          // 0x04D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CastShadow : 1;                                    // 0x04D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDynamicShadow : 1;                            // 0x04D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastStaticShadow : 1;                             // 0x04D4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EShadowCacheInvalidationBehavior              ShadowCacheInvalidationBehavior;                   // 0x04D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCastContactShadow : 1;                            // 0x04D6(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_4D6_1 : 7;                                  // 0x04D6(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_4D7[0x1];                                      // 0x04D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCastFarShadow : 1;                                // 0x04D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_4D8_1 : 7;                                  // 0x04D8(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCastHiddenShadow : 1;                             // 0x04DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_4DC_1 : 7;                                  // 0x04DC(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCastShadowAsTwoSided : 1;                         // 0x04E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_4E0_1 : 7;                                  // 0x04E0(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectDistanceFieldLighting : 1;                  // 0x04E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	struct FLightingChannels                      LightingChannels;                                  // 0x04E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E6[0x2];                                      // 0x04E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseMaterialPositionOffsetInStaticLighting : 1;    // 0x04E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepth : 1;                            // 0x04E8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ERendererStencilMask                          CustomDepthStencilWriteMask;                       // 0x04EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LDMaxDrawDistance;                                 // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings            LightmassSettings;                                 // 0x04F8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CollisionMipLevel;                                 // 0x0510(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleCollisionMipLevel;                           // 0x0514(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          BodyInstance;                                      // 0x0520(0x0190)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         bGenerateOverlapEvents : 1;                        // 0x06B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bBakeMaterialPositionOffsetIntoCollision : 1;      // 0x06B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComponentSizeQuads;                                // 0x06B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSubsections;                                    // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUsedForNavigation : 1;                            // 0x06C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFillCollisionUnderLandscapeForNavmesh : 1;        // 0x06C0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ENavDataGatheringMode                         NavigationGeometryGatheringMode;                   // 0x06C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDynamicMaterialInstance;                       // 0x06C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLandscapeForCullingInvisibleHLODVertices;      // 0x06C6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasLayersContent;                                 // 0x06C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCompressedHeightmapStorage;                    // 0x06C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);
	void ChangeLODDistanceFactor(float InLODDistanceFactor);
	void EditorApplySpline(class USplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int32 NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, class ULandscapeLayerInfoObject* PaintLayer, class FName EditLayerName);
	void EditorSetLandscapeMaterial(class UMaterialInterface* NewLandscapeMaterial);
	class ALandscape* GetLandscapeActor();
	bool LandscapeExportHeightmapToRenderTarget(class UTextureRenderTarget2D* InRenderTarget, bool InExportHeightIntoRGChannel, bool InExportLandscapeProxies);
	void SetLandscapeMaterialScalarParameterValue(class FName ParameterName, float Value);
	void SetLandscapeMaterialTextureParameterValue(class FName ParameterName, class UTexture* Value);
	void SetLandscapeMaterialVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void SetVirtualTextureRenderPassType(ERuntimeVirtualTextureMainPassType InType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeProxy">();
	}
	static class ALandscapeProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeProxy>();
	}
};
static_assert(alignof(ALandscapeProxy) == 0x000008, "Wrong alignment on ALandscapeProxy");
static_assert(sizeof(ALandscapeProxy) == 0x0006D0, "Wrong size on ALandscapeProxy");
static_assert(offsetof(ALandscapeProxy, SplineComponent) == 0x000350, "Member 'ALandscapeProxy::SplineComponent' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeGuid) == 0x000358, "Member 'ALandscapeProxy::LandscapeGuid' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bEnableNanite) == 0x000378, "Member 'ALandscapeProxy::bEnableNanite' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, PerLODOverrideMaterials) == 0x000380, "Member 'ALandscapeProxy::PerLODOverrideMaterials' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeSectionOffset) == 0x000390, "Member 'ALandscapeProxy::LandscapeSectionOffset' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, MaxLODLevel) == 0x000398, "Member 'ALandscapeProxy::MaxLODLevel' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, ComponentScreenSizeToUseSubSections) == 0x00039C, "Member 'ALandscapeProxy::ComponentScreenSizeToUseSubSections' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LOD0ScreenSize) == 0x0003A0, "Member 'ALandscapeProxy::LOD0ScreenSize' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LODGroupKey) == 0x0003A4, "Member 'ALandscapeProxy::LODGroupKey' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LOD0DistributionSetting) == 0x0003A8, "Member 'ALandscapeProxy::LOD0DistributionSetting' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LODDistributionSetting) == 0x0003AC, "Member 'ALandscapeProxy::LODDistributionSetting' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, StaticLightingLOD) == 0x0003B0, "Member 'ALandscapeProxy::StaticLightingLOD' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, DefaultPhysMaterial) == 0x0003B8, "Member 'ALandscapeProxy::DefaultPhysMaterial' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, StreamingDistanceMultiplier) == 0x0003C0, "Member 'ALandscapeProxy::StreamingDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeMaterial) == 0x0003C8, "Member 'ALandscapeProxy::LandscapeMaterial' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeHoleMaterial) == 0x0003F0, "Member 'ALandscapeProxy::LandscapeHoleMaterial' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, RuntimeVirtualTextures) == 0x0003F8, "Member 'ALandscapeProxy::RuntimeVirtualTextures' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bSetCreateRuntimeVirtualTextureVolumes) == 0x000408, "Member 'ALandscapeProxy::bSetCreateRuntimeVirtualTextureVolumes' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bVirtualTextureRenderWithQuad) == 0x000409, "Member 'ALandscapeProxy::bVirtualTextureRenderWithQuad' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bVirtualTextureRenderWithQuadHQ) == 0x00040A, "Member 'ALandscapeProxy::bVirtualTextureRenderWithQuadHQ' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, VirtualTextureNumLods) == 0x00040C, "Member 'ALandscapeProxy::VirtualTextureNumLods' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, VirtualTextureLodBias) == 0x000410, "Member 'ALandscapeProxy::VirtualTextureLodBias' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, VirtualTextureRenderPassType) == 0x000414, "Member 'ALandscapeProxy::VirtualTextureRenderPassType' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NegativeZBoundsExtension) == 0x000418, "Member 'ALandscapeProxy::NegativeZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, PositiveZBoundsExtension) == 0x00041C, "Member 'ALandscapeProxy::PositiveZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LandscapeComponents) == 0x000420, "Member 'ALandscapeProxy::LandscapeComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CollisionComponents) == 0x000430, "Member 'ALandscapeProxy::CollisionComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, FoliageComponents) == 0x000440, "Member 'ALandscapeProxy::FoliageComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NaniteComponent) == 0x000450, "Member 'ALandscapeProxy::NaniteComponent' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NaniteComponents) == 0x000458, "Member 'ALandscapeProxy::NaniteComponents' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bHasLandscapeGrass) == 0x0004CC, "Member 'ALandscapeProxy::bHasLandscapeGrass' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, StaticLightingResolution) == 0x0004D0, "Member 'ALandscapeProxy::StaticLightingResolution' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, ShadowCacheInvalidationBehavior) == 0x0004D5, "Member 'ALandscapeProxy::ShadowCacheInvalidationBehavior' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LightingChannels) == 0x0004E5, "Member 'ALandscapeProxy::LightingChannels' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CustomDepthStencilWriteMask) == 0x0004EC, "Member 'ALandscapeProxy::CustomDepthStencilWriteMask' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CustomDepthStencilValue) == 0x0004F0, "Member 'ALandscapeProxy::CustomDepthStencilValue' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LDMaxDrawDistance) == 0x0004F4, "Member 'ALandscapeProxy::LDMaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, LightmassSettings) == 0x0004F8, "Member 'ALandscapeProxy::LightmassSettings' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, CollisionMipLevel) == 0x000510, "Member 'ALandscapeProxy::CollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, SimpleCollisionMipLevel) == 0x000514, "Member 'ALandscapeProxy::SimpleCollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, BodyInstance) == 0x000520, "Member 'ALandscapeProxy::BodyInstance' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, ComponentSizeQuads) == 0x0006B4, "Member 'ALandscapeProxy::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, SubsectionSizeQuads) == 0x0006B8, "Member 'ALandscapeProxy::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NumSubsections) == 0x0006BC, "Member 'ALandscapeProxy::NumSubsections' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, NavigationGeometryGatheringMode) == 0x0006C4, "Member 'ALandscapeProxy::NavigationGeometryGatheringMode' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bUseDynamicMaterialInstance) == 0x0006C5, "Member 'ALandscapeProxy::bUseDynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices) == 0x0006C6, "Member 'ALandscapeProxy::bUseLandscapeForCullingInvisibleHLODVertices' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bHasLayersContent) == 0x0006C7, "Member 'ALandscapeProxy::bHasLayersContent' has a wrong offset!");
static_assert(offsetof(ALandscapeProxy, bUseCompressedHeightmapStorage) == 0x0006C8, "Member 'ALandscapeProxy::bUseCompressedHeightmapStorage' has a wrong offset!");

// Class Landscape.Landscape
// 0x0000 (0x06D0 - 0x06D0)
class ALandscape final : public ALandscapeProxy
{
public:
	void RenderHeightmap(const struct FTransform& InWorldTransform, const struct FBox2D& InExtents, class UTextureRenderTarget2D* OutRenderTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Landscape">();
	}
	static class ALandscape* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscape>();
	}
};
static_assert(alignof(ALandscape) == 0x000008, "Wrong alignment on ALandscape");
static_assert(sizeof(ALandscape) == 0x0006D0, "Wrong size on ALandscape");

// Class Landscape.LandscapeLODStreamingProxy_DEPRECATED
// 0x0000 (0x00E8 - 0x00E8)
class ULandscapeLODStreamingProxy_DEPRECATED final : public UStreamableRenderAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeLODStreamingProxy_DEPRECATED">();
	}
	static class ULandscapeLODStreamingProxy_DEPRECATED* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeLODStreamingProxy_DEPRECATED>();
	}
};
static_assert(alignof(ULandscapeLODStreamingProxy_DEPRECATED) == 0x000008, "Wrong alignment on ULandscapeLODStreamingProxy_DEPRECATED");
static_assert(sizeof(ULandscapeLODStreamingProxy_DEPRECATED) == 0x0000E8, "Wrong size on ULandscapeLODStreamingProxy_DEPRECATED");

// Class Landscape.LandscapeComponent
// 0x01F0 (0x07B0 - 0x05C0)
class ULandscapeComponent final : public UPrimitiveComponent
{
public:
	int32                                         SectionBaseX;                                      // 0x05C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionBaseY;                                      // 0x05C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentSizeQuads;                                // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x05CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSubsections;                                    // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OverrideHoleMaterial;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceConstant*>      MaterialInstances;                                 // 0x05E8(0x0010)(ZeroConstructor, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       MaterialInstancesDynamic;                          // 0x05F8(0x0010)(ZeroConstructor, Transient, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<int8>                                  LODIndexToMaterialIndex;                           // 0x0608(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPublic)
	class UTexture2D*                             XYOffsetmapTexture;                                // 0x0618(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               WeightmapScaleBias;                                // 0x0620(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightmapSubsectionOffset;                         // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_644[0xC];                                      // 0x0644(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               HeightmapScaleBias;                                // 0x0650(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CachedLocalBox;                                    // 0x0670(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ULandscapeHeightfieldCollisionComponent* CollisionComponentRef;                             // 0x06A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUserTriggeredChangeRequested;                     // 0x06B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bNaniteActive;                                     // 0x06B1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6B2[0x6];                                      // 0x06B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HeightmapTexture;                                  // 0x06B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FWeightmapLayerAllocationInfo>  WeightmapLayerAllocations;                         // 0x06C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UTexture2D*>                     WeightmapTextures;                                 // 0x06D0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FLandscapePerLODMaterialOverride> PerLODOverrideMaterials;                           // 0x06E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGuid                                  MapBuildDataId;                                    // 0x06F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionMipLevel;                                 // 0x0700(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleCollisionMipLevel;                           // 0x0704(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativeZBoundsExtension;                          // 0x0708(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositiveZBoundsExtension;                          // 0x070C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticLightingResolution;                          // 0x0710(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLOD;                                         // 0x0714(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODBias;                                           // 0x0718(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  StateId;                                           // 0x071C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72C[0x24];                                     // 0x072C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MobileMaterialInterface;                           // 0x0750(0x0008)(ZeroConstructor, Deprecated, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MobileMaterialInterfaces;                          // 0x0758(0x0010)(ZeroConstructor, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                     MobileWeightmapTextures;                           // 0x0768(0x0010)(ZeroConstructor, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FWeightmapLayerAllocationInfo>  MobileWeightmapLayerAllocations;                   // 0x0778(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_788[0x28];                                     // 0x0788(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float EditorGetPaintLayerWeightAtLocation(const struct FVector& InLocation, class ULandscapeLayerInfoObject* PaintLayer);
	float EditorGetPaintLayerWeightByNameAtLocation(const struct FVector& InLocation, const class FName InPaintLayerName);
	void SetForcedLOD(int32 InForcedLOD);
	void SetLODBias(int32 InLODBias);

	class UMaterialInstanceDynamic* GetMaterialInstanceDynamic(int32 InIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeComponent">();
	}
	static class ULandscapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeComponent>();
	}
};
static_assert(alignof(ULandscapeComponent) == 0x000010, "Wrong alignment on ULandscapeComponent");
static_assert(sizeof(ULandscapeComponent) == 0x0007B0, "Wrong size on ULandscapeComponent");
static_assert(offsetof(ULandscapeComponent, SectionBaseX) == 0x0005C0, "Member 'ULandscapeComponent::SectionBaseX' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, SectionBaseY) == 0x0005C4, "Member 'ULandscapeComponent::SectionBaseY' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, ComponentSizeQuads) == 0x0005C8, "Member 'ULandscapeComponent::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, SubsectionSizeQuads) == 0x0005CC, "Member 'ULandscapeComponent::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, NumSubsections) == 0x0005D0, "Member 'ULandscapeComponent::NumSubsections' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, OverrideMaterial) == 0x0005D8, "Member 'ULandscapeComponent::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, OverrideHoleMaterial) == 0x0005E0, "Member 'ULandscapeComponent::OverrideHoleMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MaterialInstances) == 0x0005E8, "Member 'ULandscapeComponent::MaterialInstances' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MaterialInstancesDynamic) == 0x0005F8, "Member 'ULandscapeComponent::MaterialInstancesDynamic' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, LODIndexToMaterialIndex) == 0x000608, "Member 'ULandscapeComponent::LODIndexToMaterialIndex' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, XYOffsetmapTexture) == 0x000618, "Member 'ULandscapeComponent::XYOffsetmapTexture' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapScaleBias) == 0x000620, "Member 'ULandscapeComponent::WeightmapScaleBias' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapSubsectionOffset) == 0x000640, "Member 'ULandscapeComponent::WeightmapSubsectionOffset' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, HeightmapScaleBias) == 0x000650, "Member 'ULandscapeComponent::HeightmapScaleBias' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, CachedLocalBox) == 0x000670, "Member 'ULandscapeComponent::CachedLocalBox' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, CollisionComponentRef) == 0x0006A8, "Member 'ULandscapeComponent::CollisionComponentRef' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, bUserTriggeredChangeRequested) == 0x0006B0, "Member 'ULandscapeComponent::bUserTriggeredChangeRequested' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, bNaniteActive) == 0x0006B1, "Member 'ULandscapeComponent::bNaniteActive' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, HeightmapTexture) == 0x0006B8, "Member 'ULandscapeComponent::HeightmapTexture' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapLayerAllocations) == 0x0006C0, "Member 'ULandscapeComponent::WeightmapLayerAllocations' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, WeightmapTextures) == 0x0006D0, "Member 'ULandscapeComponent::WeightmapTextures' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, PerLODOverrideMaterials) == 0x0006E0, "Member 'ULandscapeComponent::PerLODOverrideMaterials' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MapBuildDataId) == 0x0006F0, "Member 'ULandscapeComponent::MapBuildDataId' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, CollisionMipLevel) == 0x000700, "Member 'ULandscapeComponent::CollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, SimpleCollisionMipLevel) == 0x000704, "Member 'ULandscapeComponent::SimpleCollisionMipLevel' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, NegativeZBoundsExtension) == 0x000708, "Member 'ULandscapeComponent::NegativeZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, PositiveZBoundsExtension) == 0x00070C, "Member 'ULandscapeComponent::PositiveZBoundsExtension' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, StaticLightingResolution) == 0x000710, "Member 'ULandscapeComponent::StaticLightingResolution' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, ForcedLOD) == 0x000714, "Member 'ULandscapeComponent::ForcedLOD' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, LODBias) == 0x000718, "Member 'ULandscapeComponent::LODBias' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, StateId) == 0x00071C, "Member 'ULandscapeComponent::StateId' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileMaterialInterface) == 0x000750, "Member 'ULandscapeComponent::MobileMaterialInterface' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileMaterialInterfaces) == 0x000758, "Member 'ULandscapeComponent::MobileMaterialInterfaces' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileWeightmapTextures) == 0x000768, "Member 'ULandscapeComponent::MobileWeightmapTextures' has a wrong offset!");
static_assert(offsetof(ULandscapeComponent, MobileWeightmapLayerAllocations) == 0x000778, "Member 'ULandscapeComponent::MobileWeightmapLayerAllocations' has a wrong offset!");

// Class Landscape.LandscapeGizmoRenderComponent
// 0x0000 (0x05C0 - 0x05C0)
class ULandscapeGizmoRenderComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGizmoRenderComponent">();
	}
	static class ULandscapeGizmoRenderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeGizmoRenderComponent>();
	}
};
static_assert(alignof(ULandscapeGizmoRenderComponent) == 0x000010, "Wrong alignment on ULandscapeGizmoRenderComponent");
static_assert(sizeof(ULandscapeGizmoRenderComponent) == 0x0005C0, "Wrong size on ULandscapeGizmoRenderComponent");

// Class Landscape.LandscapeGrassType
// 0x0038 (0x0080 - 0x0048)
class ULandscapeGrassType final : public UObject
{
public:
	TArray<struct FGrassVariety>                  GrassVarieties;                                    // 0x0048(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bEnableDensityScaling : 1;                         // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            GrassMesh;                                         // 0x0060(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrassDensity;                                      // 0x0068(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlacementJitter;                                   // 0x006C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCullDistance;                                 // 0x0070(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndCullDistance;                                   // 0x0074(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomRotation;                                    // 0x0078(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignToSurface;                                    // 0x0079(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeGrassType">();
	}
	static class ULandscapeGrassType* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeGrassType>();
	}
};
static_assert(alignof(ULandscapeGrassType) == 0x000008, "Wrong alignment on ULandscapeGrassType");
static_assert(sizeof(ULandscapeGrassType) == 0x000080, "Wrong size on ULandscapeGrassType");
static_assert(offsetof(ULandscapeGrassType, GrassVarieties) == 0x000048, "Member 'ULandscapeGrassType::GrassVarieties' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, GrassMesh) == 0x000060, "Member 'ULandscapeGrassType::GrassMesh' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, GrassDensity) == 0x000068, "Member 'ULandscapeGrassType::GrassDensity' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, PlacementJitter) == 0x00006C, "Member 'ULandscapeGrassType::PlacementJitter' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, StartCullDistance) == 0x000070, "Member 'ULandscapeGrassType::StartCullDistance' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, EndCullDistance) == 0x000074, "Member 'ULandscapeGrassType::EndCullDistance' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, RandomRotation) == 0x000078, "Member 'ULandscapeGrassType::RandomRotation' has a wrong offset!");
static_assert(offsetof(ULandscapeGrassType, AlignToSurface) == 0x000079, "Member 'ULandscapeGrassType::AlignToSurface' has a wrong offset!");

// Class Landscape.LandscapeHeightfieldCollisionComponent
// 0x0110 (0x06D0 - 0x05C0)
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	TArray<class ULandscapeLayerInfoObject*>      ComponentLayerInfos;                               // 0x05C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         SectionBaseX;                                      // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionBaseY;                                      // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CollisionSizeQuads;                                // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionScale;                                    // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleCollisionSizeQuads;                          // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 CollisionQuadFlags;                                // 0x05E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  HeightfieldGuid;                                   // 0x05F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CachedLocalBox;                                    // 0x0608(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ULandscapeComponent*                    RenderComponentRef;                                // 0x0640(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x18];                                     // 0x0648(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              CookedPhysicalMaterials;                           // 0x0660(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_670[0x60];                                     // 0x0670(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ULandscapeComponent* GetRenderComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeHeightfieldCollisionComponent">();
	}
	static class ULandscapeHeightfieldCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeHeightfieldCollisionComponent>();
	}
};
static_assert(alignof(ULandscapeHeightfieldCollisionComponent) == 0x000010, "Wrong alignment on ULandscapeHeightfieldCollisionComponent");
static_assert(sizeof(ULandscapeHeightfieldCollisionComponent) == 0x0006D0, "Wrong size on ULandscapeHeightfieldCollisionComponent");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos) == 0x0005C0, "Member 'ULandscapeHeightfieldCollisionComponent::ComponentLayerInfos' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, SectionBaseX) == 0x0005D0, "Member 'ULandscapeHeightfieldCollisionComponent::SectionBaseX' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, SectionBaseY) == 0x0005D4, "Member 'ULandscapeHeightfieldCollisionComponent::SectionBaseY' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads) == 0x0005D8, "Member 'ULandscapeHeightfieldCollisionComponent::CollisionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CollisionScale) == 0x0005DC, "Member 'ULandscapeHeightfieldCollisionComponent::CollisionScale' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads) == 0x0005E0, "Member 'ULandscapeHeightfieldCollisionComponent::SimpleCollisionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags) == 0x0005E8, "Member 'ULandscapeHeightfieldCollisionComponent::CollisionQuadFlags' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, HeightfieldGuid) == 0x0005F8, "Member 'ULandscapeHeightfieldCollisionComponent::HeightfieldGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CachedLocalBox) == 0x000608, "Member 'ULandscapeHeightfieldCollisionComponent::CachedLocalBox' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, RenderComponentRef) == 0x000640, "Member 'ULandscapeHeightfieldCollisionComponent::RenderComponentRef' has a wrong offset!");
static_assert(offsetof(ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials) == 0x000660, "Member 'ULandscapeHeightfieldCollisionComponent::CookedPhysicalMaterials' has a wrong offset!");

// Class Landscape.LandscapeLayerInfoObject
// 0x0028 (0x0070 - 0x0048)
class ULandscapeLayerInfoObject final : public UObject
{
public:
	class FName                                   LayerName;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysMaterial;                                      // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hardness;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LayerUsageDebugColor;                              // 0x005C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeLayerInfoObject">();
	}
	static class ULandscapeLayerInfoObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeLayerInfoObject>();
	}
};
static_assert(alignof(ULandscapeLayerInfoObject) == 0x000008, "Wrong alignment on ULandscapeLayerInfoObject");
static_assert(sizeof(ULandscapeLayerInfoObject) == 0x000070, "Wrong size on ULandscapeLayerInfoObject");
static_assert(offsetof(ULandscapeLayerInfoObject, LayerName) == 0x000048, "Member 'ULandscapeLayerInfoObject::LayerName' has a wrong offset!");
static_assert(offsetof(ULandscapeLayerInfoObject, PhysMaterial) == 0x000050, "Member 'ULandscapeLayerInfoObject::PhysMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeLayerInfoObject, Hardness) == 0x000058, "Member 'ULandscapeLayerInfoObject::Hardness' has a wrong offset!");
static_assert(offsetof(ULandscapeLayerInfoObject, LayerUsageDebugColor) == 0x00005C, "Member 'ULandscapeLayerInfoObject::LayerUsageDebugColor' has a wrong offset!");

// Class Landscape.LandscapeMaterialInstanceConstant
// 0x0018 (0x0288 - 0x0270)
class ULandscapeMaterialInstanceConstant final : public UMaterialInstanceConstant
{
public:
	TArray<struct FLandscapeMaterialTextureStreamingInfo> TextureStreamingInfo;                              // 0x0270(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bIsLayerThumbnail : 1;                             // 0x0280(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableTessellation : 1;                          // 0x0280(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMobile : 1;                                       // 0x0280(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEditorToolUsage : 1;                              // 0x0280(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMaterialInstanceConstant">();
	}
	static class ULandscapeMaterialInstanceConstant* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeMaterialInstanceConstant>();
	}
};
static_assert(alignof(ULandscapeMaterialInstanceConstant) == 0x000008, "Wrong alignment on ULandscapeMaterialInstanceConstant");
static_assert(sizeof(ULandscapeMaterialInstanceConstant) == 0x000288, "Wrong size on ULandscapeMaterialInstanceConstant");
static_assert(offsetof(ULandscapeMaterialInstanceConstant, TextureStreamingInfo) == 0x000270, "Member 'ULandscapeMaterialInstanceConstant::TextureStreamingInfo' has a wrong offset!");

// Class Landscape.LandscapeMeshCollisionComponent
// 0x0020 (0x06F0 - 0x06D0)
class ULandscapeMeshCollisionComponent final : public ULandscapeHeightfieldCollisionComponent
{
public:
	struct FGuid                                  MeshGuid;                                          // 0x06D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E0[0x10];                                     // 0x06E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMeshCollisionComponent">();
	}
	static class ULandscapeMeshCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeMeshCollisionComponent>();
	}
};
static_assert(alignof(ULandscapeMeshCollisionComponent) == 0x000010, "Wrong alignment on ULandscapeMeshCollisionComponent");
static_assert(sizeof(ULandscapeMeshCollisionComponent) == 0x0006F0, "Wrong size on ULandscapeMeshCollisionComponent");
static_assert(offsetof(ULandscapeMeshCollisionComponent, MeshGuid) == 0x0006D0, "Member 'ULandscapeMeshCollisionComponent::MeshGuid' has a wrong offset!");

// Class Landscape.LandscapeMeshProxyActor
// 0x0008 (0x0350 - 0x0348)
class ALandscapeMeshProxyActor final : public AActor
{
public:
	class ULandscapeMeshProxyComponent*           LandscapeMeshProxyComponent;                       // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMeshProxyActor">();
	}
	static class ALandscapeMeshProxyActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeMeshProxyActor>();
	}
};
static_assert(alignof(ALandscapeMeshProxyActor) == 0x000008, "Wrong alignment on ALandscapeMeshProxyActor");
static_assert(sizeof(ALandscapeMeshProxyActor) == 0x000350, "Wrong size on ALandscapeMeshProxyActor");
static_assert(offsetof(ALandscapeMeshProxyActor, LandscapeMeshProxyComponent) == 0x000348, "Member 'ALandscapeMeshProxyActor::LandscapeMeshProxyComponent' has a wrong offset!");

// Class Landscape.LandscapeMeshProxyComponent
// 0x0070 (0x06F0 - 0x0680)
class ULandscapeMeshProxyComponent final : public UStaticMeshComponent
{
public:
	struct FGuid                                  LandscapeGuid;                                     // 0x0680(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FIntPoint>                      ProxyComponentBases;                               // 0x0690(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        ProxyComponentCentersObjectSpace;                  // 0x06A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FVector                                ComponentXVectorObjectSpace;                       // 0x06B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ComponentYVectorObjectSpace;                       // 0x06C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ComponentResolution;                               // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          ProxyLOD;                                          // 0x06E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E5[0x3];                                      // 0x06E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        LODGroupKey;                                       // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeMeshProxyComponent">();
	}
	static class ULandscapeMeshProxyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeMeshProxyComponent>();
	}
};
static_assert(alignof(ULandscapeMeshProxyComponent) == 0x000010, "Wrong alignment on ULandscapeMeshProxyComponent");
static_assert(sizeof(ULandscapeMeshProxyComponent) == 0x0006F0, "Wrong size on ULandscapeMeshProxyComponent");
static_assert(offsetof(ULandscapeMeshProxyComponent, LandscapeGuid) == 0x000680, "Member 'ULandscapeMeshProxyComponent::LandscapeGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ProxyComponentBases) == 0x000690, "Member 'ULandscapeMeshProxyComponent::ProxyComponentBases' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ProxyComponentCentersObjectSpace) == 0x0006A0, "Member 'ULandscapeMeshProxyComponent::ProxyComponentCentersObjectSpace' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ComponentXVectorObjectSpace) == 0x0006B0, "Member 'ULandscapeMeshProxyComponent::ComponentXVectorObjectSpace' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ComponentYVectorObjectSpace) == 0x0006C8, "Member 'ULandscapeMeshProxyComponent::ComponentYVectorObjectSpace' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ComponentResolution) == 0x0006E0, "Member 'ULandscapeMeshProxyComponent::ComponentResolution' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, ProxyLOD) == 0x0006E4, "Member 'ULandscapeMeshProxyComponent::ProxyLOD' has a wrong offset!");
static_assert(offsetof(ULandscapeMeshProxyComponent, LODGroupKey) == 0x0006E8, "Member 'ULandscapeMeshProxyComponent::LODGroupKey' has a wrong offset!");

// Class Landscape.LandscapeSettings
// 0x0070 (0x00C8 - 0x0058)
class ULandscapeSettings final : public UDeveloperSettings
{
public:
	int32                                         MaxNumberOfLayers;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxComponents;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxImageImportCacheSizeMegaBytes;                  // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaintStrengthGamma;                                // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisablePaintingStartupSlowdown;                   // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeDirtyingMode                        LandscapeDirtyingMode;                             // 0x0069(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SideResolutionLimit;                               // 0x006C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      DefaultLandscapeMaterial;                          // 0x0070(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class ULandscapeLayerInfoObject> DefaultLayerInfoObject;                            // 0x0098(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HLODMaxTextureSize;                                // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRestrictiveMode;                                  // 0x00C4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSettings">();
	}
	static class ULandscapeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSettings>();
	}
};
static_assert(alignof(ULandscapeSettings) == 0x000008, "Wrong alignment on ULandscapeSettings");
static_assert(sizeof(ULandscapeSettings) == 0x0000C8, "Wrong size on ULandscapeSettings");
static_assert(offsetof(ULandscapeSettings, MaxNumberOfLayers) == 0x000058, "Member 'ULandscapeSettings::MaxNumberOfLayers' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, MaxComponents) == 0x00005C, "Member 'ULandscapeSettings::MaxComponents' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, MaxImageImportCacheSizeMegaBytes) == 0x000060, "Member 'ULandscapeSettings::MaxImageImportCacheSizeMegaBytes' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, PaintStrengthGamma) == 0x000064, "Member 'ULandscapeSettings::PaintStrengthGamma' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, bDisablePaintingStartupSlowdown) == 0x000068, "Member 'ULandscapeSettings::bDisablePaintingStartupSlowdown' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, LandscapeDirtyingMode) == 0x000069, "Member 'ULandscapeSettings::LandscapeDirtyingMode' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, SideResolutionLimit) == 0x00006C, "Member 'ULandscapeSettings::SideResolutionLimit' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, DefaultLandscapeMaterial) == 0x000070, "Member 'ULandscapeSettings::DefaultLandscapeMaterial' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, DefaultLayerInfoObject) == 0x000098, "Member 'ULandscapeSettings::DefaultLayerInfoObject' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, HLODMaxTextureSize) == 0x0000C0, "Member 'ULandscapeSettings::HLODMaxTextureSize' has a wrong offset!");
static_assert(offsetof(ULandscapeSettings, bRestrictiveMode) == 0x0000C4, "Member 'ULandscapeSettings::bRestrictiveMode' has a wrong offset!");

// Class Landscape.LandscapeSplinesComponent
// 0x0030 (0x05F0 - 0x05C0)
class ULandscapeSplinesComponent final : public UPrimitiveComponent
{
public:
	TArray<class ULandscapeSplineControlPoint*>   ControlPoints;                                     // 0x05C0(0x0010)(ZeroConstructor, Protected, TextExportTransient, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class ULandscapeSplineSegment*>        Segments;                                          // 0x05D0(0x0010)(ZeroConstructor, Protected, TextExportTransient, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UMeshComponent*>                 CookedForeignMeshComponents;                       // 0x05E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, TextExportTransient, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	TArray<class USplineMeshComponent*> GetSplineMeshComponents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplinesComponent">();
	}
	static class ULandscapeSplinesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSplinesComponent>();
	}
};
static_assert(alignof(ULandscapeSplinesComponent) == 0x000010, "Wrong alignment on ULandscapeSplinesComponent");
static_assert(sizeof(ULandscapeSplinesComponent) == 0x0005F0, "Wrong size on ULandscapeSplinesComponent");
static_assert(offsetof(ULandscapeSplinesComponent, ControlPoints) == 0x0005C0, "Member 'ULandscapeSplinesComponent::ControlPoints' has a wrong offset!");
static_assert(offsetof(ULandscapeSplinesComponent, Segments) == 0x0005D0, "Member 'ULandscapeSplinesComponent::Segments' has a wrong offset!");
static_assert(offsetof(ULandscapeSplinesComponent, CookedForeignMeshComponents) == 0x0005E0, "Member 'ULandscapeSplinesComponent::CookedForeignMeshComponents' has a wrong offset!");

// Class Landscape.LandscapeSplineControlPoint
// 0x00B0 (0x00F8 - 0x0048)
class ULandscapeSplineControlPoint final : public UObject
{
public:
	struct FVector                                Location;                                          // 0x0048(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerWidthRatio;                                   // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideFalloff;                                       // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftSideFalloffFactor;                             // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightSideFalloffFactor;                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftSideLayerFalloffFactor;                        // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightSideLayerFalloffFactor;                       // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFalloff;                                        // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLandscapeSplineConnection>     ConnectedSegments;                                 // 0x0098(0x0010)(ZeroConstructor, TextExportTransient, NativeAccessSpecifierPublic)
	TArray<struct FLandscapeSplineInterpPoint>    Points;                                            // 0x00A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x00B8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UControlPointMeshComponent*             LocalMeshComponent;                                // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, TextExportTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineControlPoint">();
	}
	static class ULandscapeSplineControlPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSplineControlPoint>();
	}
};
static_assert(alignof(ULandscapeSplineControlPoint) == 0x000008, "Wrong alignment on ULandscapeSplineControlPoint");
static_assert(sizeof(ULandscapeSplineControlPoint) == 0x0000F8, "Wrong size on ULandscapeSplineControlPoint");
static_assert(offsetof(ULandscapeSplineControlPoint, Location) == 0x000048, "Member 'ULandscapeSplineControlPoint::Location' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Rotation) == 0x000060, "Member 'ULandscapeSplineControlPoint::Rotation' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Width) == 0x000078, "Member 'ULandscapeSplineControlPoint::Width' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, LayerWidthRatio) == 0x00007C, "Member 'ULandscapeSplineControlPoint::LayerWidthRatio' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, SideFalloff) == 0x000080, "Member 'ULandscapeSplineControlPoint::SideFalloff' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, LeftSideFalloffFactor) == 0x000084, "Member 'ULandscapeSplineControlPoint::LeftSideFalloffFactor' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, RightSideFalloffFactor) == 0x000088, "Member 'ULandscapeSplineControlPoint::RightSideFalloffFactor' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor) == 0x00008C, "Member 'ULandscapeSplineControlPoint::LeftSideLayerFalloffFactor' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, RightSideLayerFalloffFactor) == 0x000090, "Member 'ULandscapeSplineControlPoint::RightSideLayerFalloffFactor' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, EndFalloff) == 0x000094, "Member 'ULandscapeSplineControlPoint::EndFalloff' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, ConnectedSegments) == 0x000098, "Member 'ULandscapeSplineControlPoint::ConnectedSegments' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Points) == 0x0000A8, "Member 'ULandscapeSplineControlPoint::Points' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, Bounds) == 0x0000B8, "Member 'ULandscapeSplineControlPoint::Bounds' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineControlPoint, LocalMeshComponent) == 0x0000F0, "Member 'ULandscapeSplineControlPoint::LocalMeshComponent' has a wrong offset!");

// Class Landscape.LandscapeSplineSegment
// 0x00A0 (0x00E8 - 0x0048)
class ULandscapeSplineSegment final : public UObject
{
public:
	struct FLandscapeSplineSegmentConnection      Connections[0x2];                                  // 0x0048(0x0018)(Edit, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     SplineInfo;                                        // 0x0078(0x0018)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLandscapeSplineInterpPoint>    Points;                                            // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x00A0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<class USplineMeshComponent*>           LocalMeshComponents;                               // 0x00D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, TextExportTransient, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineSegment">();
	}
	static class ULandscapeSplineSegment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSplineSegment>();
	}
};
static_assert(alignof(ULandscapeSplineSegment) == 0x000008, "Wrong alignment on ULandscapeSplineSegment");
static_assert(sizeof(ULandscapeSplineSegment) == 0x0000E8, "Wrong size on ULandscapeSplineSegment");
static_assert(offsetof(ULandscapeSplineSegment, Connections) == 0x000048, "Member 'ULandscapeSplineSegment::Connections' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, SplineInfo) == 0x000078, "Member 'ULandscapeSplineSegment::SplineInfo' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, Points) == 0x000090, "Member 'ULandscapeSplineSegment::Points' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, Bounds) == 0x0000A0, "Member 'ULandscapeSplineSegment::Bounds' has a wrong offset!");
static_assert(offsetof(ULandscapeSplineSegment, LocalMeshComponents) == 0x0000D8, "Member 'ULandscapeSplineSegment::LocalMeshComponents' has a wrong offset!");

// Class Landscape.LandscapeStreamingProxy
// 0x0078 (0x0748 - 0x06D0)
class ALandscapeStreamingProxy final : public ALandscapeProxy
{
public:
	TSoftObjectPtr<class ALandscape>              LandscapeActorRef;                                 // 0x06D0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class FString>                           OverriddenSharedProperties;                        // 0x06F8(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeStreamingProxy">();
	}
	static class ALandscapeStreamingProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeStreamingProxy>();
	}
};
static_assert(alignof(ALandscapeStreamingProxy) == 0x000008, "Wrong alignment on ALandscapeStreamingProxy");
static_assert(sizeof(ALandscapeStreamingProxy) == 0x000748, "Wrong size on ALandscapeStreamingProxy");
static_assert(offsetof(ALandscapeStreamingProxy, LandscapeActorRef) == 0x0006D0, "Member 'ALandscapeStreamingProxy::LandscapeActorRef' has a wrong offset!");
static_assert(offsetof(ALandscapeStreamingProxy, OverriddenSharedProperties) == 0x0006F8, "Member 'ALandscapeStreamingProxy::OverriddenSharedProperties' has a wrong offset!");

// Class Landscape.LandscapeWeightmapUsage
// 0x0030 (0x0078 - 0x0048)
class ULandscapeWeightmapUsage final : public UObject
{
public:
	class ULandscapeComponent*                    ChannelUsage[0x4];                                 // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LayerGuid;                                         // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeWeightmapUsage">();
	}
	static class ULandscapeWeightmapUsage* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeWeightmapUsage>();
	}
};
static_assert(alignof(ULandscapeWeightmapUsage) == 0x000008, "Wrong alignment on ULandscapeWeightmapUsage");
static_assert(sizeof(ULandscapeWeightmapUsage) == 0x000078, "Wrong size on ULandscapeWeightmapUsage");
static_assert(offsetof(ULandscapeWeightmapUsage, ChannelUsage) == 0x000048, "Member 'ULandscapeWeightmapUsage::ChannelUsage' has a wrong offset!");
static_assert(offsetof(ULandscapeWeightmapUsage, LayerGuid) == 0x000068, "Member 'ULandscapeWeightmapUsage::LayerGuid' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeGrassOutput
// 0x0010 (0x00E0 - 0x00D0)
class UMaterialExpressionLandscapeGrassOutput final : public UMaterialExpressionCustomOutput
{
public:
	TArray<struct FGrassInput>                    GrassTypes;                                        // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeGrassOutput">();
	}
	static class UMaterialExpressionLandscapeGrassOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeGrassOutput>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeGrassOutput) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeGrassOutput");
static_assert(sizeof(UMaterialExpressionLandscapeGrassOutput) == 0x0000E0, "Wrong size on UMaterialExpressionLandscapeGrassOutput");
static_assert(offsetof(UMaterialExpressionLandscapeGrassOutput, GrassTypes) == 0x0000D0, "Member 'UMaterialExpressionLandscapeGrassOutput::GrassTypes' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerBlend
// 0x0010 (0x00E0 - 0x00D0)
class UMaterialExpressionLandscapeLayerBlend final : public UMaterialExpression
{
public:
	TArray<struct FLayerBlendInput>               Layers;                                            // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerBlend">();
	}
	static class UMaterialExpressionLandscapeLayerBlend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerBlend>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerBlend) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerBlend");
static_assert(sizeof(UMaterialExpressionLandscapeLayerBlend) == 0x0000E0, "Wrong size on UMaterialExpressionLandscapeLayerBlend");
static_assert(offsetof(UMaterialExpressionLandscapeLayerBlend, Layers) == 0x0000D0, "Member 'UMaterialExpressionLandscapeLayerBlend::Layers' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerCoords
// 0x0018 (0x00E8 - 0x00D0)
class UMaterialExpressionLandscapeLayerCoords final : public UMaterialExpression
{
public:
	ETerrainCoordMappingType                      MappingType;                                       // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeCustomizedCoordType                 CustomUVType;                                      // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MappingScale;                                      // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingRotation;                                   // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingPanU;                                       // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MappingPanV;                                       // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerCoords">();
	}
	static class UMaterialExpressionLandscapeLayerCoords* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerCoords>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerCoords) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerCoords");
static_assert(sizeof(UMaterialExpressionLandscapeLayerCoords) == 0x0000E8, "Wrong size on UMaterialExpressionLandscapeLayerCoords");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingType) == 0x0000D0, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, CustomUVType) == 0x0000D1, "Member 'UMaterialExpressionLandscapeLayerCoords::CustomUVType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingScale) == 0x0000D4, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingScale' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingRotation) == 0x0000D8, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingRotation' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingPanU) == 0x0000DC, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingPanU' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerCoords, MappingPanV) == 0x0000E0, "Member 'UMaterialExpressionLandscapeLayerCoords::MappingPanV' has a wrong offset!");

// Class Landscape.ControlPointMeshActor
// 0x0008 (0x0350 - 0x0348)
class AControlPointMeshActor final : public AActor
{
public:
	class UControlPointMeshComponent*             ControlPointMeshComponent;                         // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlPointMeshActor">();
	}
	static class AControlPointMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AControlPointMeshActor>();
	}
};
static_assert(alignof(AControlPointMeshActor) == 0x000008, "Wrong alignment on AControlPointMeshActor");
static_assert(sizeof(AControlPointMeshActor) == 0x000350, "Wrong size on AControlPointMeshActor");
static_assert(offsetof(AControlPointMeshActor, ControlPointMeshComponent) == 0x000348, "Member 'AControlPointMeshActor::ControlPointMeshComponent' has a wrong offset!");

// Class Landscape.LandscapeBlueprintBrushBase
// 0x0000 (0x0348 - 0x0348)
class ALandscapeBlueprintBrushBase : public AActor
{
public:
	void GetBlueprintRenderDependencies(TArray<class UObject*>* OutStreamableAssets);
	void Initialize(const struct FTransform& InLandscapeTransform, const struct FIntPoint& InLandscapeSize, const struct FIntPoint& InLandscapeRenderTargetSize);
	class UTextureRenderTarget2D* Render(bool InIsHeightmap, class UTextureRenderTarget2D* InCombinedResult, const class FName& InWeightmapLayerName);
	class UTextureRenderTarget2D* RenderLayer(const struct FLandscapeBrushParameters& InParameters);
	void RequestLandscapeUpdate(bool bInUserTriggered);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeBlueprintBrushBase">();
	}
	static class ALandscapeBlueprintBrushBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeBlueprintBrushBase>();
	}
};
static_assert(alignof(ALandscapeBlueprintBrushBase) == 0x000008, "Wrong alignment on ALandscapeBlueprintBrushBase");
static_assert(sizeof(ALandscapeBlueprintBrushBase) == 0x000348, "Wrong size on ALandscapeBlueprintBrushBase");

// Class Landscape.LandscapeHLODBuilder
// 0x0000 (0x0048 - 0x0048)
class ULandscapeHLODBuilder final : public UHLODBuilder
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeHLODBuilder">();
	}
	static class ULandscapeHLODBuilder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeHLODBuilder>();
	}
};
static_assert(alignof(ULandscapeHLODBuilder) == 0x000008, "Wrong alignment on ULandscapeHLODBuilder");
static_assert(sizeof(ULandscapeHLODBuilder) == 0x000048, "Wrong size on ULandscapeHLODBuilder");

// Class Landscape.LandscapeInfo
// 0x0200 (0x0248 - 0x0048)
class ULandscapeInfo final : public UObject
{
public:
	TWeakObjectPtr<class ALandscape>              LandscapeActor;                                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LandscapeGuid;                                     // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentSizeQuads;                                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubsectionSizeQuads;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ComponentNumSubsections;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DrawScale;                                         // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0xB0];                                      // 0x0088(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ALandscapeStreamingProxy>> StreamingProxies;                                  // 0x0138(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x100];                                    // 0x0148(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeInfo">();
	}
	static class ULandscapeInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeInfo>();
	}
};
static_assert(alignof(ULandscapeInfo) == 0x000008, "Wrong alignment on ULandscapeInfo");
static_assert(sizeof(ULandscapeInfo) == 0x000248, "Wrong size on ULandscapeInfo");
static_assert(offsetof(ULandscapeInfo, LandscapeActor) == 0x000048, "Member 'ULandscapeInfo::LandscapeActor' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, LandscapeGuid) == 0x000050, "Member 'ULandscapeInfo::LandscapeGuid' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, ComponentSizeQuads) == 0x000060, "Member 'ULandscapeInfo::ComponentSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, SubsectionSizeQuads) == 0x000064, "Member 'ULandscapeInfo::SubsectionSizeQuads' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, ComponentNumSubsections) == 0x000068, "Member 'ULandscapeInfo::ComponentNumSubsections' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, DrawScale) == 0x000070, "Member 'ULandscapeInfo::DrawScale' has a wrong offset!");
static_assert(offsetof(ULandscapeInfo, StreamingProxies) == 0x000138, "Member 'ULandscapeInfo::StreamingProxies' has a wrong offset!");

// Class Landscape.LandscapeInfoMap
// 0x0058 (0x00A0 - 0x0048)
class ULandscapeInfoMap final : public UObject
{
public:
	uint8                                         Pad_48[0x58];                                      // 0x0048(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeInfoMap">();
	}
	static class ULandscapeInfoMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeInfoMap>();
	}
};
static_assert(alignof(ULandscapeInfoMap) == 0x000008, "Wrong alignment on ULandscapeInfoMap");
static_assert(sizeof(ULandscapeInfoMap) == 0x0000A0, "Wrong size on ULandscapeInfoMap");

// Class Landscape.LandscapeNaniteComponent
// 0x0020 (0x06A0 - 0x0680)
class ULandscapeNaniteComponent final : public UStaticMeshComponent
{
public:
	struct FGuid                                  ProxyContentId;                                    // 0x0680(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnabled;                                          // 0x0690(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_691[0xF];                                      // 0x0691(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeNaniteComponent">();
	}
	static class ULandscapeNaniteComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeNaniteComponent>();
	}
};
static_assert(alignof(ULandscapeNaniteComponent) == 0x000010, "Wrong alignment on ULandscapeNaniteComponent");
static_assert(sizeof(ULandscapeNaniteComponent) == 0x0006A0, "Wrong size on ULandscapeNaniteComponent");
static_assert(offsetof(ULandscapeNaniteComponent, ProxyContentId) == 0x000680, "Member 'ULandscapeNaniteComponent::ProxyContentId' has a wrong offset!");
static_assert(offsetof(ULandscapeNaniteComponent, bEnabled) == 0x000690, "Member 'ULandscapeNaniteComponent::bEnabled' has a wrong offset!");

// Class Landscape.LandscapeSplineActor
// 0x0018 (0x0360 - 0x0348)
class ALandscapeSplineActor final : public AActor
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LandscapeGuid;                                     // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineActor">();
	}
	static class ALandscapeSplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeSplineActor>();
	}
};
static_assert(alignof(ALandscapeSplineActor) == 0x000008, "Wrong alignment on ALandscapeSplineActor");
static_assert(sizeof(ALandscapeSplineActor) == 0x000360, "Wrong size on ALandscapeSplineActor");
static_assert(offsetof(ALandscapeSplineActor, LandscapeGuid) == 0x000350, "Member 'ALandscapeSplineActor::LandscapeGuid' has a wrong offset!");

// Class Landscape.LandscapeSplineMeshesActor
// 0x0010 (0x0358 - 0x0348)
class ALandscapeSplineMeshesActor final : public APartitionActor
{
public:
	TArray<class UStaticMeshComponent*>           StaticMeshComponents;                              // 0x0348(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSplineMeshesActor">();
	}
	static class ALandscapeSplineMeshesActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALandscapeSplineMeshesActor>();
	}
};
static_assert(alignof(ALandscapeSplineMeshesActor) == 0x000008, "Wrong alignment on ALandscapeSplineMeshesActor");
static_assert(sizeof(ALandscapeSplineMeshesActor) == 0x000358, "Wrong size on ALandscapeSplineMeshesActor");
static_assert(offsetof(ALandscapeSplineMeshesActor, StaticMeshComponents) == 0x000348, "Member 'ALandscapeSplineMeshesActor::StaticMeshComponents' has a wrong offset!");

// Class Landscape.LandscapeSubsystem
// 0x0020 (0x0080 - 0x0060)
class ULandscapeSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_60[0x20];                                      // 0x0060(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeSubsystem">();
	}
	static class ULandscapeSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeSubsystem>();
	}
};
static_assert(alignof(ULandscapeSubsystem) == 0x000008, "Wrong alignment on ULandscapeSubsystem");
static_assert(sizeof(ULandscapeSubsystem) == 0x000080, "Wrong size on ULandscapeSubsystem");

// Class Landscape.LandscapeTextureStorageProviderFactory
// 0x0038 (0x0080 - 0x0048)
class ULandscapeTextureStorageProviderFactory final : public UTextureAllMipDataProviderFactory
{
public:
	uint8                                         Pad_48[0x38];                                      // 0x0048(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LandscapeTextureStorageProviderFactory">();
	}
	static class ULandscapeTextureStorageProviderFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULandscapeTextureStorageProviderFactory>();
	}
};
static_assert(alignof(ULandscapeTextureStorageProviderFactory) == 0x000008, "Wrong alignment on ULandscapeTextureStorageProviderFactory");
static_assert(sizeof(ULandscapeTextureStorageProviderFactory) == 0x000080, "Wrong size on ULandscapeTextureStorageProviderFactory");

// Class Landscape.MaterialExpressionLandscapeLayerSample
// 0x0010 (0x00E0 - 0x00D0)
class UMaterialExpressionLandscapeLayerSample final : public UMaterialExpression
{
public:
	class FName                                   ParameterName;                                     // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewWeight;                                     // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerSample">();
	}
	static class UMaterialExpressionLandscapeLayerSample* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerSample>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerSample) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerSample");
static_assert(sizeof(UMaterialExpressionLandscapeLayerSample) == 0x0000E0, "Wrong size on UMaterialExpressionLandscapeLayerSample");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSample, ParameterName) == 0x0000D0, "Member 'UMaterialExpressionLandscapeLayerSample::ParameterName' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSample, PreviewWeight) == 0x0000D8, "Member 'UMaterialExpressionLandscapeLayerSample::PreviewWeight' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerSwitch
// 0x0060 (0x0130 - 0x00D0)
class UMaterialExpressionLandscapeLayerSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       LayerUsed;                                         // 0x00D0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       LayerNotUsed;                                      // 0x00F8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviewUsed : 1;                                   // 0x0128(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerSwitch">();
	}
	static class UMaterialExpressionLandscapeLayerSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerSwitch>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerSwitch) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerSwitch");
static_assert(sizeof(UMaterialExpressionLandscapeLayerSwitch) == 0x000130, "Wrong size on UMaterialExpressionLandscapeLayerSwitch");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, LayerUsed) == 0x0000D0, "Member 'UMaterialExpressionLandscapeLayerSwitch::LayerUsed' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed) == 0x0000F8, "Member 'UMaterialExpressionLandscapeLayerSwitch::LayerNotUsed' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerSwitch, ParameterName) == 0x000120, "Member 'UMaterialExpressionLandscapeLayerSwitch::ParameterName' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeLayerWeight
// 0x0078 (0x0148 - 0x00D0)
class UMaterialExpressionLandscapeLayerWeight final : public UMaterialExpression
{
public:
	struct FExpressionInput                       base;                                              // 0x00D0(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Layer;                                             // 0x00F8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewWeight;                                     // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstBase;                                         // 0x0130(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeLayerWeight">();
	}
	static class UMaterialExpressionLandscapeLayerWeight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeLayerWeight>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeLayerWeight) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeLayerWeight");
static_assert(sizeof(UMaterialExpressionLandscapeLayerWeight) == 0x000148, "Wrong size on UMaterialExpressionLandscapeLayerWeight");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, base) == 0x0000D0, "Member 'UMaterialExpressionLandscapeLayerWeight::base' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, Layer) == 0x0000F8, "Member 'UMaterialExpressionLandscapeLayerWeight::Layer' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, ParameterName) == 0x000120, "Member 'UMaterialExpressionLandscapeLayerWeight::ParameterName' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, PreviewWeight) == 0x000128, "Member 'UMaterialExpressionLandscapeLayerWeight::PreviewWeight' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionLandscapeLayerWeight, ConstBase) == 0x000130, "Member 'UMaterialExpressionLandscapeLayerWeight::ConstBase' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapePhysicalMaterialOutput
// 0x0010 (0x00E0 - 0x00D0)
class UMaterialExpressionLandscapePhysicalMaterialOutput final : public UMaterialExpressionCustomOutput
{
public:
	TArray<struct FPhysicalMaterialInput>         Inputs;                                            // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapePhysicalMaterialOutput">();
	}
	static class UMaterialExpressionLandscapePhysicalMaterialOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapePhysicalMaterialOutput>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapePhysicalMaterialOutput) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapePhysicalMaterialOutput");
static_assert(sizeof(UMaterialExpressionLandscapePhysicalMaterialOutput) == 0x0000E0, "Wrong size on UMaterialExpressionLandscapePhysicalMaterialOutput");
static_assert(offsetof(UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs) == 0x0000D0, "Member 'UMaterialExpressionLandscapePhysicalMaterialOutput::Inputs' has a wrong offset!");

// Class Landscape.MaterialExpressionLandscapeVisibilityMask
// 0x0000 (0x00D0 - 0x00D0)
class UMaterialExpressionLandscapeVisibilityMask final : public UMaterialExpression
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionLandscapeVisibilityMask">();
	}
	static class UMaterialExpressionLandscapeVisibilityMask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionLandscapeVisibilityMask>();
	}
};
static_assert(alignof(UMaterialExpressionLandscapeVisibilityMask) == 0x000008, "Wrong alignment on UMaterialExpressionLandscapeVisibilityMask");
static_assert(sizeof(UMaterialExpressionLandscapeVisibilityMask) == 0x0000D0, "Wrong size on UMaterialExpressionLandscapeVisibilityMask");

}

