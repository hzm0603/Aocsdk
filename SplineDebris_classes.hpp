#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineDebris

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PCG_structs.hpp"
#include "PCG_classes.hpp"
#include "Engine_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SplineDebris.SplineDebris_C
// 0x00D0 (0x0158 - 0x0088)
class USplineDebris_C final : public UPCGBlueprintElement
{
public:
	class UPCGSpatialData*                        Spatial_Data;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Mesh_Attribute_Name;                               // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Random_Stream;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	int32                                         Random_Stream_Seed;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Random_Mesh_Paths;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPCGPoint>                      All_Points;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FPCGPoint>                      Out_Points;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bUseSecondMeshList;                                // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<double, struct FAoCSplineDebrisEntry>    Density_Map;                                       // 0x00E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAoCSplineDebrisEntry>          In_Debris_Objects;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPCGMetadata*                           MetaData;                                          // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESplineCoordinateSpace                        Coordinate_Space;                                  // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Spline_Index;                                      // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteWithContext(struct FPCGContext& InContext, const struct FPCGDataCollection& Input, struct FPCGDataCollection* Output);

	class FName NodeTitleOverride() const;
	bool PointLoopBody(const struct FPCGContext& InContext, const class UPCGPointData* InData, const struct FPCGPoint& InPoint, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SplineDebris_C">();
	}
	static class USplineDebris_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineDebris_C>();
	}
};
static_assert(alignof(USplineDebris_C) == 0x000008, "Wrong alignment on USplineDebris_C");
static_assert(sizeof(USplineDebris_C) == 0x000158, "Wrong size on USplineDebris_C");
static_assert(offsetof(USplineDebris_C, Spatial_Data) == 0x000088, "Member 'USplineDebris_C::Spatial_Data' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Mesh_Attribute_Name) == 0x000090, "Member 'USplineDebris_C::Mesh_Attribute_Name' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Random_Stream) == 0x000098, "Member 'USplineDebris_C::Random_Stream' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Random_Stream_Seed) == 0x0000A0, "Member 'USplineDebris_C::Random_Stream_Seed' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Random_Mesh_Paths) == 0x0000A8, "Member 'USplineDebris_C::Random_Mesh_Paths' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, All_Points) == 0x0000B8, "Member 'USplineDebris_C::All_Points' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Out_Points) == 0x0000C8, "Member 'USplineDebris_C::Out_Points' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, bUseSecondMeshList) == 0x0000D8, "Member 'USplineDebris_C::bUseSecondMeshList' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Density_Map) == 0x0000E0, "Member 'USplineDebris_C::Density_Map' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, In_Debris_Objects) == 0x000130, "Member 'USplineDebris_C::In_Debris_Objects' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, MetaData) == 0x000140, "Member 'USplineDebris_C::MetaData' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Spline) == 0x000148, "Member 'USplineDebris_C::Spline' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Coordinate_Space) == 0x000150, "Member 'USplineDebris_C::Coordinate_Space' has a wrong offset!");
static_assert(offsetof(USplineDebris_C, Spline_Index) == 0x000154, "Member 'USplineDebris_C::Spline_Index' has a wrong offset!");

}

