#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IntrepidNet

#include "Basic.hpp"

#include "IntrepidNet_classes.hpp"
#include "IntrepidNet_parameters.hpp"


namespace SDK
{

// Function IntrepidNet.IntrepidNetDebugComponent.ClientTransferDataRPC
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// const struct FTimespan&                 TimePromotionTook                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetDebugComponent::ClientTransferDataRPC(const struct FTimespan& TimePromotionTook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "ClientTransferDataRPC");

	Params::IntrepidNetDebugComponent_ClientTransferDataRPC Parms{};

	Parms.TimePromotionTook = std::move(TimePromotionTook);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.HandleServerDataUpdated
// (Final, Native, Public)

void UIntrepidNetDebugComponent::HandleServerDataUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "HandleServerDataUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.OnPromotion
// (Native, Public)
// Parameters:
// bool                                    bWasProxy                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetDebugComponent::OnPromotion(bool bWasProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "OnPromotion");

	Params::IntrepidNetDebugComponent_OnPromotion Parms{};

	Parms.bWasProxy = bWasProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.OnServerDataChanged
// (Final, Native, Public)

void UIntrepidNetDebugComponent::OnServerDataChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "OnServerDataChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.ServerSplitServerCell
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ESubdivisionAxis                        SubdivisionAxis                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetDebugComponent::ServerSplitServerCell(ESubdivisionAxis SubdivisionAxis, float Value, bool bUseLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "ServerSplitServerCell");

	Params::IntrepidNetDebugComponent_ServerSplitServerCell Parms{};

	Parms.SubdivisionAxis = SubdivisionAxis;
	Parms.Value = Value;
	Parms.bUseLocation = bUseLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.SplitServerCell
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Axis                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SplitRatio                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetDebugComponent::SplitServerCell(const class FString& Axis, float SplitRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "SplitServerCell");

	Params::IntrepidNetDebugComponent_SplitServerCell Parms{};

	Parms.Axis = std::move(Axis);
	Parms.SplitRatio = SplitRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.SplitServerCellAt
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    Axis                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetDebugComponent::SplitServerCellAt(const class FString& Axis, float Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "SplitServerCellAt");

	Params::IntrepidNetDebugComponent_SplitServerCellAt Parms{};

	Parms.Axis = std::move(Axis);
	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetDebugComponent.IsDrawingServerRegions
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UIntrepidNetDebugComponent::IsDrawingServerRegions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetDebugComponent", "IsDrawingServerRegions");

	Params::IntrepidNetDebugComponent_IsDrawingServerRegions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IntrepidNet.IntrepidNetServerPackageMap.OnObjectDestroyed
// (Final, Native, Public)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetServerPackageMap::OnObjectDestroyed(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetServerPackageMap", "OnObjectDestroyed");

	Params::IntrepidNetServerPackageMap_OnObjectDestroyed Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.BuildAndShowCurrentConfiguration
// (Final, Native, Protected, BlueprintCallable)

void UIntrepidNetUtilitySubsystem::BuildAndShowCurrentConfiguration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "BuildAndShowCurrentConfiguration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.BuildServerGrid
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Extents                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetUtilitySubsystem::BuildServerGrid(const struct FVector& Origin, const struct FVector& Extents, int32 NumX, int32 NumY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "BuildServerGrid");

	Params::IntrepidNetUtilitySubsystem_BuildServerGrid Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Extents = std::move(Extents);
	Parms.NumX = NumX;
	Parms.NumY = NumY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.ClearRegionsToDraw
// (Final, Native, Protected, BlueprintCallable)

void UIntrepidNetUtilitySubsystem::ClearRegionsToDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "ClearRegionsToDraw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.GetIntrepidNetConfigProfiles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UIntrepidNetUtilitySubsystem::GetIntrepidNetConfigProfiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "GetIntrepidNetConfigProfiles");

	Params::IntrepidNetUtilitySubsystem_GetIntrepidNetConfigProfiles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.MakeIntrepidNetConfig
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldOrigin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             GridNodesX                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             GridNodesY                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           PlayerStartLocations                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UIntrepidNetUtilitySubsystem::MakeIntrepidNetConfig(const class FString& Name_0, const struct FVector& WorldOrigin, const struct FVector& WorldSize, const int32 GridNodesX, const int32 GridNodesY, const TArray<struct FVector>& PlayerStartLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "MakeIntrepidNetConfig");

	Params::IntrepidNetUtilitySubsystem_MakeIntrepidNetConfig Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.WorldOrigin = std::move(WorldOrigin);
	Parms.WorldSize = std::move(WorldSize);
	Parms.GridNodesX = GridNodesX;
	Parms.GridNodesY = GridNodesY;
	Parms.PlayerStartLocations = std::move(PlayerStartLocations);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.OnConfigUpdated
// (Final, Native, Protected)
// Parameters:
// const class FString&                    NewConfigFile                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIntrepidNetUtilitySubsystem::OnConfigUpdated(const class FString& NewConfigFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "OnConfigUpdated");

	Params::IntrepidNetUtilitySubsystem_OnConfigUpdated Parms{};

	Parms.NewConfigFile = std::move(NewConfigFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.ReadConfig
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntrepidNetConfigUnreal*        OutConfig                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// class FString*                          Error                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UIntrepidNetUtilitySubsystem::ReadConfig(const class FString& Filename, struct FIntrepidNetConfigUnreal* OutConfig, class FString* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "ReadConfig");

	Params::IntrepidNetUtilitySubsystem_ReadConfig Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutConfig != nullptr)
		*OutConfig = std::move(Parms.OutConfig);

	if (Error != nullptr)
		*Error = std::move(Parms.Error);

	return Parms.ReturnValue;
}


// Function IntrepidNet.IntrepidNetUtilitySubsystem.WriteConfig
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntrepidNetConfigUnreal&  Config                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString*                          Error                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UIntrepidNetUtilitySubsystem::WriteConfig(const class FString& Filename, const struct FIntrepidNetConfigUnreal& Config, class FString* Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidNetUtilitySubsystem", "WriteConfig");

	Params::IntrepidNetUtilitySubsystem_WriteConfig Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Error != nullptr)
		*Error = std::move(Parms.Error);

	return Parms.ReturnValue;
}


// Function IntrepidNet.IntrepidRepKeyComponent.MarkDirtyForReplication
// (Final, Native, Public, BlueprintCallable)

void UIntrepidRepKeyComponent::MarkDirtyForReplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidRepKeyComponent", "MarkDirtyForReplication");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function IntrepidNet.IntrepidRepKeyComponent.GetReplicationKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UIntrepidRepKeyComponent::GetReplicationKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IntrepidRepKeyComponent", "GetReplicationKey");

	Params::IntrepidRepKeyComponent_GetReplicationKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

