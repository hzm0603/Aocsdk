#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Intrepid

#include "Basic.hpp"

#include "Intrepid_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Intrepid.IntrepidSystem
// 0x0058 (0x00A0 - 0x0048)
class UIntrepidSystem : public UObject
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    WorkerClass;                                       // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntrepidSystemObject>          WorkersToTick;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntrepidSystemObject>          Objects;                                           // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidSystem">();
	}
	static class UIntrepidSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidSystem>();
	}
};
static_assert(alignof(UIntrepidSystem) == 0x000008, "Wrong alignment on UIntrepidSystem");
static_assert(sizeof(UIntrepidSystem) == 0x0000A0, "Wrong size on UIntrepidSystem");
static_assert(offsetof(UIntrepidSystem, WorkerClass) == 0x000050, "Member 'UIntrepidSystem::WorkerClass' has a wrong offset!");
static_assert(offsetof(UIntrepidSystem, WorkersToTick) == 0x000058, "Member 'UIntrepidSystem::WorkersToTick' has a wrong offset!");
static_assert(offsetof(UIntrepidSystem, Objects) == 0x000090, "Member 'UIntrepidSystem::Objects' has a wrong offset!");

// Class Intrepid.IntrepidSystemConfig
// 0x0018 (0x0060 - 0x0048)
class UIntrepidSystemConfig final : public UObject
{
public:
	bool                                          UseThread;                                         // 0x0048(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntrepidSystemConfigData>      ConfigData;                                        // 0x0050(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidSystemConfig">();
	}
	static class UIntrepidSystemConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidSystemConfig>();
	}
};
static_assert(alignof(UIntrepidSystemConfig) == 0x000008, "Wrong alignment on UIntrepidSystemConfig");
static_assert(sizeof(UIntrepidSystemConfig) == 0x000060, "Wrong size on UIntrepidSystemConfig");
static_assert(offsetof(UIntrepidSystemConfig, UseThread) == 0x000048, "Member 'UIntrepidSystemConfig::UseThread' has a wrong offset!");
static_assert(offsetof(UIntrepidSystemConfig, ConfigData) == 0x000050, "Member 'UIntrepidSystemConfig::ConfigData' has a wrong offset!");

// Class Intrepid.IntrepidSystemManager
// 0x0190 (0x01E0 - 0x0050)
class alignas(0x10) UIntrepidSystemManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_50[0x40];                                      // 0x0050(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class UObject>, TWeakObjectPtr<class UIntrepidSystem>> ObjectSystemMap;                                   // 0x0090(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UObject>>            ManagerClasses;                                    // 0x00E0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<TSubclassOf<class UObject>, class UIntrepidSystem*> ManagerMap;                                        // 0x00F0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UIntrepidSystem*>                ManagerInstances;                                  // 0x0140(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x90];                                     // 0x0150(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cleanup(class UWorld* World);
	void HandleActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void HandleComponentEndPlay(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidSystemManager">();
	}
	static class UIntrepidSystemManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidSystemManager>();
	}
};
static_assert(alignof(UIntrepidSystemManager) == 0x000010, "Wrong alignment on UIntrepidSystemManager");
static_assert(sizeof(UIntrepidSystemManager) == 0x0001E0, "Wrong size on UIntrepidSystemManager");
static_assert(offsetof(UIntrepidSystemManager, ObjectSystemMap) == 0x000090, "Member 'UIntrepidSystemManager::ObjectSystemMap' has a wrong offset!");
static_assert(offsetof(UIntrepidSystemManager, ManagerClasses) == 0x0000E0, "Member 'UIntrepidSystemManager::ManagerClasses' has a wrong offset!");
static_assert(offsetof(UIntrepidSystemManager, ManagerMap) == 0x0000F0, "Member 'UIntrepidSystemManager::ManagerMap' has a wrong offset!");
static_assert(offsetof(UIntrepidSystemManager, ManagerInstances) == 0x000140, "Member 'UIntrepidSystemManager::ManagerInstances' has a wrong offset!");

}

