#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Wander

#include "Basic.hpp"

#include "DesignDataPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "STT_Base_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_Wander.STT_Wander_C
// 0x0120 (0x0198 - 0x0078)
class USTT_Wander_C final : public USTT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAoCExpression                         Speed_Multiplier;                                  // 0x0080(0x0050)(Edit, BlueprintVisible)
	bool                                          Use_Spawn_Location_as_Pivot;                       // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pivot;                                             // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRadius;                                         // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinRadius;                                         // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinAngleDeivation;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxAngleDeivation;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Arrival_Distance;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAttempts;                                       // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        QueryGap;                                          // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ANPCPawn_C*                             Agent;                                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WanderTarget;                                      // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        PotentialWanderTargets;                            // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                StoredPivot;                                       // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OriginalSpeed;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedMultiplierValue;                              // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAttemptCount;                               // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSinceLastCheck;                                // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WanderTargetFound;                                 // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckCVarEnabled();
	void ExecuteUbergraph_STT_Wander(int32 EntryPoint);
	void GetPotentialWanderTargets();
	void GetWanderTarget(bool* HasWanderTarget);
	void InAngleRange(const struct FVector& Loc, bool* Valid);
	void IsPivotInLineOfSight(const struct FVector& InLoc, bool* IsValid);
	void IsValidWanderPoint(const struct FVector& Loc, bool* Valid, struct FVector* NavLoc);
	void ReceiveExitState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime);
	void SimpleGetWanderTarget(bool* Valid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_Wander_C">();
	}
	static class USTT_Wander_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_Wander_C>();
	}
};
static_assert(alignof(USTT_Wander_C) == 0x000008, "Wrong alignment on USTT_Wander_C");
static_assert(sizeof(USTT_Wander_C) == 0x000198, "Wrong size on USTT_Wander_C");
static_assert(offsetof(USTT_Wander_C, UberGraphFrame) == 0x000078, "Member 'USTT_Wander_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, Speed_Multiplier) == 0x000080, "Member 'USTT_Wander_C::Speed_Multiplier' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, Use_Spawn_Location_as_Pivot) == 0x0000D0, "Member 'USTT_Wander_C::Use_Spawn_Location_as_Pivot' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, Pivot) == 0x0000D8, "Member 'USTT_Wander_C::Pivot' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, MaxRadius) == 0x0000F0, "Member 'USTT_Wander_C::MaxRadius' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, MinRadius) == 0x0000F8, "Member 'USTT_Wander_C::MinRadius' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, MinAngleDeivation) == 0x000100, "Member 'USTT_Wander_C::MinAngleDeivation' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, MaxAngleDeivation) == 0x000108, "Member 'USTT_Wander_C::MaxAngleDeivation' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, Arrival_Distance) == 0x000110, "Member 'USTT_Wander_C::Arrival_Distance' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, MaxAttempts) == 0x000118, "Member 'USTT_Wander_C::MaxAttempts' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, QueryGap) == 0x000120, "Member 'USTT_Wander_C::QueryGap' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, Agent) == 0x000128, "Member 'USTT_Wander_C::Agent' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, WanderTarget) == 0x000130, "Member 'USTT_Wander_C::WanderTarget' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, PotentialWanderTargets) == 0x000148, "Member 'USTT_Wander_C::PotentialWanderTargets' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, StoredPivot) == 0x000158, "Member 'USTT_Wander_C::StoredPivot' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, OriginalSpeed) == 0x000170, "Member 'USTT_Wander_C::OriginalSpeed' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, SpeedMultiplierValue) == 0x000178, "Member 'USTT_Wander_C::SpeedMultiplierValue' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, CurrentAttemptCount) == 0x000180, "Member 'USTT_Wander_C::CurrentAttemptCount' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, TimeSinceLastCheck) == 0x000188, "Member 'USTT_Wander_C::TimeSinceLastCheck' has a wrong offset!");
static_assert(offsetof(USTT_Wander_C, WanderTargetFound) == 0x000190, "Member 'USTT_Wander_C::WanderTargetFound' has a wrong offset!");

}

