#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkAudio

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "WwiseResourceLoader_structs.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class AkAudio.AkGameObject
// 0x0020 (0x0310 - 0x02F0)
#pragma pack(push, 0x1)
class alignas(0x10) UAkGameObject : public USceneComponent
{
public:
	float                                         AttenuationScalingFactor;                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x2];                                      // 0x0300(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAttenuationScalingMigrated;                       // 0x0302(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_303[0x5];                                      // 0x0303(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAkEvent(class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	void PostAkEventAsync(const class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, int32* PlayingID, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const struct FLatentActionInfo& LatentInfo);
	int32 PostAssociatedAkEvent(int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	void PostAssociatedAkEventAsync(const class UObject* WorldContextObject, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const struct FLatentActionInfo& LatentInfo, int32* PlayingID);
	void SetAttenuationScalingFactor(float InAttenuationScalingFactor);
	void Stop();

	float GetAttenuationScalingFactor() const;
	void GetRTPCValue(class UAkRtpc* RTPCValue, ERTPCValueType InputValueType, float* Value, ERTPCValueType* OutputValueType, const class FString& RTPC, int32 PlayingID) const;
	void SetRTPCValue(class UAkRtpc* RTPCValue, float Value, int32 InterpolationTimeMs, const class FString& RTPC) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGameObject">();
	}
	static class UAkGameObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGameObject>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAkGameObject) == 0x000010, "Wrong alignment on UAkGameObject");
static_assert(sizeof(UAkGameObject) == 0x000310, "Wrong size on UAkGameObject");
static_assert(offsetof(UAkGameObject, AttenuationScalingFactor) == 0x0002F0, "Member 'UAkGameObject::AttenuationScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkGameObject, AkAudioEvent) == 0x0002F8, "Member 'UAkGameObject::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(UAkGameObject, bAttenuationScalingMigrated) == 0x000302, "Member 'UAkGameObject::bAttenuationScalingMigrated' has a wrong offset!");

// Class AkAudio.AkRoomComponent
// 0x00B0 (0x03C0 - 0x0310)
class UAkRoomComponent final : public UAkGameObject
{
public:
	bool                                          bEnable;                                           // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamic;                                          // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30A[0x2];                                      // 0x030A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Priority;                                          // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallOcclusion;                                     // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AuxSendLevel;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableReverbZone;                                 // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ParentRoomActor;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ParentRoomName;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionRegionWidth;                             // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C[0xC];                                      // 0x033C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAcousticTextureSetComponent*         GeometryComponent;                                 // 0x0348(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x58];                                     // 0x0350(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UAkRoomComponent>        ParentRoom;                                        // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0x10];                                     // 0x03B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RemoveReverbZone();
	void SetAuxSendLevel(float InAuxSendLevel);
	void SetDynamic(bool bInDynamic);
	void SetEnable(bool bInEnable);
	void SetEnableReverbZone(bool bInEnableReverbZone);
	void SetGeometryComponent(class UAkAcousticTextureSetComponent* textureSetComponent);
	void SetReverbZone(const class UAkRoomComponent* InParentRoom, float InTransitionRegionWidth);
	void SetTransmissionLoss(float InTransmissionLoss);
	void UpdateParentRoomActor(class AActor* InParentRoomActor);
	void UpdateTransitionRegionWidth(float InTransitionRegionWidth);

	class UPrimitiveComponent* GetPrimitiveParent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRoomComponent">();
	}
	static class UAkRoomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRoomComponent>();
	}
};
static_assert(alignof(UAkRoomComponent) == 0x000010, "Wrong alignment on UAkRoomComponent");
static_assert(sizeof(UAkRoomComponent) == 0x0003C0, "Wrong size on UAkRoomComponent");
static_assert(offsetof(UAkRoomComponent, bEnable) == 0x000308, "Member 'UAkRoomComponent::bEnable' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, bDynamic) == 0x000309, "Member 'UAkRoomComponent::bDynamic' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, Priority) == 0x00030C, "Member 'UAkRoomComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, WallOcclusion) == 0x000310, "Member 'UAkRoomComponent::WallOcclusion' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, AuxSendLevel) == 0x000314, "Member 'UAkRoomComponent::AuxSendLevel' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, AutoPost) == 0x000318, "Member 'UAkRoomComponent::AutoPost' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, bEnableReverbZone) == 0x000319, "Member 'UAkRoomComponent::bEnableReverbZone' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, ParentRoomActor) == 0x000320, "Member 'UAkRoomComponent::ParentRoomActor' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, ParentRoomName) == 0x000328, "Member 'UAkRoomComponent::ParentRoomName' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, TransitionRegionWidth) == 0x000338, "Member 'UAkRoomComponent::TransitionRegionWidth' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, GeometryComponent) == 0x000348, "Member 'UAkRoomComponent::GeometryComponent' has a wrong offset!");
static_assert(offsetof(UAkRoomComponent, ParentRoom) == 0x0003A8, "Member 'UAkRoomComponent::ParentRoom' has a wrong offset!");

// Class AkAudio.AkPortalComponent
// 0x01F0 (0x04E0 - 0x02F0)
class UAkPortalComponent final : public USceneComponent
{
public:
	bool                                          bDynamic;                                          // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkAcousticPortalState                        InitialState;                                      // 0x02F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialOcclusion;                                  // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructionRefreshInterval;                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ObstructionCollisionChannel;                       // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FD[0x1E3];                                    // 0x02FD(0x01E3)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePortal();
	void EnablePortal();
	void SetDynamic(bool bInDynamic);
	void SetPortalOcclusion(float InPortalOcclusion);

	EAkAcousticPortalState GetCurrentState() const;
	float GetPortalOcclusion() const;
	class UPrimitiveComponent* GetPrimitiveParent() const;
	bool PortalPlacementValid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPortalComponent">();
	}
	static class UAkPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPortalComponent>();
	}
};
static_assert(alignof(UAkPortalComponent) == 0x000010, "Wrong alignment on UAkPortalComponent");
static_assert(sizeof(UAkPortalComponent) == 0x0004E0, "Wrong size on UAkPortalComponent");
static_assert(offsetof(UAkPortalComponent, bDynamic) == 0x0002F0, "Member 'UAkPortalComponent::bDynamic' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, InitialState) == 0x0002F1, "Member 'UAkPortalComponent::InitialState' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, InitialOcclusion) == 0x0002F4, "Member 'UAkPortalComponent::InitialOcclusion' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, ObstructionRefreshInterval) == 0x0002F8, "Member 'UAkPortalComponent::ObstructionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkPortalComponent, ObstructionCollisionChannel) == 0x0002FC, "Member 'UAkPortalComponent::ObstructionCollisionChannel' has a wrong offset!");

// Class AkAudio.AkAcousticPortal
// 0x0010 (0x0390 - 0x0380)
class AAkAcousticPortal final : public AVolume
{
public:
	class UAkPortalComponent*                     Portal;                                            // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkAcousticPortalState                        InitialState;                                      // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRequiresStateMigration;                           // 0x0389(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisablePortal();
	void EnablePortal();

	EAkAcousticPortalState GetCurrentState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticPortal">();
	}
	static class AAkAcousticPortal* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkAcousticPortal>();
	}
};
static_assert(alignof(AAkAcousticPortal) == 0x000008, "Wrong alignment on AAkAcousticPortal");
static_assert(sizeof(AAkAcousticPortal) == 0x000390, "Wrong size on AAkAcousticPortal");
static_assert(offsetof(AAkAcousticPortal, Portal) == 0x000380, "Member 'AAkAcousticPortal::Portal' has a wrong offset!");
static_assert(offsetof(AAkAcousticPortal, InitialState) == 0x000388, "Member 'AAkAcousticPortal::InitialState' has a wrong offset!");
static_assert(offsetof(AAkAcousticPortal, bRequiresStateMigration) == 0x000389, "Member 'AAkAcousticPortal::bRequiresStateMigration' has a wrong offset!");

// Class AkAudio.AkPlatformInitializationSettingsBase
// 0x0000 (0x0048 - 0x0048)
class UAkPlatformInitializationSettingsBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPlatformInitializationSettingsBase">();
	}
	static class UAkPlatformInitializationSettingsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPlatformInitializationSettingsBase>();
	}
};
static_assert(alignof(UAkPlatformInitializationSettingsBase) == 0x000008, "Wrong alignment on UAkPlatformInitializationSettingsBase");
static_assert(sizeof(UAkPlatformInitializationSettingsBase) == 0x000048, "Wrong size on UAkPlatformInitializationSettingsBase");

// Class AkAudio.AkTVOSInitializationSettings
// 0x0120 (0x0168 - 0x0048)
class UAkTVOSInitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAudioSession                        AudioSession;                                      // 0x00F8(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x0108(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkTVOSAdvancedInitializationSettings  AdvancedSettings;                                  // 0x0128(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkTVOSInitializationSettings">();
	}
	static class UAkTVOSInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkTVOSInitializationSettings>();
	}
};
static_assert(alignof(UAkTVOSInitializationSettings) == 0x000008, "Wrong alignment on UAkTVOSInitializationSettings");
static_assert(sizeof(UAkTVOSInitializationSettings) == 0x000168, "Wrong size on UAkTVOSInitializationSettings");
static_assert(offsetof(UAkTVOSInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkTVOSInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkTVOSInitializationSettings, AudioSession) == 0x0000F8, "Member 'UAkTVOSInitializationSettings::AudioSession' has a wrong offset!");
static_assert(offsetof(UAkTVOSInitializationSettings, CommunicationSettings) == 0x000108, "Member 'UAkTVOSInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkTVOSInitializationSettings, AdvancedSettings) == 0x000128, "Member 'UAkTVOSInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkAudioType
// 0x0028 (0x0070 - 0x0048)
class UAkAudioType : public UObject
{
public:
	bool                                          bAutoLoad;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        UserData;                                          // 0x0050(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadData();
	void UnloadData(bool bAsync);

	int32 GetWwiseShortId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioType">();
	}
	static class UAkAudioType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioType>();
	}
};
static_assert(alignof(UAkAudioType) == 0x000008, "Wrong alignment on UAkAudioType");
static_assert(sizeof(UAkAudioType) == 0x000070, "Wrong size on UAkAudioType");
static_assert(offsetof(UAkAudioType, bAutoLoad) == 0x000048, "Member 'UAkAudioType::bAutoLoad' has a wrong offset!");
static_assert(offsetof(UAkAudioType, UserData) == 0x000050, "Member 'UAkAudioType::UserData' has a wrong offset!");

// Class AkAudio.AkAcousticTexture
// 0x0020 (0x0090 - 0x0070)
class UAkAcousticTexture final : public UAkAudioType
{
public:
	struct FWwiseAcousticTextureCookedData        AcousticTextureCookedData;                         // 0x0070(0x001C)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticTexture">();
	}
	static class UAkAcousticTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAcousticTexture>();
	}
};
static_assert(alignof(UAkAcousticTexture) == 0x000008, "Wrong alignment on UAkAcousticTexture");
static_assert(sizeof(UAkAcousticTexture) == 0x000090, "Wrong size on UAkAcousticTexture");
static_assert(offsetof(UAkAcousticTexture, AcousticTextureCookedData) == 0x000070, "Member 'UAkAcousticTexture::AcousticTextureCookedData' has a wrong offset!");

// Class AkAudio.AkAcousticTextureSetComponent
// 0x0020 (0x0310 - 0x02F0)
#pragma pack(push, 0x1)
class alignas(0x10) UAkAcousticTextureSetComponent : public USceneComponent
{
public:
	uint8                                         Pad_2F0[0x18];                                     // 0x02F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAcousticTextureSetComponent">();
	}
	static class UAkAcousticTextureSetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAcousticTextureSetComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAkAcousticTextureSetComponent) == 0x000010, "Wrong alignment on UAkAcousticTextureSetComponent");
static_assert(sizeof(UAkAcousticTextureSetComponent) == 0x000310, "Wrong size on UAkAcousticTextureSetComponent");

// Class AkAudio.AkAmbientSound
// 0x0040 (0x0388 - 0x0348)
class AAkAmbientSound : public AActor
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0348(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopWhenOwnerIsDestroyed;                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoPost;                                          // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, SimpleDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A[0x2E];                                     // 0x035A(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartAmbientSound();
	void StopAmbientSound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAmbientSound">();
	}
	static class AAkAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkAmbientSound>();
	}
};
static_assert(alignof(AAkAmbientSound) == 0x000008, "Wrong alignment on AAkAmbientSound");
static_assert(sizeof(AAkAmbientSound) == 0x000388, "Wrong size on AAkAmbientSound");
static_assert(offsetof(AAkAmbientSound, AkAudioEvent) == 0x000348, "Member 'AAkAmbientSound::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, AkComponent) == 0x000350, "Member 'AAkAmbientSound::AkComponent' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, StopWhenOwnerIsDestroyed) == 0x000358, "Member 'AAkAmbientSound::StopWhenOwnerIsDestroyed' has a wrong offset!");
static_assert(offsetof(AAkAmbientSound, AutoPost) == 0x000359, "Member 'AAkAmbientSound::AutoPost' has a wrong offset!");

// Class AkAudio.AkPlatformInfo
// 0x0048 (0x0090 - 0x0048)
class UAkPlatformInfo : public UObject
{
public:
	uint8                                         Pad_48[0x48];                                      // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkPlatformInfo">();
	}
	static class UAkPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkPlatformInfo>();
	}
};
static_assert(alignof(UAkPlatformInfo) == 0x000008, "Wrong alignment on UAkPlatformInfo");
static_assert(sizeof(UAkPlatformInfo) == 0x000090, "Wrong size on UAkPlatformInfo");

// Class AkAudio.AkWin64PlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkWin64PlatformInfo : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWin64PlatformInfo">();
	}
	static class UAkWin64PlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWin64PlatformInfo>();
	}
};
static_assert(alignof(UAkWin64PlatformInfo) == 0x000008, "Wrong alignment on UAkWin64PlatformInfo");
static_assert(sizeof(UAkWin64PlatformInfo) == 0x000090, "Wrong size on UAkWin64PlatformInfo");

// Class AkAudio.AkAndroidInitializationSettings
// 0x0110 (0x0158 - 0x0048)
class UAkAndroidInitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00F8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAndroidAdvancedInitializationSettings AdvancedSettings;                                  // 0x0118(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAndroidInitializationSettings">();
	}
	static class UAkAndroidInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAndroidInitializationSettings>();
	}
};
static_assert(alignof(UAkAndroidInitializationSettings) == 0x000008, "Wrong alignment on UAkAndroidInitializationSettings");
static_assert(sizeof(UAkAndroidInitializationSettings) == 0x000158, "Wrong size on UAkAndroidInitializationSettings");
static_assert(offsetof(UAkAndroidInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkAndroidInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkAndroidInitializationSettings, CommunicationSettings) == 0x0000F8, "Member 'UAkAndroidInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkAndroidInitializationSettings, AdvancedSettings) == 0x000118, "Member 'UAkAndroidInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkGroupValue
// 0x0020 (0x0090 - 0x0070)
class UAkGroupValue : public UAkAudioType
{
public:
	struct FWwiseGroupValueCookedData             GroupValueCookedData;                              // 0x0070(0x0014)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GroupShortId;                                      // 0x0084(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGroupValue">();
	}
	static class UAkGroupValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGroupValue>();
	}
};
static_assert(alignof(UAkGroupValue) == 0x000008, "Wrong alignment on UAkGroupValue");
static_assert(sizeof(UAkGroupValue) == 0x000090, "Wrong size on UAkGroupValue");
static_assert(offsetof(UAkGroupValue, GroupValueCookedData) == 0x000070, "Member 'UAkGroupValue::GroupValueCookedData' has a wrong offset!");
static_assert(offsetof(UAkGroupValue, GroupShortId) == 0x000084, "Member 'UAkGroupValue::GroupShortId' has a wrong offset!");

// Class AkAudio.AkSwitchValue
// 0x0000 (0x0090 - 0x0090)
class UAkSwitchValue final : public UAkGroupValue
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSwitchValue">();
	}
	static class UAkSwitchValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSwitchValue>();
	}
};
static_assert(alignof(UAkSwitchValue) == 0x000008, "Wrong alignment on UAkSwitchValue");
static_assert(sizeof(UAkSwitchValue) == 0x000090, "Wrong size on UAkSwitchValue");

// Class AkAudio.AkAndroidPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkAndroidPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAndroidPlatformInfo">();
	}
	static class UAkAndroidPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAndroidPlatformInfo>();
	}
};
static_assert(alignof(UAkAndroidPlatformInfo) == 0x000008, "Wrong alignment on UAkAndroidPlatformInfo");
static_assert(sizeof(UAkAndroidPlatformInfo) == 0x000090, "Wrong size on UAkAndroidPlatformInfo");

// Class AkAudio.AkWinGDKPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkWinGDKPlatformInfo : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWinGDKPlatformInfo">();
	}
	static class UAkWinGDKPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWinGDKPlatformInfo>();
	}
};
static_assert(alignof(UAkWinGDKPlatformInfo) == 0x000008, "Wrong alignment on UAkWinGDKPlatformInfo");
static_assert(sizeof(UAkWinGDKPlatformInfo) == 0x000090, "Wrong size on UAkWinGDKPlatformInfo");

// Class AkAudio.AkAudioBank
// 0x0008 (0x0078 - 0x0070)
class UAkAudioBank final : public UAkAudioType
{
public:
	bool                                          AutoLoad;                                          // 0x0070(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioBank">();
	}
	static class UAkAudioBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioBank>();
	}
};
static_assert(alignof(UAkAudioBank) == 0x000008, "Wrong alignment on UAkAudioBank");
static_assert(sizeof(UAkAudioBank) == 0x000078, "Wrong size on UAkAudioBank");
static_assert(offsetof(UAkAudioBank, AutoLoad) == 0x000070, "Member 'UAkAudioBank::AutoLoad' has a wrong offset!");

// Class AkAudio.AkAudioDeviceShareSet
// 0x0010 (0x0080 - 0x0070)
class UAkAudioDeviceShareSet final : public UAkAudioType
{
public:
	struct FWwiseAudioDeviceShareSetCookedData    AudioDeviceShareSetCookedData;                     // 0x0070(0x000C)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioDeviceShareSet">();
	}
	static class UAkAudioDeviceShareSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioDeviceShareSet>();
	}
};
static_assert(alignof(UAkAudioDeviceShareSet) == 0x000008, "Wrong alignment on UAkAudioDeviceShareSet");
static_assert(sizeof(UAkAudioDeviceShareSet) == 0x000080, "Wrong size on UAkAudioDeviceShareSet");
static_assert(offsetof(UAkAudioDeviceShareSet, AudioDeviceShareSetCookedData) == 0x000070, "Member 'UAkAudioDeviceShareSet::AudioDeviceShareSetCookedData' has a wrong offset!");

// Class AkAudio.AkAudioEvent
// 0x0080 (0x00F0 - 0x0070)
class UAkAudioEvent final : public UAkAudioType
{
public:
	float                                         MaxAttenuationRadius;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInfinite;                                        // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDuration;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDuration;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwiseLocalizedEventCookedData         EventCookedData;                                   // 0x0080(0x0060)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	class UAkAudioBank*                           RequiredBank;                                      // 0x00E0(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 ExecuteAction(const EAkActionOnEventType ActionType, const class AActor* Actor, const int32 PlayingID, const int32 TransitionDuration, const EAkCurveInterpolation FadeCurve);
	int32 PostAtLocation(const struct FVector& Location, const struct FRotator& Orientation, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Callback, const int32 CallbackMask, const class UObject* WorldContextObject);
	int32 PostOnActor(const class AActor* Actor, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Delegate, const int32 CallbackMask, const bool bStopWhenAttachedObjectDestroyed);
	int32 PostOnActorAndWait(const class AActor* Actor, const bool bStopWhenAttachedObjectDestroyed, const struct FLatentActionInfo& LatentActionInfo);
	int32 PostOnComponent(class UAkComponent* Component, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Delegate, const int32 CallbackMask, const bool bStopWhenAttachedObjectDestroyed);
	int32 PostOnComponentAndWait(class UAkComponent* Component, const bool bStopWhenAttachedObjectDestroyed, const struct FLatentActionInfo& LatentActionInfo);
	int32 PostOnGameObject(class UAkGameObject* GameObject, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& Delegate, const int32 CallbackMask);
	int32 PostOnGameObjectAndWait(class UAkGameObject* GameObject, const struct FLatentActionInfo& LatentActionInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioEvent">();
	}
	static class UAkAudioEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioEvent>();
	}
};
static_assert(alignof(UAkAudioEvent) == 0x000008, "Wrong alignment on UAkAudioEvent");
static_assert(sizeof(UAkAudioEvent) == 0x0000F0, "Wrong size on UAkAudioEvent");
static_assert(offsetof(UAkAudioEvent, MaxAttenuationRadius) == 0x000070, "Member 'UAkAudioEvent::MaxAttenuationRadius' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, IsInfinite) == 0x000074, "Member 'UAkAudioEvent::IsInfinite' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MinimumDuration) == 0x000078, "Member 'UAkAudioEvent::MinimumDuration' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, MaximumDuration) == 0x00007C, "Member 'UAkAudioEvent::MaximumDuration' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, EventCookedData) == 0x000080, "Member 'UAkAudioEvent::EventCookedData' has a wrong offset!");
static_assert(offsetof(UAkAudioEvent, RequiredBank) == 0x0000E0, "Member 'UAkAudioEvent::RequiredBank' has a wrong offset!");

// Class AkAudio.MovieSceneAkTrack
// 0x0018 (0x00D0 - 0x00B8)
class UMovieSceneAkTrack : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bIsAMasterTrack;                                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkTrack">();
	}
	static class UMovieSceneAkTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkTrack>();
	}
};
static_assert(alignof(UMovieSceneAkTrack) == 0x000008, "Wrong alignment on UMovieSceneAkTrack");
static_assert(sizeof(UMovieSceneAkTrack) == 0x0000D0, "Wrong size on UMovieSceneAkTrack");
static_assert(offsetof(UMovieSceneAkTrack, Sections) == 0x0000B8, "Member 'UMovieSceneAkTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkTrack, bIsAMasterTrack) == 0x0000C8, "Member 'UMovieSceneAkTrack::bIsAMasterTrack' has a wrong offset!");

// Class AkAudio.MovieSceneAkAudioEventTrack
// 0x0008 (0x00D8 - 0x00D0)
class UMovieSceneAkAudioEventTrack final : public UMovieSceneAkTrack
{
public:
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioEventTrack">();
	}
	static class UMovieSceneAkAudioEventTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioEventTrack>();
	}
};
static_assert(alignof(UMovieSceneAkAudioEventTrack) == 0x000008, "Wrong alignment on UMovieSceneAkAudioEventTrack");
static_assert(sizeof(UMovieSceneAkAudioEventTrack) == 0x0000D8, "Wrong size on UMovieSceneAkAudioEventTrack");

// Class AkAudio.AkComponent
// 0x01F0 (0x0500 - 0x0310)
class UAkComponent : public UAkGameObject
{
public:
	bool                                          bUseSpatialAudio;                                  // 0x0308(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	EAkCollisionChannel                           OcclusionCollisionChannel;                         // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRefreshInterval;                          // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSpotReflectors;                              // 0x0318(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OuterRadius;                                       // 0x031C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              EarlyReflectionAuxBus;                             // 0x0328(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 EarlyReflectionAuxBusName;                         // 0x0330(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EarlyReflectionBusSendGain;                        // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DrawFirstOrderReflections;                         // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawSecondOrderReflections;                        // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawHigherOrderReflections;                        // 0x0346(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDiffraction;                                   // 0x0347(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopWhenOwnerDestroyed;                            // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseReverbVolumes;                                 // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x1B6];                                    // 0x034A(0x01B6)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECollisionChannel GetOcclusionCollisionChannel();
	int32 PostAkEventAndWaitForEnd(class UAkAudioEvent* AkEvent, const struct FLatentActionInfo& LatentInfo);
	int32 PostAssociatedAkEventAndWaitForEnd(const struct FLatentActionInfo& LatentInfo);
	void PostTrigger(class UAkTrigger* TriggerValue);
	void SetEarlyReflectionsAuxBus(const class FString& AuxBusName);
	void SetEarlyReflectionsVolume(float SendVolume);
	void SetEnableSpotReflectors(bool in_enable);
	void SetGameObjectRadius(float in_outerRadius, float in_innerRadius);
	void SetListeners(const TArray<class UAkComponent*>& Listeners);
	void SetOutputBusVolume(float BusVolume);
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);
	void SetSwitch(class UAkSwitchValue* SwitchValue);

	float GetAttenuationRadius() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkComponent">();
	}
	static class UAkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkComponent>();
	}
};
static_assert(alignof(UAkComponent) == 0x000010, "Wrong alignment on UAkComponent");
static_assert(sizeof(UAkComponent) == 0x000500, "Wrong size on UAkComponent");
static_assert(offsetof(UAkComponent, bUseSpatialAudio) == 0x000308, "Member 'UAkComponent::bUseSpatialAudio' has a wrong offset!");
static_assert(offsetof(UAkComponent, OcclusionCollisionChannel) == 0x000310, "Member 'UAkComponent::OcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkComponent, OcclusionRefreshInterval) == 0x000314, "Member 'UAkComponent::OcclusionRefreshInterval' has a wrong offset!");
static_assert(offsetof(UAkComponent, EnableSpotReflectors) == 0x000318, "Member 'UAkComponent::EnableSpotReflectors' has a wrong offset!");
static_assert(offsetof(UAkComponent, OuterRadius) == 0x00031C, "Member 'UAkComponent::OuterRadius' has a wrong offset!");
static_assert(offsetof(UAkComponent, InnerRadius) == 0x000320, "Member 'UAkComponent::InnerRadius' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionAuxBus) == 0x000328, "Member 'UAkComponent::EarlyReflectionAuxBus' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionAuxBusName) == 0x000330, "Member 'UAkComponent::EarlyReflectionAuxBusName' has a wrong offset!");
static_assert(offsetof(UAkComponent, EarlyReflectionBusSendGain) == 0x000340, "Member 'UAkComponent::EarlyReflectionBusSendGain' has a wrong offset!");
static_assert(offsetof(UAkComponent, DrawFirstOrderReflections) == 0x000344, "Member 'UAkComponent::DrawFirstOrderReflections' has a wrong offset!");
static_assert(offsetof(UAkComponent, DrawSecondOrderReflections) == 0x000345, "Member 'UAkComponent::DrawSecondOrderReflections' has a wrong offset!");
static_assert(offsetof(UAkComponent, DrawHigherOrderReflections) == 0x000346, "Member 'UAkComponent::DrawHigherOrderReflections' has a wrong offset!");
static_assert(offsetof(UAkComponent, DrawDiffraction) == 0x000347, "Member 'UAkComponent::DrawDiffraction' has a wrong offset!");
static_assert(offsetof(UAkComponent, StopWhenOwnerDestroyed) == 0x000348, "Member 'UAkComponent::StopWhenOwnerDestroyed' has a wrong offset!");
static_assert(offsetof(UAkComponent, bUseReverbVolumes) == 0x000349, "Member 'UAkComponent::bUseReverbVolumes' has a wrong offset!");

// Class AkAudio.AkAudioInputComponent
// 0x0030 (0x0530 - 0x0500)
#pragma pack(push, 0x1)
class alignas(0x10) UAkAudioInputComponent : public UAkComponent
{
public:
	uint8                                         Pad_500[0x28];                                     // 0x0500(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 PostAssociatedAudioInputEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAudioInputComponent">();
	}
	static class UAkAudioInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAudioInputComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAkAudioInputComponent) == 0x000010, "Wrong alignment on UAkAudioInputComponent");
static_assert(sizeof(UAkAudioInputComponent) == 0x000530, "Wrong size on UAkAudioInputComponent");

// Class AkAudio.AkWinGDKInitializationSettings
// 0x0110 (0x0158 - 0x0048)
class UAkWinGDKInitializationSettings : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00F8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkWinGDKAdvancedInitializationSettings AdvancedSettings;                                  // 0x0118(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWinGDKInitializationSettings">();
	}
	static class UAkWinGDKInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWinGDKInitializationSettings>();
	}
};
static_assert(alignof(UAkWinGDKInitializationSettings) == 0x000008, "Wrong alignment on UAkWinGDKInitializationSettings");
static_assert(sizeof(UAkWinGDKInitializationSettings) == 0x000158, "Wrong size on UAkWinGDKInitializationSettings");
static_assert(offsetof(UAkWinGDKInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkWinGDKInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkWinGDKInitializationSettings, CommunicationSettings) == 0x0000F8, "Member 'UAkWinGDKInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkWinGDKInitializationSettings, AdvancedSettings) == 0x000118, "Member 'UAkWinGDKInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkAuxBus
// 0x0078 (0x00E8 - 0x0070)
class UAkAuxBus final : public UAkAudioType
{
public:
	float                                         MaxAttenuationRadius;                              // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwiseLocalizedAuxBusCookedData        AuxBusCookedData;                                  // 0x0078(0x0060)(Edit, Transient, NativeAccessSpecifierPublic)
	class UAkAudioBank*                           RequiredBank;                                      // 0x00D8(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAuxBus">();
	}
	static class UAkAuxBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAuxBus>();
	}
};
static_assert(alignof(UAkAuxBus) == 0x000008, "Wrong alignment on UAkAuxBus");
static_assert(sizeof(UAkAuxBus) == 0x0000E8, "Wrong size on UAkAuxBus");
static_assert(offsetof(UAkAuxBus, MaxAttenuationRadius) == 0x000070, "Member 'UAkAuxBus::MaxAttenuationRadius' has a wrong offset!");
static_assert(offsetof(UAkAuxBus, AuxBusCookedData) == 0x000078, "Member 'UAkAuxBus::AuxBusCookedData' has a wrong offset!");
static_assert(offsetof(UAkAuxBus, RequiredBank) == 0x0000D8, "Member 'UAkAuxBus::RequiredBank' has a wrong offset!");

// Class AkAudio.AkAssetData
// 0x0028 (0x0070 - 0x0048)
class UAkAssetData final : public UObject
{
public:
	uint8                                         Pad_48[0x28];                                      // 0x0048(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAssetData">();
	}
	static class UAkAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAssetData>();
	}
};
static_assert(alignof(UAkAssetData) == 0x000008, "Wrong alignment on UAkAssetData");
static_assert(sizeof(UAkAssetData) == 0x000070, "Wrong size on UAkAssetData");

// Class AkAudio.AkAssetPlatformData
// 0x0008 (0x0050 - 0x0048)
class UAkAssetPlatformData final : public UObject
{
public:
	class UAkAssetData*                           CurrentAssetData;                                  // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkAssetPlatformData">();
	}
	static class UAkAssetPlatformData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkAssetPlatformData>();
	}
};
static_assert(alignof(UAkAssetPlatformData) == 0x000008, "Wrong alignment on UAkAssetPlatformData");
static_assert(sizeof(UAkAssetPlatformData) == 0x000050, "Wrong size on UAkAssetPlatformData");
static_assert(offsetof(UAkAssetPlatformData, CurrentAssetData) == 0x000048, "Member 'UAkAssetPlatformData::CurrentAssetData' has a wrong offset!");

// Class AkAudio.AkMediaAssetData
// 0x0010 (0x0058 - 0x0048)
class UAkMediaAssetData final : public UObject
{
public:
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMediaAssetData">();
	}
	static class UAkMediaAssetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMediaAssetData>();
	}
};
static_assert(alignof(UAkMediaAssetData) == 0x000008, "Wrong alignment on UAkMediaAssetData");
static_assert(sizeof(UAkMediaAssetData) == 0x000058, "Wrong size on UAkMediaAssetData");

// Class AkAudio.AkMediaAsset
// 0x0050 (0x0098 - 0x0048)
class UAkMediaAsset : public UObject
{
public:
	TMap<class FString, class UAkMediaAssetData*> MediaAssetDataPerPlatform;                         // 0x0048(0x0050)(Edit, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMediaAsset">();
	}
	static class UAkMediaAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMediaAsset>();
	}
};
static_assert(alignof(UAkMediaAsset) == 0x000008, "Wrong alignment on UAkMediaAsset");
static_assert(sizeof(UAkMediaAsset) == 0x000098, "Wrong size on UAkMediaAsset");
static_assert(offsetof(UAkMediaAsset, MediaAssetDataPerPlatform) == 0x000048, "Member 'UAkMediaAsset::MediaAssetDataPerPlatform' has a wrong offset!");

// Class AkAudio.AkLocalizedMediaAsset
// 0x0000 (0x0098 - 0x0098)
class UAkLocalizedMediaAsset final : public UAkMediaAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLocalizedMediaAsset">();
	}
	static class UAkLocalizedMediaAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLocalizedMediaAsset>();
	}
};
static_assert(alignof(UAkLocalizedMediaAsset) == 0x000008, "Wrong alignment on UAkLocalizedMediaAsset");
static_assert(sizeof(UAkLocalizedMediaAsset) == 0x000098, "Wrong size on UAkLocalizedMediaAsset");

// Class AkAudio.AkExternalMediaAsset
// 0x0000 (0x0098 - 0x0098)
class UAkExternalMediaAsset final : public UAkMediaAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkExternalMediaAsset">();
	}
	static class UAkExternalMediaAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkExternalMediaAsset>();
	}
};
static_assert(alignof(UAkExternalMediaAsset) == 0x000008, "Wrong alignment on UAkExternalMediaAsset");
static_assert(sizeof(UAkExternalMediaAsset) == 0x000098, "Wrong size on UAkExternalMediaAsset");

// Class AkAudio.AkFolder
// 0x0000 (0x0070 - 0x0070)
class UAkFolder final : public UAkAudioType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkFolder">();
	}
	static class UAkFolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkFolder>();
	}
};
static_assert(alignof(UAkFolder) == 0x000008, "Wrong alignment on UAkFolder");
static_assert(sizeof(UAkFolder) == 0x000070, "Wrong size on UAkFolder");

// Class AkAudio.DrawPortalComponent
// 0x0000 (0x05C0 - 0x05C0)
class UDrawPortalComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DrawPortalComponent">();
	}
	static class UDrawPortalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDrawPortalComponent>();
	}
};
static_assert(alignof(UDrawPortalComponent) == 0x000010, "Wrong alignment on UDrawPortalComponent");
static_assert(sizeof(UDrawPortalComponent) == 0x0005C0, "Wrong size on UDrawPortalComponent");

// Class AkAudio.DrawRoomComponent
// 0x0000 (0x05C0 - 0x05C0)
class UDrawRoomComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DrawRoomComponent">();
	}
	static class UDrawRoomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDrawRoomComponent>();
	}
};
static_assert(alignof(UDrawRoomComponent) == 0x000010, "Wrong alignment on UDrawRoomComponent");
static_assert(sizeof(UDrawRoomComponent) == 0x0005C0, "Wrong size on UDrawRoomComponent");

// Class AkAudio.AkEffectShareSet
// 0x0068 (0x00D8 - 0x0070)
class UAkEffectShareSet final : public UAkAudioType
{
public:
	struct FWwiseLocalizedShareSetCookedData      ShareSetCookedData;                                // 0x0070(0x0060)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkEffectShareSet">();
	}
	static class UAkEffectShareSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkEffectShareSet>();
	}
};
static_assert(alignof(UAkEffectShareSet) == 0x000008, "Wrong alignment on UAkEffectShareSet");
static_assert(sizeof(UAkEffectShareSet) == 0x0000D8, "Wrong size on UAkEffectShareSet");
static_assert(offsetof(UAkEffectShareSet, ShareSetCookedData) == 0x000070, "Member 'UAkEffectShareSet::ShareSetCookedData' has a wrong offset!");

// Class AkAudio.AkGameplayStatics
// 0x0000 (0x0048 - 0x0048)
class UAkGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddOutput(const struct FAkOutputSettings& in_Settings, struct FAkOutputDeviceID* out_DeviceID, TArray<class UAkComponent*>& in_ListenerIDs);
	static void AddOutputCaptureMarker(const class FString& MarkerText);
	static void CancelEventCallback(const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static void ClearSoundBanksAndMedia();
	static class UObject* GetAkAudioTypeUserData(const class UAkAudioType* Instance, const class UClass* Type);
	static class UAkComponent* GetAkComponent(class USceneComponent* AttachToComponent, bool* ComponentCreated, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType);
	static TArray<class FString> GetAvailableAudioCultures();
	static class FString GetCurrentAudioCulture();
	static struct FAkOutdoorsRoomParameters GetCurrentOutdoorsRoomParameters();
	static class UAkComponent* GetOrCreateAkComponent(class USceneComponent* AttachToComponent, bool* ComponentCreated, class FName AttachPointName);
	static void GetRTPCValue(class UAkRtpc* RTPCValue, int32 PlayingID, ERTPCValueType InputValueType, float* Value, ERTPCValueType* OutputValueType, class AActor* Actor);
	static void GetSpeakerAngles(TArray<float>* SpeakerAngles, float* HeightAngle, const class FString& DeviceShareSet);
	static bool IsEditor();
	static bool IsGame(class UObject* WorldContextObject);
	static void LoadInitBank();
	static int32 PostAndWaitForEndOfEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, const struct FLatentActionInfo& LatentInfo, bool bStopWhenAttachedToDestroyed);
	static int32 PostEvent(class UAkAudioEvent* AkEvent, class AActor* Actor, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, bool bStopWhenAttachedToDestroyed);
	static int32 PostEventAtLocation(class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, class UObject* WorldContextObject);
	static int32 PostEventOutdoors(class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static void PostTrigger(class UAkTrigger* TriggerValue, class AActor* Actor);
	static void RemoveOutput(const struct FAkOutputDeviceID& in_OutputDeviceId);
	static void ReplaceMainOutput(const struct FAkOutputSettings& MainOutputSettings);
	static void ResetOutdoorsRoomParams();
	static void ResetRTPCValue(class UAkRtpc* RTPCValue, int32 InterpolationTimeMs, class AActor* Actor);
	static bool SetActorMixerEffect(const struct FAkUniqueID& InAudioNodeID, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static bool SetAuxBusEffect(const class UAkAuxBus* InAuxBus, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static void SetBusConfig(const class FString& BusName, EAkChannelConfiguration ChannelConfiguration);
	static bool SetBusEffectByID(const struct FAkUniqueID& InBusID, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static bool SetBusEffectByName(const class FString& InBusName, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static void SetCurrentAudioCulture(const class FString& AudioCulture, const struct FLatentActionInfo& LatentInfo, class UObject* WorldContextObject);
	static void SetCurrentAudioCultureAsync(const class FString& AudioCulture, const TDelegate<void(bool Succeeded)>& Completed);
	static void SetDiffractionOrder(int32 InDiffractionOrder, bool bInUpdatePaths);
	static void SetDistanceProbe(class AActor* Listener, class AActor* DistanceProbe);
	static void SetGameObjectToPortalObstruction(class UAkComponent* GameObjectAkComponent, class UAkPortalComponent* PortalComponent, float ObstructionValue);
	static void SetLoadBalancingSpread(int32 InNbFrames);
	static void SetMaxDiffractionPaths(int32 InMaxDiffractionPaths, class UAkGameObject* InGameObject);
	static void SetMaxEmitterRoomAuxSends(int32 InMaxEmitterRoomAuxSends);
	static void SetMaxGlobalReflectionPaths(int32 InMaxReflectionPaths);
	static void SetMultipleChannelEmitterPositions(class UAkComponent* GameObjectAkComponent, const TArray<EAkChannelConfiguration>& ChannelMasks, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetMultipleChannelMaskEmitterPositions(class UAkComponent* GameObjectAkComponent, const TArray<struct FAkChannelMask>& ChannelMasks, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetMultiplePositions(class UAkComponent* GameObjectAkComponent, const TArray<struct FTransform>& Positions, EAkMultiPositionType MultiPositionType);
	static void SetNumberOfPrimaryRays(int32 InNbPrimaryRays);
	static void SetOcclusionRefreshInterval(float RefreshInterval, class AActor* Actor);
	static void SetOutdoorsRoomParameters(const struct FAkOutdoorsRoomParameters& InOutdoorsRoomParameters);
	static void SetOutputBusVolume(float BusVolume, class AActor* Actor);
	static bool SetOutputDeviceEffect(const struct FAkOutputDeviceID& InDeviceId, const int32 InEffectIndex, const class UAkEffectShareSet* InEffectShareSet);
	static void SetPanningRule(EPanningRule PanRule);
	static void SetPortalObstructionAndOcclusion(class UAkPortalComponent* PortalComponent, float ObstructionValue, float OcclusionValue);
	static void SetPortalToPortalObstruction(class UAkPortalComponent* PortalComponent0, class UAkPortalComponent* PortalComponent1, float ObstructionValue);
	static void SetReflectionsOrder(int32 Order, bool RefreshPaths);
	static void SetRTPCValue(class UAkRtpc* RTPCValue, float Value, int32 InterpolationTimeMs, class AActor* Actor);
	static void SetSmoothingConstant(float InSmoothingConstantMs, class UAkGameObject* InGameObject);
	static void SetSpeakerAngles(const TArray<float>& SpeakerAngles, float HeightAngle, const class FString& DeviceShareSet);
	static void SetState(class UAkStateValue* StateValue);
	static void SetSwitch(class UAkSwitchValue* SwitchValue, class AActor* Actor);
	static class UAkComponent* SpawnAkComponentAtLocation(class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation, bool AutoPost, bool AutoDestroy);
	static void StartAllAmbientSounds(class UObject* WorldContextObject);
	static void StartOutputCapture(const class FString& Filename);
	static void StartProfilerCapture(const class FString& Filename);
	static void StopActor(class AActor* Actor);
	static void StopAll();
	static void StopAllAmbientSounds(class UObject* WorldContextObject);
	static void StopOutdoors();
	static void StopOutputCapture();
	static void StopProfilerCapture();
	static void UnloadInitBank();
	static void UseReverbVolumes(bool inUseReverbVolumes, class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGameplayStatics">();
	}
	static class UAkGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGameplayStatics>();
	}
};
static_assert(alignof(UAkGameplayStatics) == 0x000008, "Wrong alignment on UAkGameplayStatics");
static_assert(sizeof(UAkGameplayStatics) == 0x000048, "Wrong size on UAkGameplayStatics");

// Class AkAudio.AkCallbackInfo
// 0x0008 (0x0050 - 0x0048)
class UAkCallbackInfo : public UObject
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkCallbackInfo">();
	}
	static class UAkCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkCallbackInfo>();
	}
};
static_assert(alignof(UAkCallbackInfo) == 0x000008, "Wrong alignment on UAkCallbackInfo");
static_assert(sizeof(UAkCallbackInfo) == 0x000050, "Wrong size on UAkCallbackInfo");
static_assert(offsetof(UAkCallbackInfo, AkComponent) == 0x000048, "Member 'UAkCallbackInfo::AkComponent' has a wrong offset!");

// Class AkAudio.AkEventCallbackInfo
// 0x0008 (0x0058 - 0x0050)
class UAkEventCallbackInfo : public UAkCallbackInfo
{
public:
	int32                                         PlayingID;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventId;                                           // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkEventCallbackInfo">();
	}
	static class UAkEventCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkEventCallbackInfo>();
	}
};
static_assert(alignof(UAkEventCallbackInfo) == 0x000008, "Wrong alignment on UAkEventCallbackInfo");
static_assert(sizeof(UAkEventCallbackInfo) == 0x000058, "Wrong size on UAkEventCallbackInfo");
static_assert(offsetof(UAkEventCallbackInfo, PlayingID) == 0x000050, "Member 'UAkEventCallbackInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(UAkEventCallbackInfo, EventId) == 0x000054, "Member 'UAkEventCallbackInfo::EventId' has a wrong offset!");

// Class AkAudio.AkMIDIEventCallbackInfo
// 0x0010 (0x0068 - 0x0058)
class UAkMIDIEventCallbackInfo final : public UAkEventCallbackInfo
{
public:
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCc(struct FAkMidiCc* AsCc);
	uint8 GetChannel();
	bool GetChannelAftertouch(struct FAkMidiChannelAftertouch* AsChannelAftertouch);
	bool GetGeneric(struct FAkMidiGeneric* AsGeneric);
	bool GetNoteAftertouch(struct FAkMidiNoteAftertouch* AsNoteAftertouch);
	bool GetNoteOff(struct FAkMidiNoteOnOff* AsNoteOff);
	bool GetNoteOn(struct FAkMidiNoteOnOff* AsNoteOn);
	bool GetPitchBend(struct FAkMidiPitchBend* AsPitchBend);
	bool GetProgramChange(struct FAkMidiProgramChange* AsProgramChange);
	EAkMidiEventType GetType();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMIDIEventCallbackInfo">();
	}
	static class UAkMIDIEventCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMIDIEventCallbackInfo>();
	}
};
static_assert(alignof(UAkMIDIEventCallbackInfo) == 0x000008, "Wrong alignment on UAkMIDIEventCallbackInfo");
static_assert(sizeof(UAkMIDIEventCallbackInfo) == 0x000068, "Wrong size on UAkMIDIEventCallbackInfo");

// Class AkAudio.AkMarkerCallbackInfo
// 0x0018 (0x0070 - 0x0058)
class UAkMarkerCallbackInfo final : public UAkEventCallbackInfo
{
public:
	int32                                         Identifier;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMarkerCallbackInfo">();
	}
	static class UAkMarkerCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMarkerCallbackInfo>();
	}
};
static_assert(alignof(UAkMarkerCallbackInfo) == 0x000008, "Wrong alignment on UAkMarkerCallbackInfo");
static_assert(sizeof(UAkMarkerCallbackInfo) == 0x000070, "Wrong size on UAkMarkerCallbackInfo");
static_assert(offsetof(UAkMarkerCallbackInfo, Identifier) == 0x000058, "Member 'UAkMarkerCallbackInfo::Identifier' has a wrong offset!");
static_assert(offsetof(UAkMarkerCallbackInfo, Position) == 0x00005C, "Member 'UAkMarkerCallbackInfo::Position' has a wrong offset!");
static_assert(offsetof(UAkMarkerCallbackInfo, Label) == 0x000060, "Member 'UAkMarkerCallbackInfo::Label' has a wrong offset!");

// Class AkAudio.AkDurationCallbackInfo
// 0x0018 (0x0070 - 0x0058)
class UAkDurationCallbackInfo final : public UAkEventCallbackInfo
{
public:
	float                                         Duration;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EstimatedDuration;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioNodeID;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MediaId;                                           // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreaming;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkDurationCallbackInfo">();
	}
	static class UAkDurationCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkDurationCallbackInfo>();
	}
};
static_assert(alignof(UAkDurationCallbackInfo) == 0x000008, "Wrong alignment on UAkDurationCallbackInfo");
static_assert(sizeof(UAkDurationCallbackInfo) == 0x000070, "Wrong size on UAkDurationCallbackInfo");
static_assert(offsetof(UAkDurationCallbackInfo, Duration) == 0x000058, "Member 'UAkDurationCallbackInfo::Duration' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, EstimatedDuration) == 0x00005C, "Member 'UAkDurationCallbackInfo::EstimatedDuration' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, AudioNodeID) == 0x000060, "Member 'UAkDurationCallbackInfo::AudioNodeID' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, MediaId) == 0x000064, "Member 'UAkDurationCallbackInfo::MediaId' has a wrong offset!");
static_assert(offsetof(UAkDurationCallbackInfo, bStreaming) == 0x000068, "Member 'UAkDurationCallbackInfo::bStreaming' has a wrong offset!");

// Class AkAudio.AkSpatialAudioVolume
// 0x0018 (0x0398 - 0x0380)
class AAkSpatialAudioVolume : public AVolume
{
public:
	class UAkSurfaceReflectorSetComponent*        SurfaceReflectorSet;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkLateReverbComponent*                 LateReverb;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkRoomComponent*                       Room;                                              // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSpatialAudioVolume">();
	}
	static class AAkSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSpatialAudioVolume>();
	}
};
static_assert(alignof(AAkSpatialAudioVolume) == 0x000008, "Wrong alignment on AAkSpatialAudioVolume");
static_assert(sizeof(AAkSpatialAudioVolume) == 0x000398, "Wrong size on AAkSpatialAudioVolume");
static_assert(offsetof(AAkSpatialAudioVolume, SurfaceReflectorSet) == 0x000380, "Member 'AAkSpatialAudioVolume::SurfaceReflectorSet' has a wrong offset!");
static_assert(offsetof(AAkSpatialAudioVolume, LateReverb) == 0x000388, "Member 'AAkSpatialAudioVolume::LateReverb' has a wrong offset!");
static_assert(offsetof(AAkSpatialAudioVolume, Room) == 0x000390, "Member 'AAkSpatialAudioVolume::Room' has a wrong offset!");

// Class AkAudio.AkReverbZone
// 0x0000 (0x0398 - 0x0398)
class AAkReverbZone final : public AAkSpatialAudioVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkReverbZone">();
	}
	static class AAkReverbZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkReverbZone>();
	}
};
static_assert(alignof(AAkReverbZone) == 0x000008, "Wrong alignment on AAkReverbZone");
static_assert(sizeof(AAkReverbZone) == 0x000398, "Wrong size on AAkReverbZone");

// Class AkAudio.AkMusicSyncCallbackInfo
// 0x0040 (0x0090 - 0x0050)
class UAkMusicSyncCallbackInfo final : public UAkCallbackInfo
{
public:
	int32                                         PlayingID;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAkSegmentInfo                         SegmentInfo;                                       // 0x0054(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EAkCallbackType                               MusicSyncType;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserCueName;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMusicSyncCallbackInfo">();
	}
	static class UAkMusicSyncCallbackInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMusicSyncCallbackInfo>();
	}
};
static_assert(alignof(UAkMusicSyncCallbackInfo) == 0x000008, "Wrong alignment on UAkMusicSyncCallbackInfo");
static_assert(sizeof(UAkMusicSyncCallbackInfo) == 0x000090, "Wrong size on UAkMusicSyncCallbackInfo");
static_assert(offsetof(UAkMusicSyncCallbackInfo, PlayingID) == 0x000050, "Member 'UAkMusicSyncCallbackInfo::PlayingID' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, SegmentInfo) == 0x000054, "Member 'UAkMusicSyncCallbackInfo::SegmentInfo' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, MusicSyncType) == 0x000078, "Member 'UAkMusicSyncCallbackInfo::MusicSyncType' has a wrong offset!");
static_assert(offsetof(UAkMusicSyncCallbackInfo, UserCueName) == 0x000080, "Member 'UAkMusicSyncCallbackInfo::UserCueName' has a wrong offset!");

// Class AkAudio.AkGeometryComponent
// 0x01C0 (0x04D0 - 0x0310)
class UAkGeometryComponent final : public UAkAcousticTextureSetComponent
{
public:
	EAkMeshType                                   MeshType;                                          // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LOD;                                               // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeldingThreshold;                                  // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UMaterialInterface*, struct FAkGeometrySurfaceOverride> StaticMeshSurfaceOverride;                         // 0x0318(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAkGeometrySurfaceOverride             CollisionMeshSurfaceOverride;                      // 0x0368(0x0018)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffraction;                                // 0x0380(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffractionOnBoundaryEdges;                 // 0x0381(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassPortalSubtraction;                          // 0x0382(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolid;                                            // 0x0383(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_384[0xC];                                      // 0x0384(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAkGeometryData                        GeometryData;                                      // 0x0390(0x00A0)(NativeAccessSpecifierPrivate)
	TMap<int32, double>                           SurfaceAreas;                                      // 0x0430(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_480[0x50];                                     // 0x0480(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConvertMesh();
	bool GetAcousticPropertiesOverride(class UMaterialInterface* InMaterialInterface, struct FAkGeometrySurfaceOverride* OutAcousticPropertiesOverride);
	void RemoveGeometry();
	void SendGeometry();
	bool SetAcousticPropertiesOverride(class UMaterialInterface* InMaterialInterface, const struct FAkGeometrySurfaceOverride& InAcousticPropertiesOverride, struct FAkGeometrySurfaceOverride* OutAcousticPropertiesOverride);
	bool SetAcousticTextureOverride(class UMaterialInterface* InMaterialInterface, class UAkAcousticTexture* InAcousticTexture, struct FAkGeometrySurfaceOverride* OutAcousticPropertiesOverride);
	void SetEnableDiffraction(bool bInEnableDiffraction, bool bInEnableDiffractionOnBoundaryEdges);
	bool SetEnableTransmissionLossOverride(class UMaterialInterface* InMaterialInterface, bool bInEnableTransmissionLossOverride, struct FAkGeometrySurfaceOverride* OutAcousticPropertiesOverride);
	bool SetTransmissionLossOverride(class UMaterialInterface* InMaterialInterface, float InTransmissionLoss, bool bInEnableTransmissionLossOverride, struct FAkGeometrySurfaceOverride* OutAcousticPropertiesOverride);
	void UpdateGeometry();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkGeometryComponent">();
	}
	static class UAkGeometryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkGeometryComponent>();
	}
};
static_assert(alignof(UAkGeometryComponent) == 0x000010, "Wrong alignment on UAkGeometryComponent");
static_assert(sizeof(UAkGeometryComponent) == 0x0004D0, "Wrong size on UAkGeometryComponent");
static_assert(offsetof(UAkGeometryComponent, MeshType) == 0x000308, "Member 'UAkGeometryComponent::MeshType' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, LOD) == 0x00030C, "Member 'UAkGeometryComponent::LOD' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, WeldingThreshold) == 0x000310, "Member 'UAkGeometryComponent::WeldingThreshold' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, StaticMeshSurfaceOverride) == 0x000318, "Member 'UAkGeometryComponent::StaticMeshSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, CollisionMeshSurfaceOverride) == 0x000368, "Member 'UAkGeometryComponent::CollisionMeshSurfaceOverride' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, bEnableDiffraction) == 0x000380, "Member 'UAkGeometryComponent::bEnableDiffraction' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, bEnableDiffractionOnBoundaryEdges) == 0x000381, "Member 'UAkGeometryComponent::bEnableDiffractionOnBoundaryEdges' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, bBypassPortalSubtraction) == 0x000382, "Member 'UAkGeometryComponent::bBypassPortalSubtraction' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, bSolid) == 0x000383, "Member 'UAkGeometryComponent::bSolid' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, GeometryData) == 0x000390, "Member 'UAkGeometryComponent::GeometryData' has a wrong offset!");
static_assert(offsetof(UAkGeometryComponent, SurfaceAreas) == 0x000430, "Member 'UAkGeometryComponent::SurfaceAreas' has a wrong offset!");

// Class AkAudio.AkLinuxInitializationSettings
// 0x0108 (0x0150 - 0x0048)
class UAkLinuxInitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00F8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                                  // 0x0118(0x0038)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxInitializationSettings">();
	}
	static class UAkLinuxInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxInitializationSettings>();
	}
};
static_assert(alignof(UAkLinuxInitializationSettings) == 0x000008, "Wrong alignment on UAkLinuxInitializationSettings");
static_assert(sizeof(UAkLinuxInitializationSettings) == 0x000150, "Wrong size on UAkLinuxInitializationSettings");
static_assert(offsetof(UAkLinuxInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkLinuxInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxInitializationSettings, CommunicationSettings) == 0x0000F8, "Member 'UAkLinuxInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxInitializationSettings, AdvancedSettings) == 0x000118, "Member 'UAkLinuxInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkInitBank
// 0x0080 (0x00F0 - 0x0070)
class UAkInitBank final : public UAkAudioType
{
public:
	struct FWwiseInitBankCookedData               InitBankCookedData;                                // 0x0070(0x0078)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkInitBank">();
	}
	static class UAkInitBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkInitBank>();
	}
};
static_assert(alignof(UAkInitBank) == 0x000008, "Wrong alignment on UAkInitBank");
static_assert(sizeof(UAkInitBank) == 0x0000F0, "Wrong size on UAkInitBank");
static_assert(offsetof(UAkInitBank, InitBankCookedData) == 0x000070, "Member 'UAkInitBank::InitBankCookedData' has a wrong offset!");

// Class AkAudio.AkIOSInitializationSettings
// 0x0120 (0x0168 - 0x0048)
class UAkIOSInitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAudioSession                        AudioSession;                                      // 0x00F8(0x0010)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x0108(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkIOSAdvancedInitializationSettings   AdvancedSettings;                                  // 0x0128(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkIOSInitializationSettings">();
	}
	static class UAkIOSInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkIOSInitializationSettings>();
	}
};
static_assert(alignof(UAkIOSInitializationSettings) == 0x000008, "Wrong alignment on UAkIOSInitializationSettings");
static_assert(sizeof(UAkIOSInitializationSettings) == 0x000168, "Wrong size on UAkIOSInitializationSettings");
static_assert(offsetof(UAkIOSInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkIOSInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, AudioSession) == 0x0000F8, "Member 'UAkIOSInitializationSettings::AudioSession' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, CommunicationSettings) == 0x000108, "Member 'UAkIOSInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkIOSInitializationSettings, AdvancedSettings) == 0x000128, "Member 'UAkIOSInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkIOSPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkIOSPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkIOSPlatformInfo">();
	}
	static class UAkIOSPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkIOSPlatformInfo>();
	}
};
static_assert(alignof(UAkIOSPlatformInfo) == 0x000008, "Wrong alignment on UAkIOSPlatformInfo");
static_assert(sizeof(UAkIOSPlatformInfo) == 0x000090, "Wrong size on UAkIOSPlatformInfo");

// Class AkAudio.AkReverbVolume
// 0x0038 (0x03B8 - 0x0380)
class AAkReverbVolume final : public AVolume
{
public:
	bool                                          bEnabled;                                          // 0x0380(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x0388(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuxBusName;                                        // 0x0390(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x03A0(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x03A4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x03A8(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkLateReverbComponent*                 LateReverbComponent;                               // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkReverbVolume">();
	}
	static class AAkReverbVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkReverbVolume>();
	}
};
static_assert(alignof(AAkReverbVolume) == 0x000008, "Wrong alignment on AAkReverbVolume");
static_assert(sizeof(AAkReverbVolume) == 0x0003B8, "Wrong size on AAkReverbVolume");
static_assert(offsetof(AAkReverbVolume, bEnabled) == 0x000380, "Member 'AAkReverbVolume::bEnabled' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, AuxBus) == 0x000388, "Member 'AAkReverbVolume::AuxBus' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, AuxBusName) == 0x000390, "Member 'AAkReverbVolume::AuxBusName' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, SendLevel) == 0x0003A0, "Member 'AAkReverbVolume::SendLevel' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, FadeRate) == 0x0003A4, "Member 'AAkReverbVolume::FadeRate' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, Priority) == 0x0003A8, "Member 'AAkReverbVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAkReverbVolume, LateReverbComponent) == 0x0003B0, "Member 'AAkReverbVolume::LateReverbComponent' has a wrong offset!");

// Class AkAudio.AkLateReverbComponent
// 0x0090 (0x0380 - 0x02F0)
class UAkLateReverbComponent final : public USceneComponent
{
public:
	bool                                          bEnable;                                           // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SendLevel;                                         // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeRate;                                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAssignAuxBus;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuxBusName;                                        // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBusManual;                                      // 0x0328(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x50];                                     // 0x0330(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssociateAkTextureSetComponent(class UAkAcousticTextureSetComponent* textureSetComponent);
	void SetAutoAssignAuxBus(bool bInEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLateReverbComponent">();
	}
	static class UAkLateReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLateReverbComponent>();
	}
};
static_assert(alignof(UAkLateReverbComponent) == 0x000010, "Wrong alignment on UAkLateReverbComponent");
static_assert(sizeof(UAkLateReverbComponent) == 0x000380, "Wrong size on UAkLateReverbComponent");
static_assert(offsetof(UAkLateReverbComponent, bEnable) == 0x0002F0, "Member 'UAkLateReverbComponent::bEnable' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, SendLevel) == 0x0002F4, "Member 'UAkLateReverbComponent::SendLevel' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, FadeRate) == 0x0002F8, "Member 'UAkLateReverbComponent::FadeRate' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, Priority) == 0x0002FC, "Member 'UAkLateReverbComponent::Priority' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AutoAssignAuxBus) == 0x000300, "Member 'UAkLateReverbComponent::AutoAssignAuxBus' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBus) == 0x000308, "Member 'UAkLateReverbComponent::AuxBus' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBusName) == 0x000310, "Member 'UAkLateReverbComponent::AuxBusName' has a wrong offset!");
static_assert(offsetof(UAkLateReverbComponent, AuxBusManual) == 0x000328, "Member 'UAkLateReverbComponent::AuxBusManual' has a wrong offset!");

// Class AkAudio.AkLinuxArm64InitializationSettings
// 0x0108 (0x0150 - 0x0048)
class UAkLinuxArm64InitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00F8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkAdvancedInitializationSettingsWithMultiCoreRendering AdvancedSettings;                                  // 0x0118(0x0038)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxArm64InitializationSettings">();
	}
	static class UAkLinuxArm64InitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxArm64InitializationSettings>();
	}
};
static_assert(alignof(UAkLinuxArm64InitializationSettings) == 0x000008, "Wrong alignment on UAkLinuxArm64InitializationSettings");
static_assert(sizeof(UAkLinuxArm64InitializationSettings) == 0x000150, "Wrong size on UAkLinuxArm64InitializationSettings");
static_assert(offsetof(UAkLinuxArm64InitializationSettings, CommonSettings) == 0x000048, "Member 'UAkLinuxArm64InitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxArm64InitializationSettings, CommunicationSettings) == 0x0000F8, "Member 'UAkLinuxArm64InitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkLinuxArm64InitializationSettings, AdvancedSettings) == 0x000118, "Member 'UAkLinuxArm64InitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkLinuxArm64PlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkLinuxArm64PlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxArm64PlatformInfo">();
	}
	static class UAkLinuxArm64PlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxArm64PlatformInfo>();
	}
};
static_assert(alignof(UAkLinuxArm64PlatformInfo) == 0x000008, "Wrong alignment on UAkLinuxArm64PlatformInfo");
static_assert(sizeof(UAkLinuxArm64PlatformInfo) == 0x000090, "Wrong size on UAkLinuxArm64PlatformInfo");

// Class AkAudio.AkLinuxPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkLinuxPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkLinuxPlatformInfo">();
	}
	static class UAkLinuxPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkLinuxPlatformInfo>();
	}
};
static_assert(alignof(UAkLinuxPlatformInfo) == 0x000008, "Wrong alignment on UAkLinuxPlatformInfo");
static_assert(sizeof(UAkLinuxPlatformInfo) == 0x000090, "Wrong size on UAkLinuxPlatformInfo");

// Class AkAudio.AkMacInitializationSettings
// 0x0110 (0x0158 - 0x0048)
class UAkMacInitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00F8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkMacAdvancedInitializationSettings   AdvancedSettings;                                  // 0x0118(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMacInitializationSettings">();
	}
	static class UAkMacInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMacInitializationSettings>();
	}
};
static_assert(alignof(UAkMacInitializationSettings) == 0x000008, "Wrong alignment on UAkMacInitializationSettings");
static_assert(sizeof(UAkMacInitializationSettings) == 0x000158, "Wrong size on UAkMacInitializationSettings");
static_assert(offsetof(UAkMacInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkMacInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkMacInitializationSettings, CommunicationSettings) == 0x0000F8, "Member 'UAkMacInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkMacInitializationSettings, AdvancedSettings) == 0x000118, "Member 'UAkMacInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkMacPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkMacPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkMacPlatformInfo">();
	}
	static class UAkMacPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkMacPlatformInfo>();
	}
};
static_assert(alignof(UAkMacPlatformInfo) == 0x000008, "Wrong alignment on UAkMacPlatformInfo");
static_assert(sizeof(UAkMacPlatformInfo) == 0x000090, "Wrong size on UAkMacPlatformInfo");

// Class AkAudio.AkRtpc
// 0x0010 (0x0080 - 0x0070)
class UAkRtpc final : public UAkAudioType
{
public:
	struct FWwiseGameParameterCookedData          GameParameterCookedData;                           // 0x0070(0x000C)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkRtpc">();
	}
	static class UAkRtpc* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkRtpc>();
	}
};
static_assert(alignof(UAkRtpc) == 0x000008, "Wrong alignment on UAkRtpc");
static_assert(sizeof(UAkRtpc) == 0x000080, "Wrong size on UAkRtpc");
static_assert(offsetof(UAkRtpc, GameParameterCookedData) == 0x000070, "Member 'UAkRtpc::GameParameterCookedData' has a wrong offset!");

// Class AkAudio.AkSettings
// 0x0418 (0x0460 - 0x0048)
class UAkSettings final : public UObject
{
public:
	uint8                                         MaxSimultaneousReverbVolumes;                      // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              WwiseProjectPath;                                  // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         WwiseSoundDataFolder;                              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         RootOutputPath;                                    // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         GeneratedSoundBanksFolder;                         // 0x0080(0x0010)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         WwiseStagingDirectory;                             // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoundBanksTransfered;                             // 0x00A0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetsMigrated;                                   // 0x00A1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectMigrated;                                  // 0x00A2(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoConnectToWAAPI;                               // 0x00A3(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DefaultOcclusionCollisionChannel;                  // 0x00A4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DefaultFitToGeometryCollisionChannel;              // 0x00A5(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftObjectPtr<class UPhysicalMaterial>, struct FAkGeometrySurfacePropertiesToMap> AkGeometryMap;                                     // 0x00A8(0x0050)(Config, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAcousticTexture>      DefaultAcousticTexture;                            // 0x00F8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultTransmissionLoss;                           // 0x0120(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              GeometrySurfacePropertiesTable;                    // 0x0128(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalDecayAbsorption;                             // 0x0150(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAuxBus>               DefaultReverbAuxBus;                               // 0x0158(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, TSoftObjectPtr<class UAkAuxBus>>  EnvironmentDecayAuxBusMap;                         // 0x0180(0x0050)(Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              ReverbAssignmentTable;                             // 0x01D0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HFDampingName;                                     // 0x01F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DecayEstimateName;                                 // 0x0208(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TimeToFirstReflectionName;                         // 0x0218(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 HFDampingRTPC;                                     // 0x0228(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 DecayEstimateRTPC;                                 // 0x0250(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkRtpc>                 TimeToFirstReflectionRTPC;                         // 0x0278(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           AudioInputEvent;                                   // 0x02A0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FAkAcousticTextureParams> AcousticTextureParamsMap;                          // 0x02C8(0x0050)(Config, Deprecated, NativeAccessSpecifierPublic)
	bool                                          SplitSwitchContainerMedia;                         // 0x0318(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SplitMediaPerFolder;                               // 0x0319(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseEventBasedPackaging;                            // 0x031A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31B[0x5];                                      // 0x031B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CommandletCommitMessage;                           // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UnrealCultureToWwiseCulture;                       // 0x0330(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	class FString                                 DefaultAssetCreationPath;                          // 0x0380(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkInitBank>             InitBank;                                          // 0x0390(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkUnrealAudioRouting                         AudioRouting;                                      // 0x03B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWwiseSoundEngineEnabled;                          // 0x03BC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWwiseAudioLinkEnabled;                            // 0x03BD(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAkAudioMixerEnabled;                              // 0x03BE(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BF[0x1];                                      // 0x03BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultListenerScalingFactor;                      // 0x03C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AskedToUseNewAssetManagement;                      // 0x03C4(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMultiCoreRendering;                         // 0x03C5(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MigratedEnableMultiCoreRendering;                  // 0x03C6(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FixupRedirectorsDuringMigration;                   // 0x03C7(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x03C8(0x0010)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x03D8(0x0010)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x58];                                     // 0x03E8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         AkComponentClass;                                  // 0x0440(0x0020)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSettings">();
	}
	static class UAkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSettings>();
	}
};
static_assert(alignof(UAkSettings) == 0x000008, "Wrong alignment on UAkSettings");
static_assert(sizeof(UAkSettings) == 0x000460, "Wrong size on UAkSettings");
static_assert(offsetof(UAkSettings, MaxSimultaneousReverbVolumes) == 0x000048, "Member 'UAkSettings::MaxSimultaneousReverbVolumes' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseProjectPath) == 0x000050, "Member 'UAkSettings::WwiseProjectPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseSoundDataFolder) == 0x000060, "Member 'UAkSettings::WwiseSoundDataFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, RootOutputPath) == 0x000070, "Member 'UAkSettings::RootOutputPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, GeneratedSoundBanksFolder) == 0x000080, "Member 'UAkSettings::GeneratedSoundBanksFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseStagingDirectory) == 0x000090, "Member 'UAkSettings::WwiseStagingDirectory' has a wrong offset!");
static_assert(offsetof(UAkSettings, bSoundBanksTransfered) == 0x0000A0, "Member 'UAkSettings::bSoundBanksTransfered' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAssetsMigrated) == 0x0000A1, "Member 'UAkSettings::bAssetsMigrated' has a wrong offset!");
static_assert(offsetof(UAkSettings, bProjectMigrated) == 0x0000A2, "Member 'UAkSettings::bProjectMigrated' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAutoConnectToWAAPI) == 0x0000A3, "Member 'UAkSettings::bAutoConnectToWAAPI' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultOcclusionCollisionChannel) == 0x0000A4, "Member 'UAkSettings::DefaultOcclusionCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultFitToGeometryCollisionChannel) == 0x0000A5, "Member 'UAkSettings::DefaultFitToGeometryCollisionChannel' has a wrong offset!");
static_assert(offsetof(UAkSettings, AkGeometryMap) == 0x0000A8, "Member 'UAkSettings::AkGeometryMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultAcousticTexture) == 0x0000F8, "Member 'UAkSettings::DefaultAcousticTexture' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultTransmissionLoss) == 0x000120, "Member 'UAkSettings::DefaultTransmissionLoss' has a wrong offset!");
static_assert(offsetof(UAkSettings, GeometrySurfacePropertiesTable) == 0x000128, "Member 'UAkSettings::GeometrySurfacePropertiesTable' has a wrong offset!");
static_assert(offsetof(UAkSettings, GlobalDecayAbsorption) == 0x000150, "Member 'UAkSettings::GlobalDecayAbsorption' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultReverbAuxBus) == 0x000158, "Member 'UAkSettings::DefaultReverbAuxBus' has a wrong offset!");
static_assert(offsetof(UAkSettings, EnvironmentDecayAuxBusMap) == 0x000180, "Member 'UAkSettings::EnvironmentDecayAuxBusMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, ReverbAssignmentTable) == 0x0001D0, "Member 'UAkSettings::ReverbAssignmentTable' has a wrong offset!");
static_assert(offsetof(UAkSettings, HFDampingName) == 0x0001F8, "Member 'UAkSettings::HFDampingName' has a wrong offset!");
static_assert(offsetof(UAkSettings, DecayEstimateName) == 0x000208, "Member 'UAkSettings::DecayEstimateName' has a wrong offset!");
static_assert(offsetof(UAkSettings, TimeToFirstReflectionName) == 0x000218, "Member 'UAkSettings::TimeToFirstReflectionName' has a wrong offset!");
static_assert(offsetof(UAkSettings, HFDampingRTPC) == 0x000228, "Member 'UAkSettings::HFDampingRTPC' has a wrong offset!");
static_assert(offsetof(UAkSettings, DecayEstimateRTPC) == 0x000250, "Member 'UAkSettings::DecayEstimateRTPC' has a wrong offset!");
static_assert(offsetof(UAkSettings, TimeToFirstReflectionRTPC) == 0x000278, "Member 'UAkSettings::TimeToFirstReflectionRTPC' has a wrong offset!");
static_assert(offsetof(UAkSettings, AudioInputEvent) == 0x0002A0, "Member 'UAkSettings::AudioInputEvent' has a wrong offset!");
static_assert(offsetof(UAkSettings, AcousticTextureParamsMap) == 0x0002C8, "Member 'UAkSettings::AcousticTextureParamsMap' has a wrong offset!");
static_assert(offsetof(UAkSettings, SplitSwitchContainerMedia) == 0x000318, "Member 'UAkSettings::SplitSwitchContainerMedia' has a wrong offset!");
static_assert(offsetof(UAkSettings, SplitMediaPerFolder) == 0x000319, "Member 'UAkSettings::SplitMediaPerFolder' has a wrong offset!");
static_assert(offsetof(UAkSettings, UseEventBasedPackaging) == 0x00031A, "Member 'UAkSettings::UseEventBasedPackaging' has a wrong offset!");
static_assert(offsetof(UAkSettings, CommandletCommitMessage) == 0x000320, "Member 'UAkSettings::CommandletCommitMessage' has a wrong offset!");
static_assert(offsetof(UAkSettings, UnrealCultureToWwiseCulture) == 0x000330, "Member 'UAkSettings::UnrealCultureToWwiseCulture' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultAssetCreationPath) == 0x000380, "Member 'UAkSettings::DefaultAssetCreationPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, InitBank) == 0x000390, "Member 'UAkSettings::InitBank' has a wrong offset!");
static_assert(offsetof(UAkSettings, AudioRouting) == 0x0003B8, "Member 'UAkSettings::AudioRouting' has a wrong offset!");
static_assert(offsetof(UAkSettings, bWwiseSoundEngineEnabled) == 0x0003BC, "Member 'UAkSettings::bWwiseSoundEngineEnabled' has a wrong offset!");
static_assert(offsetof(UAkSettings, bWwiseAudioLinkEnabled) == 0x0003BD, "Member 'UAkSettings::bWwiseAudioLinkEnabled' has a wrong offset!");
static_assert(offsetof(UAkSettings, bAkAudioMixerEnabled) == 0x0003BE, "Member 'UAkSettings::bAkAudioMixerEnabled' has a wrong offset!");
static_assert(offsetof(UAkSettings, DefaultListenerScalingFactor) == 0x0003C0, "Member 'UAkSettings::DefaultListenerScalingFactor' has a wrong offset!");
static_assert(offsetof(UAkSettings, AskedToUseNewAssetManagement) == 0x0003C4, "Member 'UAkSettings::AskedToUseNewAssetManagement' has a wrong offset!");
static_assert(offsetof(UAkSettings, bEnableMultiCoreRendering) == 0x0003C5, "Member 'UAkSettings::bEnableMultiCoreRendering' has a wrong offset!");
static_assert(offsetof(UAkSettings, MigratedEnableMultiCoreRendering) == 0x0003C6, "Member 'UAkSettings::MigratedEnableMultiCoreRendering' has a wrong offset!");
static_assert(offsetof(UAkSettings, FixupRedirectorsDuringMigration) == 0x0003C7, "Member 'UAkSettings::FixupRedirectorsDuringMigration' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseWindowsInstallationPath) == 0x0003C8, "Member 'UAkSettings::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, WwiseMacInstallationPath) == 0x0003D8, "Member 'UAkSettings::WwiseMacInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettings, AkComponentClass) == 0x000440, "Member 'UAkSettings::AkComponentClass' has a wrong offset!");

// Class AkAudio.AkSettingsPerUser
// 0x0068 (0x00B0 - 0x0048)
class UAkSettingsPerUser final : public UObject
{
public:
	struct FDirectoryPath                         WwiseWindowsInstallationPath;                      // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilePath                              WwiseMacInstallationPath;                          // 0x0058(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         RootOutputPathOverride;                            // 0x0068(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectoryPath                         GeneratedSoundBanksFolderOverride;                 // 0x0078(0x0010)(ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WaapiIPAddress;                                    // 0x0088(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WaapiPort;                                         // 0x0098(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoConnectToWAAPI;                               // 0x009C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoSyncSelection;                                 // 0x009D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaapiCallsTimeout;                                 // 0x00A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WaapiTranslatorTimeout;                            // 0x00A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuppressGeneratedSoundBanksPathWarnings;           // 0x00A8(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SoundDataGenerationSkipLanguage;                   // 0x00A9(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AskForWwiseAssetReload;                            // 0x00AA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSettingsPerUser">();
	}
	static class UAkSettingsPerUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSettingsPerUser>();
	}
};
static_assert(alignof(UAkSettingsPerUser) == 0x000008, "Wrong alignment on UAkSettingsPerUser");
static_assert(sizeof(UAkSettingsPerUser) == 0x0000B0, "Wrong size on UAkSettingsPerUser");
static_assert(offsetof(UAkSettingsPerUser, WwiseWindowsInstallationPath) == 0x000048, "Member 'UAkSettingsPerUser::WwiseWindowsInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WwiseMacInstallationPath) == 0x000058, "Member 'UAkSettingsPerUser::WwiseMacInstallationPath' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, RootOutputPathOverride) == 0x000068, "Member 'UAkSettingsPerUser::RootOutputPathOverride' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, GeneratedSoundBanksFolderOverride) == 0x000078, "Member 'UAkSettingsPerUser::GeneratedSoundBanksFolderOverride' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiIPAddress) == 0x000088, "Member 'UAkSettingsPerUser::WaapiIPAddress' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiPort) == 0x000098, "Member 'UAkSettingsPerUser::WaapiPort' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, bAutoConnectToWAAPI) == 0x00009C, "Member 'UAkSettingsPerUser::bAutoConnectToWAAPI' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, AutoSyncSelection) == 0x00009D, "Member 'UAkSettingsPerUser::AutoSyncSelection' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiCallsTimeout) == 0x0000A0, "Member 'UAkSettingsPerUser::WaapiCallsTimeout' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, WaapiTranslatorTimeout) == 0x0000A4, "Member 'UAkSettingsPerUser::WaapiTranslatorTimeout' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, SuppressGeneratedSoundBanksPathWarnings) == 0x0000A8, "Member 'UAkSettingsPerUser::SuppressGeneratedSoundBanksPathWarnings' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, SoundDataGenerationSkipLanguage) == 0x0000A9, "Member 'UAkSettingsPerUser::SoundDataGenerationSkipLanguage' has a wrong offset!");
static_assert(offsetof(UAkSettingsPerUser, AskForWwiseAssetReload) == 0x0000AA, "Member 'UAkSettingsPerUser::AskForWwiseAssetReload' has a wrong offset!");

// Class AkAudio.AkSpotReflector
// 0x0038 (0x0380 - 0x0348)
class AAkSpotReflector final : public AActor
{
public:
	class UAkAuxBus*                              EarlyReflectionAuxBus;                             // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EarlyReflectionAuxBusName;                         // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAcousticTexture*                     AcousticTexture;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScalingFactor;                             // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SameRoomOnly;                                      // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRoomOverride;                                // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RoomOverride;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSpotReflector">();
	}
	static class AAkSpotReflector* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAkSpotReflector>();
	}
};
static_assert(alignof(AAkSpotReflector) == 0x000008, "Wrong alignment on AAkSpotReflector");
static_assert(sizeof(AAkSpotReflector) == 0x000380, "Wrong size on AAkSpotReflector");
static_assert(offsetof(AAkSpotReflector, EarlyReflectionAuxBus) == 0x000348, "Member 'AAkSpotReflector::EarlyReflectionAuxBus' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, EarlyReflectionAuxBusName) == 0x000350, "Member 'AAkSpotReflector::EarlyReflectionAuxBusName' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, AcousticTexture) == 0x000360, "Member 'AAkSpotReflector::AcousticTexture' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, DistanceScalingFactor) == 0x000368, "Member 'AAkSpotReflector::DistanceScalingFactor' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, Level) == 0x00036C, "Member 'AAkSpotReflector::Level' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, SameRoomOnly) == 0x000370, "Member 'AAkSpotReflector::SameRoomOnly' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, EnableRoomOverride) == 0x000371, "Member 'AAkSpotReflector::EnableRoomOverride' has a wrong offset!");
static_assert(offsetof(AAkSpotReflector, RoomOverride) == 0x000378, "Member 'AAkSpotReflector::RoomOverride' has a wrong offset!");

// Class AkAudio.AkStateValue
// 0x0000 (0x0090 - 0x0090)
class UAkStateValue final : public UAkGroupValue
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkStateValue">();
	}
	static class UAkStateValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkStateValue>();
	}
};
static_assert(alignof(UAkStateValue) == 0x000008, "Wrong alignment on UAkStateValue");
static_assert(sizeof(UAkStateValue) == 0x000090, "Wrong size on UAkStateValue");

// Class AkAudio.UAkSubmixInputComponent
// 0x0020 (0x0550 - 0x0530)
class UUAkSubmixInputComponent final : public UAkAudioInputComponent
{
public:
	class USoundSubmix*                           SubmixToRecord;                                    // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_530[0x20];                                     // 0x0530(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UAkSubmixInputComponent">();
	}
	static class UUAkSubmixInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUAkSubmixInputComponent>();
	}
};
static_assert(alignof(UUAkSubmixInputComponent) == 0x000010, "Wrong alignment on UUAkSubmixInputComponent");
static_assert(sizeof(UUAkSubmixInputComponent) == 0x000550, "Wrong size on UUAkSubmixInputComponent");
static_assert(offsetof(UUAkSubmixInputComponent, SubmixToRecord) == 0x000528, "Member 'UUAkSubmixInputComponent::SubmixToRecord' has a wrong offset!");

// Class AkAudio.AkSurfaceReflectorSetComponent
// 0x0030 (0x0340 - 0x0310)
class UAkSurfaceReflectorSetComponent final : public UAkAcousticTextureSetComponent
{
public:
	bool                                          bEnableSurfaceReflectors;                          // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkSurfacePoly>                 AcousticPolys;                                     // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffraction;                                // 0x0320(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDiffractionOnBoundaryEdges;                 // 0x0321(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassPortalSubtraction;                          // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSolid;                                            // 0x0323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x1C];                                     // 0x0324(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RemoveSurfaceReflectorSet();
	void SendSurfaceReflectorSet();
	void SetAcousticTexture(TArray<int32>& InSurfaceIndexesToEdit, class UAkAcousticTexture* InAcousticTexture, bool bInEnableSurface);
	void SetEnable(bool bInEnable);
	void SetEnableDiffraction(bool bInEnableDiffraction, bool bInEnableDiffractionOnBoundaryEdges);
	void SetEnableSurface(TArray<int32>& InSurfaceIndexesToEdit, bool bInEnableSurface);
	void SetSurfaceProperties(TArray<int32>& InSurfaceIndexesToEdit, const struct FAkSurfacePoly& InSurfaceProperties);
	void SetTransmissionLoss(TArray<int32>& InSurfaceIndexesToEdit, float InTransmissionLoss, bool bInEnableSurface);
	void UpdateAcousticProperties(const TArray<struct FAkSurfacePoly>& in_AcousticPolys);
	void UpdateSurfaceReflectorSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkSurfaceReflectorSetComponent">();
	}
	static class UAkSurfaceReflectorSetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkSurfaceReflectorSetComponent>();
	}
};
static_assert(alignof(UAkSurfaceReflectorSetComponent) == 0x000010, "Wrong alignment on UAkSurfaceReflectorSetComponent");
static_assert(sizeof(UAkSurfaceReflectorSetComponent) == 0x000340, "Wrong size on UAkSurfaceReflectorSetComponent");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bEnableSurfaceReflectors) == 0x000308, "Member 'UAkSurfaceReflectorSetComponent::bEnableSurfaceReflectors' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, AcousticPolys) == 0x000310, "Member 'UAkSurfaceReflectorSetComponent::AcousticPolys' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bEnableDiffraction) == 0x000320, "Member 'UAkSurfaceReflectorSetComponent::bEnableDiffraction' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bEnableDiffractionOnBoundaryEdges) == 0x000321, "Member 'UAkSurfaceReflectorSetComponent::bEnableDiffractionOnBoundaryEdges' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bBypassPortalSubtraction) == 0x000322, "Member 'UAkSurfaceReflectorSetComponent::bBypassPortalSubtraction' has a wrong offset!");
static_assert(offsetof(UAkSurfaceReflectorSetComponent, bSolid) == 0x000323, "Member 'UAkSurfaceReflectorSetComponent::bSolid' has a wrong offset!");

// Class AkAudio.AkTrigger
// 0x0010 (0x0080 - 0x0070)
class UAkTrigger final : public UAkAudioType
{
public:
	struct FWwiseTriggerCookedData                TriggerCookedData;                                 // 0x0070(0x000C)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkTrigger">();
	}
	static class UAkTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkTrigger>();
	}
};
static_assert(alignof(UAkTrigger) == 0x000008, "Wrong alignment on UAkTrigger");
static_assert(sizeof(UAkTrigger) == 0x000080, "Wrong size on UAkTrigger");
static_assert(offsetof(UAkTrigger, TriggerCookedData) == 0x000070, "Member 'UAkTrigger::TriggerCookedData' has a wrong offset!");

// Class AkAudio.AkTVOSPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkTVOSPlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkTVOSPlatformInfo">();
	}
	static class UAkTVOSPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkTVOSPlatformInfo>();
	}
};
static_assert(alignof(UAkTVOSPlatformInfo) == 0x000008, "Wrong alignment on UAkTVOSPlatformInfo");
static_assert(sizeof(UAkTVOSPlatformInfo) == 0x000090, "Wrong size on UAkTVOSPlatformInfo");

// Class AkAudio.AkWindowsInitializationSettings
// 0x0110 (0x0158 - 0x0048)
class UAkWindowsInitializationSettings final : public UAkPlatformInitializationSettingsBase
{
public:
	struct FAkCommonInitializationSettingsWithSampleRate CommonSettings;                                    // 0x0048(0x00B0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkCommunicationSettingsWithSystemInitialization CommunicationSettings;                             // 0x00F8(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FAkWindowsAdvancedInitializationSettings AdvancedSettings;                                  // 0x0118(0x0040)(Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)

public:
	void MigrateMultiCoreRendering(bool NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWindowsInitializationSettings">();
	}
	static class UAkWindowsInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWindowsInitializationSettings>();
	}
};
static_assert(alignof(UAkWindowsInitializationSettings) == 0x000008, "Wrong alignment on UAkWindowsInitializationSettings");
static_assert(sizeof(UAkWindowsInitializationSettings) == 0x000158, "Wrong size on UAkWindowsInitializationSettings");
static_assert(offsetof(UAkWindowsInitializationSettings, CommonSettings) == 0x000048, "Member 'UAkWindowsInitializationSettings::CommonSettings' has a wrong offset!");
static_assert(offsetof(UAkWindowsInitializationSettings, CommunicationSettings) == 0x0000F8, "Member 'UAkWindowsInitializationSettings::CommunicationSettings' has a wrong offset!");
static_assert(offsetof(UAkWindowsInitializationSettings, AdvancedSettings) == 0x000118, "Member 'UAkWindowsInitializationSettings::AdvancedSettings' has a wrong offset!");

// Class AkAudio.AkWin32PlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkWin32PlatformInfo final : public UAkPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWin32PlatformInfo">();
	}
	static class UAkWin32PlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWin32PlatformInfo>();
	}
};
static_assert(alignof(UAkWin32PlatformInfo) == 0x000008, "Wrong alignment on UAkWin32PlatformInfo");
static_assert(sizeof(UAkWin32PlatformInfo) == 0x000090, "Wrong size on UAkWin32PlatformInfo");

// Class AkAudio.AkWindowsPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkWindowsPlatformInfo final : public UAkWin64PlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWindowsPlatformInfo">();
	}
	static class UAkWindowsPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWindowsPlatformInfo>();
	}
};
static_assert(alignof(UAkWindowsPlatformInfo) == 0x000008, "Wrong alignment on UAkWindowsPlatformInfo");
static_assert(sizeof(UAkWindowsPlatformInfo) == 0x000090, "Wrong size on UAkWindowsPlatformInfo");

// Class AkAudio.AkWinAnvilInitializationSettings
// 0x0000 (0x0158 - 0x0158)
class UAkWinAnvilInitializationSettings final : public UAkWinGDKInitializationSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWinAnvilInitializationSettings">();
	}
	static class UAkWinAnvilInitializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWinAnvilInitializationSettings>();
	}
};
static_assert(alignof(UAkWinAnvilInitializationSettings) == 0x000008, "Wrong alignment on UAkWinAnvilInitializationSettings");
static_assert(sizeof(UAkWinAnvilInitializationSettings) == 0x000158, "Wrong size on UAkWinAnvilInitializationSettings");

// Class AkAudio.AkWinAnvilPlatformInfo
// 0x0000 (0x0090 - 0x0090)
class UAkWinAnvilPlatformInfo final : public UAkWinGDKPlatformInfo
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AkWinAnvilPlatformInfo">();
	}
	static class UAkWinAnvilPlatformInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAkWinAnvilPlatformInfo>();
	}
};
static_assert(alignof(UAkWinAnvilPlatformInfo) == 0x000008, "Wrong alignment on UAkWinAnvilPlatformInfo");
static_assert(sizeof(UAkWinAnvilPlatformInfo) == 0x000090, "Wrong size on UAkWinAnvilPlatformInfo");

// Class AkAudio.MovieSceneAkAudioEventSection
// 0x0068 (0x0178 - 0x0110)
class UMovieSceneAkAudioEventSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_110[0x28];                                     // 0x0110(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Event;                                             // 0x0138(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          RetriggerEvent;                                    // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScrubTailLengthMs;                                 // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          StopAtSectionEnd;                                  // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSourceDuration;                                 // 0x014C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 MaxDurationSourceID;                               // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x18];                                     // 0x0160(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAkAudioEventSection">();
	}
	static class UMovieSceneAkAudioEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAkAudioEventSection>();
	}
};
static_assert(alignof(UMovieSceneAkAudioEventSection) == 0x000008, "Wrong alignment on UMovieSceneAkAudioEventSection");
static_assert(sizeof(UMovieSceneAkAudioEventSection) == 0x000178, "Wrong size on UMovieSceneAkAudioEventSection");
static_assert(offsetof(UMovieSceneAkAudioEventSection, Event) == 0x000138, "Member 'UMovieSceneAkAudioEventSection::Event' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, RetriggerEvent) == 0x000140, "Member 'UMovieSceneAkAudioEventSection::RetriggerEvent' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, ScrubTailLengthMs) == 0x000144, "Member 'UMovieSceneAkAudioEventSection::ScrubTailLengthMs' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, StopAtSectionEnd) == 0x000148, "Member 'UMovieSceneAkAudioEventSection::StopAtSectionEnd' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, MaxSourceDuration) == 0x00014C, "Member 'UMovieSceneAkAudioEventSection::MaxSourceDuration' has a wrong offset!");
static_assert(offsetof(UMovieSceneAkAudioEventSection, MaxDurationSourceID) == 0x000150, "Member 'UMovieSceneAkAudioEventSection::MaxDurationSourceID' has a wrong offset!");

// Class AkAudio.MovieSceneWwiseGameParameterSection
// 0x01C8 (0x02D8 - 0x0110)
class UMovieSceneWwiseGameParameterSection final : public UMovieSceneSection
{
public:
	class UAkRtpc*                                GameParameter;                                     // 0x0110(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRichCurve                             FloatCurve;                                        // 0x0118(0x0080)(Protected, NativeAccessSpecifierProtected)
	struct FMovieSceneFloatChannelSerializationHelper FloatChannelSerializationHelper;                   // 0x0198(0x0030)(Protected, NativeAccessSpecifierProtected)
	struct FMovieSceneFloatChannel                GameParameterChannel;                              // 0x01C8(0x0110)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneWwiseGameParameterSection">();
	}
	static class UMovieSceneWwiseGameParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneWwiseGameParameterSection>();
	}
};
static_assert(alignof(UMovieSceneWwiseGameParameterSection) == 0x000008, "Wrong alignment on UMovieSceneWwiseGameParameterSection");
static_assert(sizeof(UMovieSceneWwiseGameParameterSection) == 0x0002D8, "Wrong size on UMovieSceneWwiseGameParameterSection");
static_assert(offsetof(UMovieSceneWwiseGameParameterSection, GameParameter) == 0x000110, "Member 'UMovieSceneWwiseGameParameterSection::GameParameter' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseGameParameterSection, FloatCurve) == 0x000118, "Member 'UMovieSceneWwiseGameParameterSection::FloatCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseGameParameterSection, FloatChannelSerializationHelper) == 0x000198, "Member 'UMovieSceneWwiseGameParameterSection::FloatChannelSerializationHelper' has a wrong offset!");
static_assert(offsetof(UMovieSceneWwiseGameParameterSection, GameParameterChannel) == 0x0001C8, "Member 'UMovieSceneWwiseGameParameterSection::GameParameterChannel' has a wrong offset!");

// Class AkAudio.MovieSceneWwiseGameParameterTrack
// 0x0008 (0x00D8 - 0x00D0)
class UMovieSceneWwiseGameParameterTrack final : public UMovieSceneAkTrack
{
public:
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneWwiseGameParameterTrack">();
	}
	static class UMovieSceneWwiseGameParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneWwiseGameParameterTrack>();
	}
};
static_assert(alignof(UMovieSceneWwiseGameParameterTrack) == 0x000008, "Wrong alignment on UMovieSceneWwiseGameParameterTrack");
static_assert(sizeof(UMovieSceneWwiseGameParameterTrack) == 0x0000D8, "Wrong size on UMovieSceneWwiseGameParameterTrack");

// Class AkAudio.PostEventAsync
// 0x0058 (0x00A8 - 0x0050)
class UPostEventAsync final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 PlayingID)> Completed;                                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x48];                                      // 0x0060(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPostEventAsync* PostEventAsync(const class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, class AActor* Actor, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, bool bStopWhenAttachedToDestroyed);

	void PollPostEventFuture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostEventAsync">();
	}
	static class UPostEventAsync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostEventAsync>();
	}
};
static_assert(alignof(UPostEventAsync) == 0x000008, "Wrong alignment on UPostEventAsync");
static_assert(sizeof(UPostEventAsync) == 0x0000A8, "Wrong size on UPostEventAsync");
static_assert(offsetof(UPostEventAsync, Completed) == 0x000050, "Member 'UPostEventAsync::Completed' has a wrong offset!");

// Class AkAudio.PostEventAtLocationAsync
// 0x0068 (0x00B8 - 0x0050)
class UPostEventAtLocationAsync final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(int32 PlayingID)> Completed;                                         // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x58];                                      // 0x0060(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPostEventAtLocationAsync* PostEventAtLocationAsync(const class UObject* WorldContextObject, class UAkAudioEvent* AkEvent, const struct FVector& Location, const struct FRotator& Orientation);

	void PollPostEventFuture();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostEventAtLocationAsync">();
	}
	static class UPostEventAtLocationAsync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostEventAtLocationAsync>();
	}
};
static_assert(alignof(UPostEventAtLocationAsync) == 0x000008, "Wrong alignment on UPostEventAtLocationAsync");
static_assert(sizeof(UPostEventAtLocationAsync) == 0x0000B8, "Wrong size on UPostEventAtLocationAsync");
static_assert(offsetof(UPostEventAtLocationAsync, Completed) == 0x000050, "Member 'UPostEventAtLocationAsync::Completed' has a wrong offset!");

}

