#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CR_PC_DUN_M_Arm_IK

#include "Basic.hpp"

#include "PBIK_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass CR_PC_DUN_M_Arm_IK.CR_PC_DUN_M_Arm_IK_C
// 0x0210 (0x0840 - 0x0630)
class UCR_PC_DUN_M_Arm_IK_C final : public UControlRig
{
public:
	bool                                          feet_perform_ik_trace;                             // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          feet_perform_normal_adjust;                        // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          pause_pose;                                        // 0x0632(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          update_pose;                                       // 0x0633(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        movement_speed;                                    // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ground_Offset_Pitch;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   foot_ctrl_l_limits_name;                           // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   foot_ctrl_r_limits_name;                           // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_l_lock_alpha;                                 // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_r_lock_alpha;                                 // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                foot_l_lock_location;                              // 0x0668(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               foot_l_lock_rotation;                              // 0x0680(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        foot_l_z_offset;                                   // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                foot_r_lock_location;                              // 0x06A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               foot_r_lock_rotation;                              // 0x06B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        foot_r_z_offset;                                   // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_l_z_offset_target;                            // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_r_z_offset_target;                            // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        pelvis_z_offset;                                   // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  foot_l_normal_hit;                                 // 0x06F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  foot_r_normal_hit;                                 // 0x0710(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  foot_l_normal_hit_target;                          // 0x0730(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FQuat                                  foot_r_normal_hit_target;                          // 0x0750(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRigPose                               hit_pose;                                          // 0x0770(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          is_moving;                                         // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E1[0x3];                                      // 0x07E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         race_int;                                          // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         gender_int;                                        // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LOD;                                               // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        pelvis_clamp_min;                                  // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_trace_height;                                 // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_trace_offset_inner;                           // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_trace_depth_target_stand_min;                 // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_trace_depth_target_stand_max;                 // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_trace_depth_target_moving_min;                // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        foot_trace_depth_target_moving_max;                // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         race_from_game;                                    // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         race_current;                                      // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         gender_from_game;                                  // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         gender_current;                                    // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          trigger_update;                                    // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CR_PC_DUN_M_Arm_IK_C">();
	}
	static class UCR_PC_DUN_M_Arm_IK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCR_PC_DUN_M_Arm_IK_C>();
	}
};
static_assert(alignof(UCR_PC_DUN_M_Arm_IK_C) == 0x000010, "Wrong alignment on UCR_PC_DUN_M_Arm_IK_C");
static_assert(sizeof(UCR_PC_DUN_M_Arm_IK_C) == 0x000840, "Wrong size on UCR_PC_DUN_M_Arm_IK_C");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, feet_perform_ik_trace) == 0x000630, "Member 'UCR_PC_DUN_M_Arm_IK_C::feet_perform_ik_trace' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, feet_perform_normal_adjust) == 0x000631, "Member 'UCR_PC_DUN_M_Arm_IK_C::feet_perform_normal_adjust' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, pause_pose) == 0x000632, "Member 'UCR_PC_DUN_M_Arm_IK_C::pause_pose' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, update_pose) == 0x000633, "Member 'UCR_PC_DUN_M_Arm_IK_C::update_pose' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, movement_speed) == 0x000638, "Member 'UCR_PC_DUN_M_Arm_IK_C::movement_speed' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, Ground_Offset_Pitch) == 0x000640, "Member 'UCR_PC_DUN_M_Arm_IK_C::Ground_Offset_Pitch' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_ctrl_l_limits_name) == 0x000648, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_ctrl_l_limits_name' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_ctrl_r_limits_name) == 0x000650, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_ctrl_r_limits_name' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_lock_alpha) == 0x000658, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_lock_alpha' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_lock_alpha) == 0x000660, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_lock_alpha' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_lock_location) == 0x000668, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_lock_location' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_lock_rotation) == 0x000680, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_lock_rotation' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_z_offset) == 0x000698, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_z_offset' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_lock_location) == 0x0006A0, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_lock_location' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_lock_rotation) == 0x0006B8, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_lock_rotation' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_z_offset) == 0x0006D0, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_z_offset' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_z_offset_target) == 0x0006D8, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_z_offset_target' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_z_offset_target) == 0x0006E0, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_z_offset_target' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, pelvis_z_offset) == 0x0006E8, "Member 'UCR_PC_DUN_M_Arm_IK_C::pelvis_z_offset' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_normal_hit) == 0x0006F0, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_normal_hit' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_normal_hit) == 0x000710, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_normal_hit' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_l_normal_hit_target) == 0x000730, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_l_normal_hit_target' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_r_normal_hit_target) == 0x000750, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_r_normal_hit_target' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, hit_pose) == 0x000770, "Member 'UCR_PC_DUN_M_Arm_IK_C::hit_pose' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, is_moving) == 0x0007E0, "Member 'UCR_PC_DUN_M_Arm_IK_C::is_moving' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, race_int) == 0x0007E4, "Member 'UCR_PC_DUN_M_Arm_IK_C::race_int' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, gender_int) == 0x0007E8, "Member 'UCR_PC_DUN_M_Arm_IK_C::gender_int' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, LOD) == 0x0007EC, "Member 'UCR_PC_DUN_M_Arm_IK_C::LOD' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, pelvis_clamp_min) == 0x0007F0, "Member 'UCR_PC_DUN_M_Arm_IK_C::pelvis_clamp_min' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_trace_height) == 0x0007F8, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_trace_height' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_trace_offset_inner) == 0x000800, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_trace_offset_inner' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_trace_depth_target_stand_min) == 0x000808, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_trace_depth_target_stand_min' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_trace_depth_target_stand_max) == 0x000810, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_trace_depth_target_stand_max' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_trace_depth_target_moving_min) == 0x000818, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_trace_depth_target_moving_min' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, foot_trace_depth_target_moving_max) == 0x000820, "Member 'UCR_PC_DUN_M_Arm_IK_C::foot_trace_depth_target_moving_max' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, race_from_game) == 0x000828, "Member 'UCR_PC_DUN_M_Arm_IK_C::race_from_game' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, race_current) == 0x00082C, "Member 'UCR_PC_DUN_M_Arm_IK_C::race_current' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, gender_from_game) == 0x000830, "Member 'UCR_PC_DUN_M_Arm_IK_C::gender_from_game' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, gender_current) == 0x000834, "Member 'UCR_PC_DUN_M_Arm_IK_C::gender_current' has a wrong offset!");
static_assert(offsetof(UCR_PC_DUN_M_Arm_IK_C, trigger_update) == 0x000838, "Member 'UCR_PC_DUN_M_Arm_IK_C::trigger_update' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_PC_DUN_M_Arm_IK.RigVMMemory_Literal
// 0x0278 (0x02C0 - 0x0048)
class CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___Set_Transform_Item__Const;            // 0x0048(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___Set_Transform_Space__Const;           // 0x0054(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___Set_Transform_bInitial__Const;        // 0x0055(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___GetTransform_Item__Const;             // 0x0058(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___Set_Transform_Weight__Const;          // 0x0064(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___Set_Transform_bPropagateToChildren__Const; // 0x0068(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___Set_Transform_2_Item__Const;          // 0x006C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_Item__Const;           // 0x0078(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyTransforms_PerItem> RigVMModel___ModifyTransforms_1_1_ItemToModify__Const; // 0x0088(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___GetCurveValue_Curve__Const;           // 0x0098(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___GetCurveValue_1_Curve__Const;         // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___GetCurveValue_1_1_Curve__Const;       // 0x00A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___ModifyTransforms_1_1_WeightMinimum__Const; // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EControlRigModifyBoneMode                     RigVMModel___ModifyTransforms_1_1_Mode__Const;     // 0x00B4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigUnit_ModifyTransforms_PerItem> RigVMModel___ModifyTransforms_1_ItemToModify__Const; // 0x00B8(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___GetCurveValue_2_Curve__Const;         // 0x00C8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___GetCurveValue_1_2_Curve__Const;       // 0x00D0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___GetCurveValue_1_1_1_Curve__Const;     // 0x00D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___PBIK_Root__Const;                     // 0x00E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPBIKEffector>                  RigVMModel___PBIK_Effectors__Const;                // 0x00E8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKBoneSetting>               RigVMModel___PBIK_BoneSettings__Const;             // 0x00F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<class FName>                           RigVMModel___PBIK_ExcludedBones__Const;            // 0x0108(0x0010)(Edit, EditConst, NonTransactional)
	struct FPBIKSolverSettings                    RigVMModel___PBIK_Settings__Const;                 // 0x0118(0x003C)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FPBIKDebug                             RigVMModel___PBIK_Debug__Const;                    // 0x0154(0x0008)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___SpawnControl_1_1_2_Parent__Const;     // 0x015C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___SpawnControl_1_1_2_Name__Const;       // 0x0168(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___SpawnControl_1_1_2_OffsetTransform__Const; // 0x0170(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___SpawnControl_1_1_2_OffsetSpace__Const; // 0x01D0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0xF];                                      // 0x01D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlTransform_Settings RigVMModel___SpawnControl_1_1_2_Settings__Const;   // 0x01E0(0x00D0)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___SpawnControl_1_1_2_1_Name__Const;     // 0x02B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_PC_DUN_M_Arm_IK.RigVMMemory_Literal", true>();
	}
	static class CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal>();
	}
};
static_assert(alignof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal) == 0x000010, "Wrong alignment on CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal");
static_assert(sizeof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal) == 0x0002C0, "Wrong size on CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___Set_Transform_Item__Const) == 0x000048, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___Set_Transform_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___Set_Transform_Space__Const) == 0x000054, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___Set_Transform_Space__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___Set_Transform_bInitial__Const) == 0x000055, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___Set_Transform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetTransform_Item__Const) == 0x000058, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___Set_Transform_Weight__Const) == 0x000064, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___Set_Transform_Weight__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___Set_Transform_bPropagateToChildren__Const) == 0x000068, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___Set_Transform_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___Set_Transform_2_Item__Const) == 0x00006C, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___Set_Transform_2_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetTransform_1_Item__Const) == 0x000078, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___ModifyTransforms_1_1_ItemToModify__Const) == 0x000088, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___ModifyTransforms_1_1_ItemToModify__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetCurveValue_Curve__Const) == 0x000098, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetCurveValue_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetCurveValue_1_Curve__Const) == 0x0000A0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetCurveValue_1_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetCurveValue_1_1_Curve__Const) == 0x0000A8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetCurveValue_1_1_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___ModifyTransforms_1_1_WeightMinimum__Const) == 0x0000B0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___ModifyTransforms_1_1_WeightMinimum__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___ModifyTransforms_1_1_Mode__Const) == 0x0000B4, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___ModifyTransforms_1_1_Mode__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___ModifyTransforms_1_ItemToModify__Const) == 0x0000B8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___ModifyTransforms_1_ItemToModify__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetCurveValue_2_Curve__Const) == 0x0000C8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetCurveValue_2_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetCurveValue_1_2_Curve__Const) == 0x0000D0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetCurveValue_1_2_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___GetCurveValue_1_1_1_Curve__Const) == 0x0000D8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___GetCurveValue_1_1_1_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___PBIK_Root__Const) == 0x0000E0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___PBIK_Root__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___PBIK_Effectors__Const) == 0x0000E8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___PBIK_Effectors__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___PBIK_BoneSettings__Const) == 0x0000F8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___PBIK_BoneSettings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___PBIK_ExcludedBones__Const) == 0x000108, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___PBIK_ExcludedBones__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___PBIK_Settings__Const) == 0x000118, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___PBIK_Settings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___PBIK_Debug__Const) == 0x000154, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___PBIK_Debug__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_2_Parent__Const) == 0x00015C, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_2_Parent__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_2_Name__Const) == 0x000168, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_2_Name__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_2_OffsetTransform__Const) == 0x000170, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_2_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_2_OffsetSpace__Const) == 0x0001D0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_2_OffsetSpace__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_2_Settings__Const) == 0x0001E0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_2_Settings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_2_1_Name__Const) == 0x0002B0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_2_1_Name__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_PC_DUN_M_Arm_IK.RigVMMemory_Work
// 0x0308 (0x0350 - 0x0048)
class CR_PC_DUN_M_Arm_IK::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_Transform;               // 0x0050(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_CachedIndex;             // 0x00B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_CachedIndex;            // 0x00C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_Transform;             // 0x00D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_CachedIndex;           // 0x0130(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_2_CachedIndex;          // 0x0140(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___GetCurveValue_Value;                  // 0x0150(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_Valid;                  // 0x0154(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_CachedCurveIndex;       // 0x0158(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___GetCurveValue_1_Value;                // 0x0168(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_1_Valid;                // 0x016C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_1_CachedCurveIndex;     // 0x0170(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___GetCurveValue_1_1_Value;              // 0x0180(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_1_1_Valid;              // 0x0184(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_1_1_CachedCurveIndex;   // 0x0188(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigUnit_ModifyTransforms_PerItem> RigVMModel___ModifyTransforms_1_1_ItemToModify__IO; // 0x0198(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigUnit_ModifyTransforms_WorkData> RigVMModel___ModifyTransforms_1_1_WorkData;        // 0x01A8(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___GetCurveValue_2_Value;                // 0x01B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_2_Valid;                // 0x01BC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_2_CachedCurveIndex;     // 0x01C0(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___GetCurveValue_1_2_Value;              // 0x01D0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_1_2_Valid;              // 0x01D4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_1_2_CachedCurveIndex;   // 0x01D8(0x0010)(Edit, EditConst, NonTransactional)
	float                                         RigVMModel___GetCurveValue_1_1_1_Value;            // 0x01E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_1_1_1_Valid;            // 0x01EC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_1_1_1_CachedCurveIndex; // 0x01F0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigUnit_ModifyTransforms_PerItem> RigVMModel___ModifyTransforms_1_ItemToModify__IO;  // 0x0200(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FRigUnit_ModifyTransforms_WorkData> RigVMModel___ModifyTransforms_1_WorkData;          // 0x0210(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_Transform;             // 0x0220(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_CachedIndex;           // 0x0280(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_1_Transform;           // 0x0290(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_1_CachedIndex;         // 0x02F0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKEffector>                  RigVMModel___PBIK_Effectors__IO;                   // 0x0300(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<int32>>                         RigVMModel___PBIK_EffectorSolverIndices;           // 0x0310(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FPBIKWorkData>                  RigVMModel___PBIK_WorkData;                        // 0x0320(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___SpawnControl_1_1_2_Item;              // 0x0330(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SpawnControl_1_1_2_1_Item;            // 0x033C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_PC_DUN_M_Arm_IK.RigVMMemory_Work", true>();
	}
	static class CR_PC_DUN_M_Arm_IK::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_PC_DUN_M_Arm_IK::URigVMMemory_Work>();
	}
};
static_assert(alignof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work) == 0x000010, "Wrong alignment on CR_PC_DUN_M_Arm_IK::URigVMMemory_Work");
static_assert(sizeof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work) == 0x000350, "Wrong size on CR_PC_DUN_M_Arm_IK::URigVMMemory_Work");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_Transform) == 0x000050, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_CachedIndex) == 0x0000B0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___Set_Transform_CachedIndex) == 0x0000C0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___Set_Transform_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_1_Transform) == 0x0000D0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_1_CachedIndex) == 0x000130, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___Set_Transform_2_CachedIndex) == 0x000140, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___Set_Transform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_Value) == 0x000150, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_Valid) == 0x000154, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_CachedCurveIndex) == 0x000158, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_Value) == 0x000168, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_Valid) == 0x00016C, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_CachedCurveIndex) == 0x000170, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_1_Value) == 0x000180, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_1_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_1_Valid) == 0x000184, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_1_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_1_CachedCurveIndex) == 0x000188, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_1_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___ModifyTransforms_1_1_ItemToModify__IO) == 0x000198, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___ModifyTransforms_1_1_ItemToModify__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___ModifyTransforms_1_1_WorkData) == 0x0001A8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___ModifyTransforms_1_1_WorkData' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_2_Value) == 0x0001B8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_2_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_2_Valid) == 0x0001BC, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_2_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_2_CachedCurveIndex) == 0x0001C0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_2_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_2_Value) == 0x0001D0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_2_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_2_Valid) == 0x0001D4, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_2_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_2_CachedCurveIndex) == 0x0001D8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_2_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_1_1_Value) == 0x0001E8, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_1_1_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_1_1_Valid) == 0x0001EC, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_1_1_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetCurveValue_1_1_1_CachedCurveIndex) == 0x0001F0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetCurveValue_1_1_1_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___ModifyTransforms_1_ItemToModify__IO) == 0x000200, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___ModifyTransforms_1_ItemToModify__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___ModifyTransforms_1_WorkData) == 0x000210, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___ModifyTransforms_1_WorkData' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_2_Transform) == 0x000220, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_2_CachedIndex) == 0x000280, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_2_1_Transform) == 0x000290, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___GetTransform_2_1_CachedIndex) == 0x0002F0, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___GetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___PBIK_Effectors__IO) == 0x000300, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___PBIK_Effectors__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___PBIK_EffectorSolverIndices) == 0x000310, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___PBIK_EffectorSolverIndices' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___PBIK_WorkData) == 0x000320, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___PBIK_WorkData' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___SpawnControl_1_1_2_Item) == 0x000330, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___SpawnControl_1_1_2_Item' has a wrong offset!");
static_assert(offsetof(CR_PC_DUN_M_Arm_IK::URigVMMemory_Work, RigVMModel___SpawnControl_1_1_2_1_Item) == 0x00033C, "Member 'CR_PC_DUN_M_Arm_IK::URigVMMemory_Work::RigVMModel___SpawnControl_1_1_2_1_Item' has a wrong offset!");

}

