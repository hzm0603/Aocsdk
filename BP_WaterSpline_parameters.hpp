#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterSpline

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GeometryScriptingCore_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_WaterSpline.BP_WaterSpline_C.Add Swim Volumes
// 0x00E0 (0x00E0 - 0x0000)
struct BP_WaterSpline_C_Add_Swim_Volumes final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UChildActorComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UChildActorComponent*                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0xB];                                       // 0x0045(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x0050(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWaterVolume*                           K2Node_DynamicCast_AsWater_Volume;                 // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Add_Swim_Volumes) == 0x000010, "Wrong alignment on BP_WaterSpline_C_Add_Swim_Volumes");
static_assert(sizeof(BP_WaterSpline_C_Add_Swim_Volumes) == 0x0000E0, "Wrong size on BP_WaterSpline_C_Add_Swim_Volumes");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, Temp_int_Variable) == 0x000018, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Add_IntInt_ReturnValue_2) == 0x000020, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Array_Length_ReturnValue_1) == 0x0000B0, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_AddComponent_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C0, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, K2Node_DynamicCast_AsWater_Volume) == 0x0000C8, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::K2Node_DynamicCast_AsWater_Volume' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Add_Swim_Volumes, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'BP_WaterSpline_C_Add_Swim_Volumes::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Align Edge Spline
// 0x01D0 (0x01D0 - 0x0000)
struct BP_WaterSpline_C_Align_Edge_Spline final
{
public:
	class USplineComponent*                       Spline_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       TempSpline;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Distance2D_ReturnValue;                   // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_2;   // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_DoubleToVector2D_ReturnValue;        // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue_1;            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Align_Edge_Spline) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Align_Edge_Spline");
static_assert(sizeof(BP_WaterSpline_C_Align_Edge_Spline) == 0x0001D0, "Wrong size on BP_WaterSpline_C_Align_Edge_Spline");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, Spline_0) == 0x000000, "Member 'BP_WaterSpline_C_Align_Edge_Spline::Spline_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, TempSpline) == 0x000008, "Member 'BP_WaterSpline_C_Align_Edge_Spline::TempSpline' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000010, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, Temp_int_Variable) == 0x000030, "Member 'BP_WaterSpline_C_Align_Edge_Spline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x000050, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000068, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000078, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x000080, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000098, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetSplineLength_ReturnValue) == 0x0000A8, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0000B0, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Distance2D_ReturnValue) == 0x0000C0, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Normal2D_ReturnValue) == 0x0000C8, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue_2) == 0x0000E0, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_FClamp_ReturnValue) == 0x0000F8, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x000100, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Conv_DoubleToVector2D_ReturnValue) == 0x000108, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Conv_DoubleToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue) == 0x000118, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetDistanceAlongSplineAtSplineInputKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000120, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000130, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000138, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_BreakVector2D_X) == 0x000148, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_BreakVector2D_Y) == 0x000150, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetSplineLength_ReturnValue_1) == 0x000158, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetSplineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000160, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000168, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_BreakVector_X) == 0x000180, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_BreakVector_Y) == 0x000188, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_BreakVector_Z) == 0x000190, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_MakeVector_ReturnValue) == 0x000198, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x0001B0, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0001B8, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0001C0, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Align_Edge_Spline, CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast) == 0x0001C8, "Member 'BP_WaterSpline_C_Align_Edge_Spline::CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Bake Mesh
// 0x01A8 (0x01A8 - 0x0000)
struct BP_WaterSpline_C_Bake_Mesh final
{
public:
	class UDynamicMeshComponent*                  Dynamic_Mesh;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 Asset_Tag;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UStaticMesh*                            Out_SM;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  DynMesh;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     mat;                                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SMTemp;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_GetDynamicMesh_ReturnValue;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	struct FGeometryScriptCopyMeshToAssetOptions  K2Node_MakeStruct_GeometryScriptCopyMeshToAssetOptions; // 0x0098(0x0080)()
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeometryScriptOutcomePins                    CallFunc_CopyMeshToStaticMesh_Outcome;             // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CallFunc_CopyMeshToStaticMesh_ReturnValue;         // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UniqueObjectNameForCooking_CmpSuccess;             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInterface>            CallFunc_GetAssetTools_ReturnValue;                // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_CreateAsset_ReturnValue;                  // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Check_if_Mesh_Asset_Exists_Exists_;       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Check_if_Mesh_Asset_Exists_Return_Mesh;   // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Bake_Mesh) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Bake_Mesh");
static_assert(sizeof(BP_WaterSpline_C_Bake_Mesh) == 0x0001A8, "Wrong size on BP_WaterSpline_C_Bake_Mesh");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, Dynamic_Mesh) == 0x000000, "Member 'BP_WaterSpline_C_Bake_Mesh::Dynamic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, Material) == 0x000008, "Member 'BP_WaterSpline_C_Bake_Mesh::Material' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, Asset_Tag) == 0x000010, "Member 'BP_WaterSpline_C_Bake_Mesh::Asset_Tag' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, Out_SM) == 0x000020, "Member 'BP_WaterSpline_C_Bake_Mesh::Out_SM' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, DynMesh) == 0x000028, "Member 'BP_WaterSpline_C_Bake_Mesh::DynMesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, mat) == 0x000030, "Member 'BP_WaterSpline_C_Bake_Mesh::mat' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, SMTemp) == 0x000038, "Member 'BP_WaterSpline_C_Bake_Mesh::SMTemp' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000050, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_GetDynamicMesh_ReturnValue) == 0x000070, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_GetDynamicMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, K2Node_MakeArray_Array) == 0x000088, "Member 'BP_WaterSpline_C_Bake_Mesh::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, K2Node_MakeStruct_GeometryScriptCopyMeshToAssetOptions) == 0x000098, "Member 'BP_WaterSpline_C_Bake_Mesh::K2Node_MakeStruct_GeometryScriptCopyMeshToAssetOptions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_IsWithEditor_ReturnValue) == 0x000118, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_CopyMeshToStaticMesh_Outcome) == 0x000119, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_CopyMeshToStaticMesh_Outcome' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_CopyMeshToStaticMesh_ReturnValue) == 0x000120, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_CopyMeshToStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, UniqueObjectNameForCooking_CmpSuccess) == 0x000128, "Member 'BP_WaterSpline_C_Bake_Mesh::UniqueObjectNameForCooking_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_GetAssetTools_ReturnValue) == 0x000130, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_GetAssetTools_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_GetObjectName_ReturnValue) == 0x000140, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000150, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000160, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000170, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_CreateAsset_ReturnValue) == 0x000180, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_CreateAsset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Check_if_Mesh_Asset_Exists_Exists_) == 0x000188, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Check_if_Mesh_Asset_Exists_Exists_' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, CallFunc_Check_if_Mesh_Asset_Exists_Return_Mesh) == 0x000190, "Member 'BP_WaterSpline_C_Bake_Mesh::CallFunc_Check_if_Mesh_Asset_Exists_Return_Mesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, K2Node_DynamicCast_AsStatic_Mesh) == 0x000198, "Member 'BP_WaterSpline_C_Bake_Mesh::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Mesh, K2Node_DynamicCast_bSuccess) == 0x0001A0, "Member 'BP_WaterSpline_C_Bake_Mesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Bake UVs
// 0x0010 (0x0010 - 0x0000)
struct BP_WaterSpline_C_Bake_UVs final
{
public:
	class UDynamicMeshComponent*                  DynMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurIndex;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Bake_UVs) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Bake_UVs");
static_assert(sizeof(BP_WaterSpline_C_Bake_UVs) == 0x000010, "Wrong size on BP_WaterSpline_C_Bake_UVs");
static_assert(offsetof(BP_WaterSpline_C_Bake_UVs, DynMesh) == 0x000000, "Member 'BP_WaterSpline_C_Bake_UVs::DynMesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_UVs, CurIndex) == 0x000008, "Member 'BP_WaterSpline_C_Bake_UVs::CurIndex' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Bake Vertex Colors
// 0x0200 (0x0200 - 0x0000)
struct BP_WaterSpline_C_Bake_Vertex_Colors final
{
public:
	class UDynamicMeshComponent*                  DynMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CurIndex;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CallFunc_GetDynamicMesh_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryScriptColorList               CallFunc_GetMeshPerVertexColors_ColorList;         // 0x0020(0x0010)()
	bool                                          CallFunc_GetMeshPerVertexColors_bIsValidColorSet;  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMeshPerVertexColors_bHasVertexIDGaps;  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CallFunc_GetMeshPerVertexColors_ReturnValue;       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetVertexCount_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetVertexPosition_bIsValidVertex;         // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVertexPosition_ReturnValue;            // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0080(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_SetMeshPerVertexColors_ReturnValue;       // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UniqueObjectNameForCooking_LinearColor;            // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetColorListItem_bIsValidIndex;           // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectNameForCooking_G_ImplicitCast;         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectNameForCooking_B_ImplicitCast;         // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectNameForCooking_R_ImplicitCast;         // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UniqueObjectNameForCooking_A_ImplicitCast;         // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Bake_Vertex_Colors) == 0x000010, "Wrong alignment on BP_WaterSpline_C_Bake_Vertex_Colors");
static_assert(sizeof(BP_WaterSpline_C_Bake_Vertex_Colors) == 0x000200, "Wrong size on BP_WaterSpline_C_Bake_Vertex_Colors");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, DynMesh) == 0x000000, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::DynMesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CurIndex) == 0x000008, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CurIndex' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetDynamicMesh_ReturnValue) == 0x000010, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetDynamicMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetMeshPerVertexColors_ColorList) == 0x000020, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetMeshPerVertexColors_ColorList' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetMeshPerVertexColors_bIsValidColorSet) == 0x000030, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetMeshPerVertexColors_bIsValidColorSet' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetMeshPerVertexColors_bHasVertexIDGaps) == 0x000031, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetMeshPerVertexColors_bHasVertexIDGaps' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetMeshPerVertexColors_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetMeshPerVertexColors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetVertexCount_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetVertexCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000045, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_BooleanAND_ReturnValue) == 0x000046, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetVertexPosition_bIsValidVertex) == 0x000047, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetVertexPosition_bIsValidVertex' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetVertexPosition_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetVertexPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, Temp_int_Variable) == 0x000060, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000064, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000068, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000078, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_GetTransform_ReturnValue) == 0x000080, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_TransformLocation_ReturnValue) == 0x0000E0, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x0000F8, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_SetMeshPerVertexColors_ReturnValue) == 0x000110, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_SetMeshPerVertexColors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Vector_Distance_ReturnValue) == 0x000118, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x000120, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000128, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000130, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000138, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000140, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000148, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000150, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000158, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_FClamp_ReturnValue) == 0x000160, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000168, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_SelectFloat_ReturnValue) == 0x000170, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_BooleanXOR_ReturnValue) == 0x000178, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_FClamp_ReturnValue_1) == 0x000180, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_SelectFloat_ReturnValue_1) == 0x000188, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_FMin_ReturnValue) == 0x000190, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_SelectFloat_ReturnValue_2) == 0x000198, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_SelectFloat_ReturnValue_3) == 0x0001A0, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, UniqueObjectNameForCooking_LinearColor) == 0x0001A8, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::UniqueObjectNameForCooking_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_SetColorListItem_bIsValidIndex) == 0x0001B8, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_SetColorListItem_bIsValidIndex' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_FClamp_Value_ImplicitCast) == 0x0001C0, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0001C8, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x0001D0, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0001D8, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0001E0, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, UniqueObjectNameForCooking_G_ImplicitCast) == 0x0001E8, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::UniqueObjectNameForCooking_G_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, UniqueObjectNameForCooking_B_ImplicitCast) == 0x0001EC, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::UniqueObjectNameForCooking_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, UniqueObjectNameForCooking_R_ImplicitCast) == 0x0001F0, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::UniqueObjectNameForCooking_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Vertex_Colors, UniqueObjectNameForCooking_A_ImplicitCast) == 0x0001F4, "Member 'BP_WaterSpline_C_Bake_Vertex_Colors::UniqueObjectNameForCooking_A_ImplicitCast' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Bake Water Meshes
// 0x0020 (0x0020 - 0x0000)
struct BP_WaterSpline_C_Bake_Water_Meshes final
{
public:
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CallFunc_Bake_Mesh_Out_SM;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Bake_Water_Meshes) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Bake_Water_Meshes");
static_assert(sizeof(BP_WaterSpline_C_Bake_Water_Meshes) == 0x000020, "Wrong size on BP_WaterSpline_C_Bake_Water_Meshes");
static_assert(offsetof(BP_WaterSpline_C_Bake_Water_Meshes, CallFunc_IsWithEditor_ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_Bake_Water_Meshes::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Water_Meshes, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_Bake_Water_Meshes::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Water_Meshes, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_WaterSpline_C_Bake_Water_Meshes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Bake_Water_Meshes, CallFunc_Bake_Mesh_Out_SM) == 0x000018, "Member 'BP_WaterSpline_C_Bake_Water_Meshes::CallFunc_Bake_Mesh_Out_SM' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Build Display Mesh
// 0x0120 (0x0120 - 0x0000)
struct BP_WaterSpline_C_Build_Display_Mesh final
{
public:
	TArray<struct FVector2D>                      PolylineVerts;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FTransform>                     SweepPath;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<double>                                U;                                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<double>                                V;                                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGeometryScriptVectorList              VertexPositions;                                   // 0x0040(0x0010)(Edit, BlueprintVisible)
	struct FBox                                   Bbox;                                              // 0x0050(0x0038)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInterface*>             K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ConstParm, ReferenceParm)
	class UDynamicMesh*                           CallFunc_GetDynamicMesh_ReturnValue;               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometryScriptPrimitiveOptions        UniqueObjectNameForCooking_GeometryScriptPrimitiveOptions; // 0x00A0(0x0003)(NoDestructor)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CallFunc_Reset_ReturnValue;                        // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_AppendSweepPolyline_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_SetPerFaceNormals_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_RecomputeNormals_ReturnValue;             // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometryScriptMeshSelection           CallFunc_SelectMeshElementsByNormalAngle_Selection; // 0x00C8(0x0010)()
	class UDynamicMesh*                           CallFunc_SelectMeshElementsByNormalAngle_ReturnValue; // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_DeleteSelectedTrianglesFromMesh_NumDeleted; // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMesh*                           CallFunc_DeleteSelectedTrianglesFromMesh_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_ClearMaterialIDs_ReturnValue;             // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMesh*                           CallFunc_SetMeshConstantVertexColor_ReturnValue;   // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CallFunc_AppendSweepPolyline_PolylineTexParamU_ImplicitCast; // 0x0100(0x0010)(ConstParm, ReferenceParm)
	TArray<float>                                 CallFunc_AppendSweepPolyline_SweepPathTexParamV_ImplicitCast; // 0x0110(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(BP_WaterSpline_C_Build_Display_Mesh) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Build_Display_Mesh");
static_assert(sizeof(BP_WaterSpline_C_Build_Display_Mesh) == 0x000120, "Wrong size on BP_WaterSpline_C_Build_Display_Mesh");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, PolylineVerts) == 0x000000, "Member 'BP_WaterSpline_C_Build_Display_Mesh::PolylineVerts' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, SweepPath) == 0x000010, "Member 'BP_WaterSpline_C_Build_Display_Mesh::SweepPath' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, U) == 0x000020, "Member 'BP_WaterSpline_C_Build_Display_Mesh::U' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, V) == 0x000030, "Member 'BP_WaterSpline_C_Build_Display_Mesh::V' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, VertexPositions) == 0x000040, "Member 'BP_WaterSpline_C_Build_Display_Mesh::VertexPositions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, Bbox) == 0x000050, "Member 'BP_WaterSpline_C_Build_Display_Mesh::Bbox' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, K2Node_MakeArray_Array) == 0x000088, "Member 'BP_WaterSpline_C_Build_Display_Mesh::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_GetDynamicMesh_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_GetDynamicMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, UniqueObjectNameForCooking_GeometryScriptPrimitiveOptions) == 0x0000A0, "Member 'BP_WaterSpline_C_Build_Display_Mesh::UniqueObjectNameForCooking_GeometryScriptPrimitiveOptions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_Reset_ReturnValue) == 0x0000A8, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_Reset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_AppendSweepPolyline_ReturnValue) == 0x0000B0, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_AppendSweepPolyline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_SetPerFaceNormals_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_SetPerFaceNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_RecomputeNormals_ReturnValue) == 0x0000C0, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_RecomputeNormals_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_SelectMeshElementsByNormalAngle_Selection) == 0x0000C8, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_SelectMeshElementsByNormalAngle_Selection' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_SelectMeshElementsByNormalAngle_ReturnValue) == 0x0000D8, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_SelectMeshElementsByNormalAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_DeleteSelectedTrianglesFromMesh_NumDeleted) == 0x0000E0, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_DeleteSelectedTrianglesFromMesh_NumDeleted' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_DeleteSelectedTrianglesFromMesh_ReturnValue) == 0x0000E8, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_DeleteSelectedTrianglesFromMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_ClearMaterialIDs_ReturnValue) == 0x0000F0, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_ClearMaterialIDs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_SetMeshConstantVertexColor_ReturnValue) == 0x0000F8, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_SetMeshConstantVertexColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_AppendSweepPolyline_PolylineTexParamU_ImplicitCast) == 0x000100, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_AppendSweepPolyline_PolylineTexParamU_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Display_Mesh, CallFunc_AppendSweepPolyline_SweepPathTexParamV_ImplicitCast) == 0x000110, "Member 'BP_WaterSpline_C_Build_Display_Mesh::CallFunc_AppendSweepPolyline_SweepPathTexParamV_ImplicitCast' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Build Profile for Spline
// 0x00F8 (0x00F8 - 0x0000)
struct BP_WaterSpline_C_Build_Profile_for_Spline final
{
public:
	double                                        Width;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Divisions;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Positions_0;                                       // 0x0010(0x0010)(Parm, OutParm)
	TArray<double>                                UVs_0;                                             // 0x0020(0x0010)(Parm, OutParm)
	TArray<double>                                UV;                                                // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector2D>                      Pos;                                               // 0x0040(0x0010)(Edit, BlueprintVisible)
	int32                                         Div;                                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wid;                                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Build_Profile_for_Spline) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Build_Profile_for_Spline");
static_assert(sizeof(BP_WaterSpline_C_Build_Profile_for_Spline) == 0x0000F8, "Wrong size on BP_WaterSpline_C_Build_Profile_for_Spline");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Width) == 0x000000, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Width' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Divisions) == 0x000008, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Divisions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Positions_0) == 0x000010, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Positions_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, UVs_0) == 0x000020, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::UVs_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, UV) == 0x000030, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::UV' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Pos) == 0x000040, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Pos' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Div) == 0x000050, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Div' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Wid) == 0x000058, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Wid' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, Temp_int_Variable) == 0x000060, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000068, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000070, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000080, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x0000A0, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000B0, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0000B8, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000C0, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000C8, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_MakeVector2D_ReturnValue) == 0x0000D0, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x0000E0, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Array_Add_ReturnValue) == 0x0000E8, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_Array_Add_ReturnValue_1) == 0x0000EC, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Build_Profile_for_Spline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000F0, "Member 'BP_WaterSpline_C_Build_Profile_for_Spline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Check if Mesh Asset Exists
// 0x0110 (0x0110 - 0x0000)
struct BP_WaterSpline_C_Check_if_Mesh_Asset_Exists final
{
public:
	class FString                                 Asset_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Exists_;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Return_Mesh;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM;                                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          MeshExists;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAssetRegistry>        CallFunc_GetAssetRegistry_ReturnValue;             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<struct FAssetData>                     CallFunc_GetAssetsByPath_OutAssetData;             // 0x0058(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetAssetsByPath_ReturnValue;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAssetData                             CallFunc_Array_Get_Item;                           // 0x0070(0x0068)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DB[0x5];                                       // 0x00DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetAsset_ReturnValue;                     // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetFullName_ReturnValue;                  // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Check_if_Mesh_Asset_Exists");
static_assert(sizeof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists) == 0x000110, "Wrong size on BP_WaterSpline_C_Check_if_Mesh_Asset_Exists");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, Asset_Name) == 0x000000, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::Asset_Name' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, Exists_) == 0x000010, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::Exists_' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, Return_Mesh) == 0x000018, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::Return_Mesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, SM) == 0x000020, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::SM' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, MeshExists) == 0x000028, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::MeshExists' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, Temp_bool_True_if_break_was_hit_Variable) == 0x000029, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Conv_StringToName_ReturnValue) == 0x00003C, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_GetAssetRegistry_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_GetAssetRegistry_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_GetAssetsByPath_OutAssetData) == 0x000058, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_GetAssetsByPath_OutAssetData' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_GetAssetsByPath_ReturnValue) == 0x000068, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_GetAssetsByPath_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_BooleanAND_ReturnValue) == 0x0000DA, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_GetAsset_ReturnValue) == 0x0000E0, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_GetAsset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, K2Node_DynamicCast_AsStatic_Mesh) == 0x0000E8, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_GetFullName_ReturnValue) == 0x0000F8, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_GetFullName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_Contains_ReturnValue) == 0x000108, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Check_if_Mesh_Asset_Exists, CallFunc_BooleanAND_ReturnValue_1) == 0x000109, "Member 'BP_WaterSpline_C_Check_if_Mesh_Asset_Exists::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.CheckInvalidateMeshes
// 0x00C0 (0x00C0 - 0x0000)
struct BP_WaterSpline_C_CheckInvalidateMeshes final
{
public:
	bool                                          Invalidated_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Int64Int64_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_DoubleToInt64_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_DoubleToInt64_ReturnValue_1;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_DoubleToInt64_ReturnValue_2;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_2;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_DoubleToInt64_ReturnValue_3;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_DoubleToInt64_ReturnValue_4;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue_1;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue_2;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue_3;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue_4;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue_5;             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Xor_Int64Int64_ReturnValue_6;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_CheckInvalidateMeshes) == 0x000008, "Wrong alignment on BP_WaterSpline_C_CheckInvalidateMeshes");
static_assert(sizeof(BP_WaterSpline_C_CheckInvalidateMeshes) == 0x0000C0, "Wrong size on BP_WaterSpline_C_CheckInvalidateMeshes");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, Invalidated_0) == 0x000000, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::Invalidated_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_EqualEqual_Int64Int64_ReturnValue) == 0x000001, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_EqualEqual_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_GetSplineLength_ReturnValue) == 0x000004, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_DoubleToInt64_ReturnValue) == 0x000018, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_DoubleToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_DoubleToInt64_ReturnValue_1) == 0x000020, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_DoubleToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000030, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_DoubleToInt64_ReturnValue_2) == 0x000038, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_DoubleToInt64_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000048, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_BoolToInt_ReturnValue_1) == 0x000050, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_BoolToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_IntToInt64_ReturnValue_2) == 0x000058, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_IntToInt64_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000060, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_DoubleToInt64_ReturnValue_3) == 0x000068, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_DoubleToInt64_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000070, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Conv_DoubleToInt64_ReturnValue_4) == 0x000078, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Conv_DoubleToInt64_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue) == 0x000080, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue_1) == 0x000088, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue_2) == 0x000090, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue_3) == 0x000098, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue_4) == 0x0000A0, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue_5) == 0x0000A8, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Xor_Int64Int64_ReturnValue_6) == 0x0000B0, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Xor_Int64Int64_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_CheckInvalidateMeshes, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000B8, "Member 'BP_WaterSpline_C_CheckInvalidateMeshes::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Decompose To Volume Transforms
// 0x09A0 (0x09A0 - 0x0000)
struct BP_WaterSpline_C_Decompose_To_Volume_Transforms final
{
public:
	double                                        MinimumVolumeLength;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BendTolerance;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchTolerance;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RollTolerance;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     TempTransforms;                                    // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         Index_0;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                Spline_Widths;                                     // 0x0038(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Spline_Positions;                                  // 0x0048(0x0010)(Edit, BlueprintVisible)
	TArray<class UChildActorComponent*>           VolumeArray;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	double                                        Next_Spline_Location;                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Spline_Location;                           // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roll_Tolerance;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bend_Tolerance;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch_Tolerance;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Volume_Length;                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x00C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue_1;          // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0xC];                                      // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_WeightedMovingAverage_FRotator_ReturnValue; // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue_2;          // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue_3;          // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue_1;            // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0390(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_1;  // 0x0408(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue_1;           // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0440(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x04B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x04D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x0548(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0580(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue; // 0x0590(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2; // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindClosestPointOnLine_ReturnValue;       // 0x05C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetScaleAtDistanceAlongSpline_ReturnValue; // 0x05F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0638(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Distance2D_ReturnValue;                   // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetScaleAtDistanceAlongSpline_ReturnValue_1; // 0x0650(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue; // 0x0680(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x06E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0700(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0718(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0740(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x0758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0759(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75A[0x6];                                      // 0x075A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue_1; // 0x0760(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x07C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x07D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x07F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0808(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetSplineLength_ReturnValue_1;            // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x082C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0838(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Vector_Distance_ReturnValue_2;            // 0x0850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0858(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0878(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0890(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0898(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x08A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x08A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x08B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x08D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E8[0x8];                                      // 0x08E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x08F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0950(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0954(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast; // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDirectionAtDistanceAlongSpline_Distance_ImplicitCast; // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast_1; // 0x0960(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_964[0x4];                                      // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x0968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Next_Spline_Location_ImplicitCast; // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast_2; // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaleAtDistanceAlongSpline_Distance_ImplicitCast; // 0x097C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaleAtDistanceAlongSpline_Distance_ImplicitCast_1; // 0x0980(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTransformAtDistanceAlongSpline_Distance_ImplicitCast; // 0x0984(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTransformAtDistanceAlongSpline_Distance_ImplicitCast_1; // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast_1;       // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Decompose_To_Volume_Transforms) == 0x000010, "Wrong alignment on BP_WaterSpline_C_Decompose_To_Volume_Transforms");
static_assert(sizeof(BP_WaterSpline_C_Decompose_To_Volume_Transforms) == 0x0009A0, "Wrong size on BP_WaterSpline_C_Decompose_To_Volume_Transforms");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, MinimumVolumeLength) == 0x000000, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::MinimumVolumeLength' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, BendTolerance) == 0x000008, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::BendTolerance' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, PitchTolerance) == 0x000010, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::PitchTolerance' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, RollTolerance) == 0x000018, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::RollTolerance' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, TempTransforms) == 0x000020, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::TempTransforms' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Index_0) == 0x000030, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Index_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Spline_Widths) == 0x000038, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Spline_Widths' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Spline_Positions) == 0x000048, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Spline_Positions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, VolumeArray) == 0x000058, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::VolumeArray' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Next_Spline_Location) == 0x000068, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Next_Spline_Location' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Current_Spline_Location) == 0x000070, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Current_Spline_Location' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Roll_Tolerance) == 0x000078, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Roll_Tolerance' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Bend_Tolerance) == 0x000080, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Bend_Tolerance' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Pitch_Tolerance) == 0x000088, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Pitch_Tolerance' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Min_Volume_Length) == 0x000090, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Min_Volume_Length' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000120, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Location) == 0x000128, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Rotation) == 0x000140, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Scale) == 0x000158, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_TransformLocation_ReturnValue) == 0x000170, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_TransformLocation_ReturnValue_1) == 0x000188, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_TransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001A0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000210, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Location_1) == 0x000218, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Rotation_1) == 0x000230, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Scale_1) == 0x000248, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BooleanAND_ReturnValue) == 0x000260, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_WeightedMovingAverage_FRotator_ReturnValue) == 0x000268, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_WeightedMovingAverage_FRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetRightVector_ReturnValue) == 0x000280, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetForwardVector_ReturnValue) == 0x000298, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_TransformLocation_ReturnValue_2) == 0x0002B0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_TransformLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_TransformLocation_ReturnValue_3) == 0x0002C8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_TransformLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Vector_Distance_ReturnValue) == 0x0002E0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Vector_Distance_ReturnValue_1) == 0x0002E8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Vector_Distance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002F0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000308, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Temp_bool_Variable) == 0x000320, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000328, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Temp_int_Variable) == 0x000330, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000338, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000340, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_IntInt_ReturnValue_2) == 0x000344, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, Temp_bool_Variable_1) == 0x000348, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Get_Item_2) == 0x000350, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Get_Item_3) == 0x000368, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000370, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000378, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000380, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Add_ReturnValue) == 0x000388, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetTransform_ReturnValue) == 0x000390, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_InverseTransformDirection_ReturnValue) == 0x0003F0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_InverseTransformDirection_ReturnValue_1) == 0x000408, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_InverseTransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Dot_VectorVector_ReturnValue) == 0x000420, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Dot_VectorVector_ReturnValue_1) == 0x000428, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Dot_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000430, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000431, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BooleanXOR_ReturnValue) == 0x000432, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, K2Node_Select_Default) == 0x000438, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000440, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_VectorVector_ReturnValue) == 0x000458, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, K2Node_Select_Default_1) == 0x000470, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_X) == 0x000478, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Y) == 0x000480, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Z) == 0x000488, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000490, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000498, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeVector_ReturnValue) == 0x0004A0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeVector_ReturnValue_1) == 0x0004B8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeTransform_ReturnValue) == 0x0004D0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Add_ReturnValue_1) == 0x000530, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000538, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetSplineLength_ReturnValue) == 0x000540, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x000548, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000560, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_X_1) == 0x000568, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Y_1) == 0x000570, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Z_1) == 0x000578, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeVector2D_ReturnValue) == 0x000580, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue) == 0x000590, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2) == 0x0005A8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_FindClosestPointOnLine_ReturnValue) == 0x0005C0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_FindClosestPointOnLine_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_X_2) == 0x0005D8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Y_2) == 0x0005E0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Z_2) == 0x0005E8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0005F0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetScaleAtDistanceAlongSpline_ReturnValue) == 0x0005F8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetScaleAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Abs_ReturnValue) == 0x000610, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_X_3) == 0x000618, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Y_3) == 0x000620, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Z_3) == 0x000628, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000630, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeVector2D_ReturnValue_1) == 0x000638, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Distance2D_ReturnValue) == 0x000648, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetScaleAtDistanceAlongSpline_ReturnValue_1) == 0x000650, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetScaleAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_X_4) == 0x000668, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Y_4) == 0x000670, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Z_4) == 0x000678, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue) == 0x000680, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_FMax_ReturnValue) == 0x0006E0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Location_2) == 0x0006E8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Rotation_2) == 0x000700, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Scale_2) == 0x000718, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000730, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Add_ReturnValue_2) == 0x000738, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000740, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000748, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000750, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x000758, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BooleanOR_ReturnValue) == 0x000759, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue_1) == 0x000760, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetTransformAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Location_3) == 0x0007C0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Rotation_3) == 0x0007D8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakTransform_Scale_3) == 0x0007F0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_FindLookAtRotation_ReturnValue) == 0x000808, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetSplineLength_ReturnValue_1) == 0x000820, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetSplineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakRotator_Roll) == 0x000824, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakRotator_Pitch) == 0x000828, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakRotator_Yaw) == 0x00082C, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000830, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeRotator_ReturnValue) == 0x000838, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Vector_Distance_ReturnValue_2) == 0x000850, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Vector_Distance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000858, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000870, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000878, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000890, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_X_5) == 0x000898, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Y_5) == 0x0008A0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_BreakVector_Z_5) == 0x0008A8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeVector_ReturnValue_2) == 0x0008B0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x0008C8, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeVector_ReturnValue_3) == 0x0008D0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_MakeTransform_ReturnValue_1) == 0x0008F0, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Add_ReturnValue_3) == 0x000950, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Array_Add_ReturnValue_4) == 0x000954, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast) == 0x000958, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetDirectionAtDistanceAlongSpline_Distance_ImplicitCast) == 0x00095C, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetDirectionAtDistanceAlongSpline_Distance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast_1) == 0x000960, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x000968, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, K2Node_VariableSet_Next_Spline_Location_ImplicitCast) == 0x000970, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::K2Node_VariableSet_Next_Spline_Location_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast_2) == 0x000978, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetLocationAtDistanceAlongSpline_Distance_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetScaleAtDistanceAlongSpline_Distance_ImplicitCast) == 0x00097C, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetScaleAtDistanceAlongSpline_Distance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetScaleAtDistanceAlongSpline_Distance_ImplicitCast_1) == 0x000980, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetScaleAtDistanceAlongSpline_Distance_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetTransformAtDistanceAlongSpline_Distance_ImplicitCast) == 0x000984, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetTransformAtDistanceAlongSpline_Distance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_GetTransformAtDistanceAlongSpline_Distance_ImplicitCast_1) == 0x000988, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_GetTransformAtDistanceAlongSpline_Distance_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Decompose_To_Volume_Transforms, CallFunc_Less_DoubleDouble_B_ImplicitCast_1) == 0x000990, "Member 'BP_WaterSpline_C_Decompose_To_Volume_Transforms::CallFunc_Less_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.ExecuteUbergraph_BP_WaterSpline
// 0x00F8 (0x00F8 - 0x0000)
struct BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioSplineEmitterSubsystem*           CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioSplineEmitterSubsystem*           CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0040(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioSpline>          CallFunc_RegisterAudioSplineEmitter_AudioSpline_CastInput; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation; // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky_1;     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky_1;  // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioSpline>          CallFunc_UnregisterAudioSplineEmitter_AudioSpline_CastInput; // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline) == 0x000008, "Wrong alignment on BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline");
static_assert(sizeof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline) == 0x0000F8, "Wrong size on BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, EntryPoint) == 0x000000, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_GetIntrepidSkyInstance_IntrepidSky) == 0x000008, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_GetIntrepidSkyInstance_IntrepidSky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000010, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky) == 0x000018, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsValid_ReturnValue_2) == 0x000023, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000028, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsValid_ReturnValue_3) == 0x000030, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, K2Node_Event_DeltaSeconds) == 0x000034, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, K2Node_Event_EndPlayReason) == 0x00003C, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, Temp_delegate_Variable) == 0x000040, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsServer_ReturnValue) == 0x000050, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_RegisterAudioSplineEmitter_AudioSpline_CastInput) == 0x000060, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_RegisterAudioSplineEmitter_AudioSpline_CastInput' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_PostAkEvent_ReturnValue) == 0x000070, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsWithEditor_ReturnValue) == 0x000074, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation) == 0x000078, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_GetIntrepidSkyInstance_IntrepidSky_1) == 0x0000B0, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_GetIntrepidSkyInstance_IntrepidSky_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky_1) == 0x0000D0, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsValid_ReturnValue_4) == 0x0000D9, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_IsValid_ReturnValue_5) == 0x0000DA, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_HasAuthority_ReturnValue) == 0x0000DB, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, Temp_int_Loop_Counter_Variable) == 0x0000DC, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_UnregisterAudioSplineEmitter_AudioSpline_CastInput) == 0x0000E0, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_UnregisterAudioSplineEmitter_AudioSpline_CastInput' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_Less_IntInt_ReturnValue) == 0x0000F0, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline, CallFunc_Add_IntInt_ReturnValue) == 0x0000F4, "Member 'BP_WaterSpline_C_ExecuteUbergraph_BP_WaterSpline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Fix Up Meshes
// 0x0001 (0x0001 - 0x0000)
struct BP_WaterSpline_C_Fix_Up_Meshes final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Fix_Up_Meshes) == 0x000001, "Wrong alignment on BP_WaterSpline_C_Fix_Up_Meshes");
static_assert(sizeof(BP_WaterSpline_C_Fix_Up_Meshes) == 0x000001, "Wrong size on BP_WaterSpline_C_Fix_Up_Meshes");
static_assert(offsetof(BP_WaterSpline_C_Fix_Up_Meshes, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_Fix_Up_Meshes::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Get Current at Location
// 0x0110 (0x0110 - 0x0000)
struct BP_WaterSpline_C_Get_Current_at_Location final
{
public:
	struct FVector                                World_Location;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Current_Velocity;                                  // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClosestDir;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClosestLoc;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLoc;                                          // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_DoubleToVector2D_ReturnValue;        // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindDirectionClosestToWorldLocation_ReturnValue; // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_DoubleToVector2D_ReturnValue_1;      // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Get_Current_at_Location) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Get_Current_at_Location");
static_assert(sizeof(BP_WaterSpline_C_Get_Current_at_Location) == 0x000110, "Wrong size on BP_WaterSpline_C_Get_Current_at_Location");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, World_Location) == 0x000000, "Member 'BP_WaterSpline_C_Get_Current_at_Location::World_Location' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, Current_Velocity) == 0x000018, "Member 'BP_WaterSpline_C_Get_Current_at_Location::Current_Velocity' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, ClosestDir) == 0x000028, "Member 'BP_WaterSpline_C_Get_Current_at_Location::ClosestDir' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, ClosestLoc) == 0x000040, "Member 'BP_WaterSpline_C_Get_Current_at_Location::ClosestLoc' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, WorldLoc) == 0x000058, "Member 'BP_WaterSpline_C_Get_Current_at_Location::WorldLoc' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Conv_DoubleToVector2D_ReturnValue) == 0x000070, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Conv_DoubleToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x000080, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_FindDirectionClosestToWorldLocation_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_FindDirectionClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Vector_Distance_ReturnValue) == 0x0000B0, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0000D0, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_FClamp_ReturnValue) == 0x0000E0, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Conv_DoubleToVector2D_ReturnValue_1) == 0x0000F0, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Conv_DoubleToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Current_at_Location, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x000100, "Member 'BP_WaterSpline_C_Get_Current_at_Location::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Get Samples From Spline
// 0x0090 (0x0090 - 0x0000)
struct BP_WaterSpline_C_Get_Samples_From_Spline final
{
public:
	const class USplineComponent*                 Spline_0;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Spacing;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Frames_0;                                          // 0x0010(0x0010)(Parm, OutParm)
	TArray<double>                                FrameTimes;                                        // 0x0020(0x0010)(Parm, OutParm)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue_1;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometryScriptSplineSamplingOptions   K2Node_MakeStruct_GeometryScriptSplineSamplingOptions; // 0x004C(0x000C)(NoDestructor)
	TArray<struct FTransform>                     CallFunc_SampleSplineToTransforms_Frames;          // 0x0058(0x0010)(ReferenceParm)
	TArray<double>                                CallFunc_SampleSplineToTransforms_FrameTimes;      // 0x0068(0x0010)(ReferenceParm)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast_1;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Duration_ImplicitCast;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Get_Samples_From_Spline) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Get_Samples_From_Spline");
static_assert(sizeof(BP_WaterSpline_C_Get_Samples_From_Spline) == 0x000090, "Wrong size on BP_WaterSpline_C_Get_Samples_From_Spline");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, Spline_0) == 0x000000, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::Spline_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, Spacing) == 0x000008, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::Spacing' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, Frames_0) == 0x000010, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::Frames_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, FrameTimes) == 0x000020, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::FrameTimes' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_GetSplineLength_ReturnValue) == 0x000030, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_GetSplineLength_ReturnValue_1) == 0x000034, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_GetSplineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_FTrunc_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, K2Node_MakeStruct_GeometryScriptSplineSamplingOptions) == 0x00004C, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::K2Node_MakeStruct_GeometryScriptSplineSamplingOptions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_SampleSplineToTransforms_Frames) == 0x000058, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_SampleSplineToTransforms_Frames' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_SampleSplineToTransforms_FrameTimes) == 0x000068, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_SampleSplineToTransforms_FrameTimes' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000078, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, CallFunc_Divide_DoubleDouble_A_ImplicitCast_1) == 0x000080, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::CallFunc_Divide_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Samples_From_Spline, K2Node_VariableSet_Duration_ImplicitCast) == 0x000088, "Member 'BP_WaterSpline_C_Get_Samples_From_Spline::K2Node_VariableSet_Duration_ImplicitCast' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Get Spline Dir From Local Position
// 0x00E0 (0x00E0 - 0x0000)
struct BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position final
{
public:
	class USplineComponent*                       Spline_0;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalPosition;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineDir;                                         // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetDirectionAtSplineInputKey_ReturnValue; // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position) == 0x000010, "Wrong alignment on BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position");
static_assert(sizeof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position) == 0x0000E0, "Wrong size on BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, Spline_0) == 0x000000, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::Spline_0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, LocalPosition) == 0x000008, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::LocalPosition' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, SplineDir) == 0x000020, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::SplineDir' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, CallFunc_TransformLocation_ReturnValue) == 0x0000A0, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position, CallFunc_GetDirectionAtSplineInputKey_ReturnValue) == 0x0000C0, "Member 'BP_WaterSpline_C_Get_Spline_Dir_From_Local_Position::CallFunc_GetDirectionAtSplineInputKey_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.GetControlledPawnLocation
// 0x0080 (0x0080 - 0x0000)
struct BP_WaterSpline_C_GetControlledPawnLocation final
{
public:
	struct FVector                                ControlledPawnLocation;                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_GetControlledPawnLocation) == 0x000008, "Wrong alignment on BP_WaterSpline_C_GetControlledPawnLocation");
static_assert(sizeof(BP_WaterSpline_C_GetControlledPawnLocation) == 0x000080, "Wrong size on BP_WaterSpline_C_GetControlledPawnLocation");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, ControlledPawnLocation) == 0x000000, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::ControlledPawnLocation' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, Temp_bool_Variable) == 0x000018, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, Temp_struct_Variable) == 0x000020, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, CallFunc_GetPlayerController_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, CallFunc_K2_GetPawn_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetControlledPawnLocation, K2Node_Select_Default) == 0x000068, "Member 'BP_WaterSpline_C_GetControlledPawnLocation::K2Node_Select_Default' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.GetPlayerControllerCameraRotation
// 0x0078 (0x0078 - 0x0000)
struct BP_WaterSpline_C_GetPlayerControllerCameraRotation final
{
public:
	struct FRotator                               PlayerControllerCameraRotation;                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable;                              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_WaterSpline_C_GetPlayerControllerCameraRotation) == 0x000008, "Wrong alignment on BP_WaterSpline_C_GetPlayerControllerCameraRotation");
static_assert(sizeof(BP_WaterSpline_C_GetPlayerControllerCameraRotation) == 0x000078, "Wrong size on BP_WaterSpline_C_GetPlayerControllerCameraRotation");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, PlayerControllerCameraRotation) == 0x000000, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::PlayerControllerCameraRotation' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, Temp_bool_Variable) == 0x000018, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, Temp_struct_Variable) == 0x000020, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, CallFunc_GetPlayerController_ReturnValue) == 0x000038, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, CallFunc_GetCameraRotation_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_GetPlayerControllerCameraRotation, K2Node_Select_Default) == 0x000060, "Member 'BP_WaterSpline_C_GetPlayerControllerCameraRotation::K2Node_Select_Default' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_WaterSpline_C_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_GetSplineComponent) == 0x000008, "Wrong alignment on BP_WaterSpline_C_GetSplineComponent");
static_assert(sizeof(BP_WaterSpline_C_GetSplineComponent) == 0x000008, "Wrong size on BP_WaterSpline_C_GetSplineComponent");
static_assert(offsetof(BP_WaterSpline_C_GetSplineComponent, ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.GetSplineEmitterComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_WaterSpline_C_GetSplineEmitterComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_GetSplineEmitterComponent) == 0x000008, "Wrong alignment on BP_WaterSpline_C_GetSplineEmitterComponent");
static_assert(sizeof(BP_WaterSpline_C_GetSplineEmitterComponent) == 0x000008, "Wrong size on BP_WaterSpline_C_GetSplineEmitterComponent");
static_assert(offsetof(BP_WaterSpline_C_GetSplineEmitterComponent, ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_GetSplineEmitterComponent::ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Init Padded Spline
// 0x0410 (0x0410 - 0x0000)
struct BP_WaterSpline_C_Init_Padded_Spline final
{
public:
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue; // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue;              // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue_1; // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue; // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue_1;            // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue_2;            // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1; // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue_3;            // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue_1;    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue;    // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue_1;  // 0x0190(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0328(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSplinePoint                           CallFunc_GetSplinePointAt_ReturnValue;             // 0x0378(0x0088)(NoDestructor)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue_2;    // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Init_Padded_Spline) == 0x000010, "Wrong alignment on BP_WaterSpline_C_Init_Padded_Spline");
static_assert(sizeof(BP_WaterSpline_C_Init_Padded_Spline) == 0x000410, "Wrong size on BP_WaterSpline_C_Init_Padded_Spline");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_ClampVectorSize_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_ClampVectorSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue_1) == 0x000040, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue) == 0x000058, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_ClampVectorSize_ReturnValue_1) == 0x000070, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_ClampVectorSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_ClampVectorSize_ReturnValue_2) == 0x000088, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_ClampVectorSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1) == 0x0000A0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_ClampVectorSize_ReturnValue_3) == 0x0000B8, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_ClampVectorSize_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetNumberOfSplinePoints_ReturnValue_1) == 0x0000D0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetNumberOfSplinePoints_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetTransformAtSplinePoint_ReturnValue) == 0x0000E0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetTransformAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000140, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakTransform_Location) == 0x000148, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakTransform_Rotation) == 0x000160, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakTransform_Scale) == 0x000178, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetTransformAtSplinePoint_ReturnValue_1) == 0x000190, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetTransformAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetForwardVector_ReturnValue) == 0x0001F0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakTransform_Location_1) == 0x000208, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakTransform_Rotation_1) == 0x000220, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakTransform_Scale_1) == 0x000238, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetForwardVector_ReturnValue_1) == 0x000250, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, Temp_int_Variable) == 0x000268, "Member 'BP_WaterSpline_C_Init_Padded_Spline::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_SelectFloat_ReturnValue) == 0x000270, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000278, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000280, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000298, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0002B0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0002C8, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakVector_X) == 0x0002E0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakVector_Y) == 0x0002E8, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakVector_Z) == 0x0002F0, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakVector_X_1) == 0x0002F8, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakVector_Y_1) == 0x000300, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_BreakVector_Z_1) == 0x000308, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_MakeVector_ReturnValue) == 0x000310, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_MakeVector_ReturnValue_1) == 0x000328, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Add_VectorVector_ReturnValue) == 0x000340, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000358, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Add_IntInt_ReturnValue) == 0x000370, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetSplinePointAt_ReturnValue) == 0x000378, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetSplinePointAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_GetNumberOfSplinePoints_ReturnValue_2) == 0x000400, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_GetNumberOfSplinePoints_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000404, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Init_Padded_Spline, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000408, "Member 'BP_WaterSpline_C_Init_Padded_Spline::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Intersect Lines
// 0x0280 (0x0280 - 0x0000)
struct BP_WaterSpline_C_Intersect_Lines final
{
public:
	struct FVector2D                              P0;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              P1;                                                // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              P2;                                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              P3;                                                // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Intersection_Point;                                // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Intersected_;                                      // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit_;                                              // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        T;                                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        S;                                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              IntPoint;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              S2;                                                // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              S1;                                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_DoubleToVector2D_ReturnValue;        // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_4;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_4;                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_5;                        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_5;                        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_6;                        // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_6;                        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_7;                        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_7;                        // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_8;                        // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_8;                        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_5;      // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_6;      // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_9;                        // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_9;                        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_10;                       // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_10;                       // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_7;      // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_8;      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Intersect_Lines) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Intersect_Lines");
static_assert(sizeof(BP_WaterSpline_C_Intersect_Lines) == 0x000280, "Wrong size on BP_WaterSpline_C_Intersect_Lines");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, P0) == 0x000000, "Member 'BP_WaterSpline_C_Intersect_Lines::P0' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, P1) == 0x000010, "Member 'BP_WaterSpline_C_Intersect_Lines::P1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, P2) == 0x000020, "Member 'BP_WaterSpline_C_Intersect_Lines::P2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, P3) == 0x000030, "Member 'BP_WaterSpline_C_Intersect_Lines::P3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, Intersection_Point) == 0x000040, "Member 'BP_WaterSpline_C_Intersect_Lines::Intersection_Point' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, Intersected_) == 0x000050, "Member 'BP_WaterSpline_C_Intersect_Lines::Intersected_' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, Hit_) == 0x000051, "Member 'BP_WaterSpline_C_Intersect_Lines::Hit_' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, T) == 0x000058, "Member 'BP_WaterSpline_C_Intersect_Lines::T' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, S) == 0x000060, "Member 'BP_WaterSpline_C_Intersect_Lines::S' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, IntPoint) == 0x000068, "Member 'BP_WaterSpline_C_Intersect_Lines::IntPoint' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, S2) == 0x000078, "Member 'BP_WaterSpline_C_Intersect_Lines::S2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, S1) == 0x000088, "Member 'BP_WaterSpline_C_Intersect_Lines::S1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Conv_DoubleToVector2D_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Conv_DoubleToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0000A8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000C9, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BooleanAND_ReturnValue) == 0x0000CA, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x0000CB, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x0000CC, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BooleanAND_ReturnValue_1) == 0x0000CD, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X) == 0x0000D0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y) == 0x0000D8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BooleanAND_ReturnValue_2) == 0x0000E0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_1) == 0x0000E8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_1) == 0x0000F0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_2) == 0x0000F8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_2) == 0x000100, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_3) == 0x000108, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_3) == 0x000110, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000118, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000120, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000128, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000130, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000138, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_4) == 0x000140, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_4) == 0x000148, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000150, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000158, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000160, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000168, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000170, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000178, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_5) == 0x000180, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_5) == 0x000188, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000190, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000198, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_SelectFloat_ReturnValue) == 0x0001A0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_6) == 0x0001A8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_6) == 0x0001B0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x0001B8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x0001C0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0001C8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x0001D0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0001D8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_7) == 0x0001E0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_7) == 0x0001E8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0001F0, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x0001F8, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BooleanOR_ReturnValue) == 0x0001F9, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_8) == 0x000200, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_8' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_8) == 0x000208, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_8' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BooleanOR_ReturnValue_1) == 0x000210, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_5) == 0x000218, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_SelectFloat_ReturnValue_1) == 0x000220, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_6) == 0x000228, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_MakeVector2D_ReturnValue) == 0x000230, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_9) == 0x000240, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_9' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_9) == 0x000248, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_9' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_X_10) == 0x000250, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_X_10' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_BreakVector2D_Y_10) == 0x000258, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_BreakVector2D_Y_10' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_7) == 0x000260, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_Subtract_DoubleDouble_ReturnValue_8) == 0x000268, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_Subtract_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Intersect_Lines, CallFunc_MakeVector2D_ReturnValue_1) == 0x000270, "Member 'BP_WaterSpline_C_Intersect_Lines::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_WaterSpline_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_WaterSpline_C_ReceiveEndPlay");
static_assert(sizeof(BP_WaterSpline_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_WaterSpline_C_ReceiveEndPlay");
static_assert(offsetof(BP_WaterSpline_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_WaterSpline_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_WaterSpline_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_WaterSpline_C_ReceiveTick");
static_assert(sizeof(BP_WaterSpline_C_ReceiveTick) == 0x000004, "Wrong size on BP_WaterSpline_C_ReceiveTick");
static_assert(offsetof(BP_WaterSpline_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_WaterSpline_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Refresh Water Info
// 0x0018 (0x0018 - 0x0000)
struct BP_WaterSpline_C_Refresh_Water_Info final
{
public:
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky;       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky;    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Refresh_Water_Info) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Refresh_Water_Info");
static_assert(sizeof(BP_WaterSpline_C_Refresh_Water_Info) == 0x000018, "Wrong size on BP_WaterSpline_C_Refresh_Water_Info");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info, CallFunc_GetIntrepidSkyInstance_IntrepidSky) == 0x000000, "Member 'BP_WaterSpline_C_Refresh_Water_Info::CallFunc_GetIntrepidSkyInstance_IntrepidSky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky) == 0x000008, "Member 'BP_WaterSpline_C_Refresh_Water_Info::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_WaterSpline_C_Refresh_Water_Info::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_WaterSpline_C_Refresh_Water_Info::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'BP_WaterSpline_C_Refresh_Water_Info::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Refresh Water Info Delayed
// 0x0018 (0x0018 - 0x0000)
struct BP_WaterSpline_C_Refresh_Water_Info_Delayed final
{
public:
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky;       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky;    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Refresh_Water_Info_Delayed) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Refresh_Water_Info_Delayed");
static_assert(sizeof(BP_WaterSpline_C_Refresh_Water_Info_Delayed) == 0x000018, "Wrong size on BP_WaterSpline_C_Refresh_Water_Info_Delayed");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info_Delayed, CallFunc_GetIntrepidSkyInstance_IntrepidSky) == 0x000000, "Member 'BP_WaterSpline_C_Refresh_Water_Info_Delayed::CallFunc_GetIntrepidSkyInstance_IntrepidSky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info_Delayed, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky) == 0x000008, "Member 'BP_WaterSpline_C_Refresh_Water_Info_Delayed::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info_Delayed, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_WaterSpline_C_Refresh_Water_Info_Delayed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info_Delayed, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_WaterSpline_C_Refresh_Water_Info_Delayed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Refresh_Water_Info_Delayed, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'BP_WaterSpline_C_Refresh_Water_Info_Delayed::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Remove Spline Loops
// 0x01E8 (0x01E8 - 0x0000)
struct BP_WaterSpline_C_Remove_Spline_Loops final
{
public:
	class USplineComponent*                       InSpline;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Ip;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Del;                                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Points;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seg2;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seg1;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_2;   // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_3;   // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_1;      // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_4;   // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_2;      // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_5;   // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue_3;      // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Intersect_Lines_Intersection_Point;       // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Intersect_Lines_Intersected_;             // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_12;                // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_13;                // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Remove_Spline_Loops) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Remove_Spline_Loops");
static_assert(sizeof(BP_WaterSpline_C_Remove_Spline_Loops) == 0x0001E8, "Wrong size on BP_WaterSpline_C_Remove_Spline_Loops");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, InSpline) == 0x000000, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::InSpline' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Ip) == 0x000008, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Ip' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Del) == 0x000018, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Del' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Points) == 0x00001C, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Points' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Seg2) == 0x000020, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Seg2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Seg1) == 0x000024, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Seg1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Temp_int_Variable) == 0x000028, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x00002C, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Temp_int_Variable_1) == 0x000030, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, Temp_int_Variable_2) == 0x000038, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_2) == 0x000040, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_3) == 0x000044, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_4) == 0x00004C, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Subtract_IntInt_ReturnValue) == 0x000050, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000058, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector_X) == 0x000070, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector_Y) == 0x000078, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector_Z) == 0x000080, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector2D_X) == 0x000088, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector2D_Y) == 0x000090, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000B0, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000B4, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000BC, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_7) == 0x0000C0, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x0000C8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector_X_1) == 0x0000E0, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector_Y_1) == 0x0000E8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_BreakVector_Z_1) == 0x0000F0, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_MakeVector_ReturnValue_1) == 0x0000F8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_8) == 0x000110, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_9) == 0x000114, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetLocationAtSplinePoint_ReturnValue_2) == 0x000118, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetLocationAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_10) == 0x000130, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000138, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetLocationAtSplinePoint_ReturnValue_3) == 0x000148, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetLocationAtSplinePoint_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_11) == 0x000160, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Conv_VectorToVector2D_ReturnValue_1) == 0x000168, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Conv_VectorToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetLocationAtSplinePoint_ReturnValue_4) == 0x000178, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetLocationAtSplinePoint_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Conv_VectorToVector2D_ReturnValue_2) == 0x000190, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Conv_VectorToVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_GetLocationAtSplinePoint_ReturnValue_5) == 0x0001A0, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_GetLocationAtSplinePoint_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Conv_VectorToVector2D_ReturnValue_3) == 0x0001B8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Conv_VectorToVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Intersect_Lines_Intersection_Point) == 0x0001C8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Intersect_Lines_Intersection_Point' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Intersect_Lines_Intersected_) == 0x0001D8, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Intersect_Lines_Intersected_' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_12) == 0x0001DC, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Add_IntInt_ReturnValue_13) == 0x0001E0, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Add_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Remove_Spline_Loops, CallFunc_Less_IntInt_ReturnValue) == 0x0001E4, "Member 'BP_WaterSpline_C_Remove_Spline_Loops::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.RenderingMinimap
// 0x0010 (0x0010 - 0x0000)
struct BP_WaterSpline_C_RenderingMinimap final
{
public:
	bool                                          Rendering;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_RenderingMinimap) == 0x000008, "Wrong alignment on BP_WaterSpline_C_RenderingMinimap");
static_assert(sizeof(BP_WaterSpline_C_RenderingMinimap) == 0x000010, "Wrong size on BP_WaterSpline_C_RenderingMinimap");
static_assert(offsetof(BP_WaterSpline_C_RenderingMinimap, Rendering) == 0x000000, "Member 'BP_WaterSpline_C_RenderingMinimap::Rendering' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_RenderingMinimap, Temp_bool_Variable) == 0x000001, "Member 'BP_WaterSpline_C_RenderingMinimap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_RenderingMinimap, CallFunc_IsWithEditor_ReturnValue) == 0x000002, "Member 'BP_WaterSpline_C_RenderingMinimap::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_RenderingMinimap, K2Node_Select_Default) == 0x000008, "Member 'BP_WaterSpline_C_RenderingMinimap::K2Node_Select_Default' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Setup StaticMesh
// 0x0020 (0x0020 - 0x0000)
struct BP_WaterSpline_C_Setup_StaticMesh final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Var;                                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Setup_StaticMesh) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Setup_StaticMesh");
static_assert(sizeof(BP_WaterSpline_C_Setup_StaticMesh) == 0x000020, "Wrong size on BP_WaterSpline_C_Setup_StaticMesh");
static_assert(offsetof(BP_WaterSpline_C_Setup_StaticMesh, Mesh) == 0x000000, "Member 'BP_WaterSpline_C_Setup_StaticMesh::Mesh' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Setup_StaticMesh, Component) == 0x000008, "Member 'BP_WaterSpline_C_Setup_StaticMesh::Component' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Setup_StaticMesh, Var) == 0x000010, "Member 'BP_WaterSpline_C_Setup_StaticMesh::Var' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Setup_StaticMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000018, "Member 'BP_WaterSpline_C_Setup_StaticMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.SetupDebug
// 0x04F0 (0x04F0 - 0x0000)
struct BP_WaterSpline_C_SetupDebug final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextRenderComponent*                   CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0030(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue;    // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0100(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0xF];                                      // 0x0161(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0170(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   CallFunc_AddComponent_ReturnValue_1;               // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E5[0xB];                                      // 0x01E5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable_1;                            // 0x01F0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   CallFunc_AddComponent_ReturnValue_2;               // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue_1;    // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue_1;  // 0x0260(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue_2;  // 0x02C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0320(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult_1;    // 0x0408(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_WaterSpline_C_SetupDebug) == 0x000010, "Wrong alignment on BP_WaterSpline_C_SetupDebug");
static_assert(sizeof(BP_WaterSpline_C_SetupDebug) == 0x0004F0, "Wrong size on BP_WaterSpline_C_SetupDebug");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_WaterSpline_C_SetupDebug::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_WaterSpline_C_SetupDebug::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, Temp_int_Variable) == 0x00000C, "Member 'BP_WaterSpline_C_SetupDebug::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, Temp_struct_Variable) == 0x000030, "Member 'BP_WaterSpline_C_SetupDebug::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_GetTransformAtSplinePoint_ReturnValue) == 0x000090, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_GetTransformAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_AddComponent_ReturnValue) == 0x0000F0, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_MakeTransform_ReturnValue) == 0x000100, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_IsValid_ReturnValue_1) == 0x000160, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_ComposeTransforms_ReturnValue) == 0x000170, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_AddComponent_ReturnValue_1) == 0x0001D0, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Array_AddUnique_ReturnValue) == 0x0001D8, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0001DC, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001E0, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001E4, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, Temp_struct_Variable_1) == 0x0001F0, "Member 'BP_WaterSpline_C_SetupDebug::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_AddComponent_ReturnValue_2) == 0x000250, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_AddComponent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_GetNumberOfSplinePoints_ReturnValue_1) == 0x000258, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_GetNumberOfSplinePoints_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00025C, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_GetTransformAtSplinePoint_ReturnValue_1) == 0x000260, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_GetTransformAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_GetTransformAtSplinePoint_ReturnValue_2) == 0x0002C0, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_GetTransformAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000320, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_SetupDebug, CallFunc_K2_SetWorldTransform_SweepHitResult_1) == 0x000408, "Member 'BP_WaterSpline_C_SetupDebug::CallFunc_K2_SetWorldTransform_SweepHitResult_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Snap Spline To Lake Edge
// 0x0380 (0x0380 - 0x0000)
struct BP_WaterSpline_C_Snap_Spline_To_Lake_Edge final
{
public:
	int32                                         EndSPMinusTwo;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndSPMinusOne;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndSP;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SnapDelta;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Snaploc;                                           // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OrigSecondToEndPos;                                // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OrigEndPos;                                        // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OrigDelta;                                         // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue; // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue; // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1; // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue_1; // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_2; // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_6;                          // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_6;                          // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_6;                          // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_7;                          // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_7;                          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_7;                          // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_2;   // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_3;   // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Snap_Spline_To_Lake_Edge");
static_assert(sizeof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge) == 0x000380, "Wrong size on BP_WaterSpline_C_Snap_Spline_To_Lake_Edge");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, EndSPMinusTwo) == 0x000000, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::EndSPMinusTwo' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, EndSPMinusOne) == 0x000004, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::EndSPMinusOne' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, EndSP) == 0x000008, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::EndSP' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, SnapDelta) == 0x000010, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::SnapDelta' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, Snaploc) == 0x000028, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::Snaploc' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, OrigSecondToEndPos) == 0x000040, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::OrigSecondToEndPos' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, OrigEndPos) == 0x000058, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::OrigEndPos' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, OrigDelta) == 0x000070, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::OrigDelta' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000088, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue) == 0x0000A0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x0000B8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Normal_ReturnValue) == 0x0000E8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue) == 0x000100, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1) == 0x000118, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X) == 0x000130, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y) == 0x000138, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z) == 0x000140, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_1) == 0x000148, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_1) == 0x000150, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_1) == 0x000158, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_MakeVector_ReturnValue) == 0x000160, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_MakeVector_ReturnValue_1) == 0x000178, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue_1) == 0x000190, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_2) == 0x0001A8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_2) == 0x0001C0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_2) == 0x0001C8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_2) == 0x0001D0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_3) == 0x0001D8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_3) == 0x0001E0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_3) == 0x0001E8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_MakeVector_ReturnValue_2) == 0x0001F0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_MakeVector_ReturnValue_3) == 0x000208, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000220, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_4) == 0x000238, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_4) == 0x000240, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_4) == 0x000248, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Add_VectorVector_ReturnValue) == 0x000250, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_5) == 0x000268, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_5) == 0x000270, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_5) == 0x000278, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_MakeVector_ReturnValue_4) == 0x000280, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000298, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_6) == 0x0002B0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_6) == 0x0002B8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_6) == 0x0002C0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_X_7) == 0x0002C8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Y_7) == 0x0002D0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_BreakVector_Z_7) == 0x0002D8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_MakeVector_ReturnValue_5) == 0x0002E0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0002F8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Subtract_IntInt_ReturnValue) == 0x0002FC, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000300, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000304, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000308, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetLocationAtSplinePoint_ReturnValue_2) == 0x000320, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetLocationAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x000338, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_GetLocationAtSplinePoint_ReturnValue_3) == 0x000350, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_GetLocationAtSplinePoint_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Lake_Edge, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x000368, "Member 'BP_WaterSpline_C_Snap_Spline_To_Lake_Edge::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Snap Spline To Spline
// 0x0408 (0x0408 - 0x0000)
struct BP_WaterSpline_C_Snap_Spline_To_Spline final
{
public:
	struct FVector                                ClosestTangent;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OtherSplineEnd;                                    // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndSP;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OtherSplineStart;                                  // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndSPMinusTwo;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndSPMinusOne;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SnapDelta;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Snaploc;                                           // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OrigSecondToEndPos;                                // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OrigEndPos;                                        // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OrigDelta;                                         // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindTangentClosestToWorldLocation_ReturnValue; // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue; // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_1;   // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue; // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1; // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_5;                          // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_5;                          // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_5;                          // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_2;   // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_6;                          // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_6;                          // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_6;                          // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue_3;   // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_2;      // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Snap_Spline_To_Spline) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Snap_Spline_To_Spline");
static_assert(sizeof(BP_WaterSpline_C_Snap_Spline_To_Spline) == 0x000408, "Wrong size on BP_WaterSpline_C_Snap_Spline_To_Spline");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, ClosestTangent) == 0x000000, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::ClosestTangent' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, OtherSplineEnd) == 0x000018, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::OtherSplineEnd' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, EndSP) == 0x000030, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::EndSP' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, OtherSplineStart) == 0x000038, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::OtherSplineStart' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, EndSPMinusTwo) == 0x000050, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::EndSPMinusTwo' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, EndSPMinusOne) == 0x000054, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::EndSPMinusOne' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, SnapDelta) == 0x000058, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::SnapDelta' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, Snaploc) == 0x000070, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::Snaploc' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, OrigSecondToEndPos) == 0x000088, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::OrigSecondToEndPos' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, OrigEndPos) == 0x0000A0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::OrigEndPos' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, OrigDelta) == 0x0000B8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::OrigDelta' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X) == 0x0000E8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y) == 0x0000F0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z) == 0x0000F8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_FindTangentClosestToWorldLocation_ReturnValue) == 0x000100, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_FindTangentClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x000118, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000130, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue) == 0x000148, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue_1) == 0x000160, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000178, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Normal_ReturnValue) == 0x000190, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0001A8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X_1) == 0x0001C0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y_1) == 0x0001C8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z_1) == 0x0001D0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_MakeVector_ReturnValue) == 0x0001D8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0001F0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X_2) == 0x000208, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y_2) == 0x000210, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z_2) == 0x000218, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_MakeVector_ReturnValue_1) == 0x000220, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue) == 0x000238, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetLeaveTangentAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1) == 0x000250, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetArriveTangentAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X_3) == 0x000268, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y_3) == 0x000270, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z_3) == 0x000278, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X_4) == 0x000280, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y_4) == 0x000288, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z_4) == 0x000290, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_MakeVector_ReturnValue_2) == 0x000298, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_MakeVector_ReturnValue_3) == 0x0002B0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0002C8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Normal_ReturnValue_1) == 0x0002E0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_VSize_ReturnValue) == 0x0002F8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_FMax_ReturnValue) == 0x000300, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000308, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000320, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X_5) == 0x000338, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y_5) == 0x000340, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z_5) == 0x000348, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_MakeVector_ReturnValue_4) == 0x000350, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000368, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Subtract_IntInt_ReturnValue) == 0x00036C, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000370, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000374, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Add_VectorVector_ReturnValue) == 0x000378, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue_2) == 0x000390, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_X_6) == 0x0003A8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Y_6) == 0x0003B0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_BreakVector_Z_6) == 0x0003B8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_MakeVector_ReturnValue_5) == 0x0003C0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_GetLocationAtSplinePoint_ReturnValue_3) == 0x0003D8, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_GetLocationAtSplinePoint_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Snap_Spline_To_Spline, CallFunc_Subtract_VectorVector_ReturnValue_2) == 0x0003F0, "Member 'BP_WaterSpline_C_Snap_Spline_To_Spline::CallFunc_Subtract_VectorVector_ReturnValue_2' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.UnwindRadians
// 0x0070 (0x0070 - 0x0000)
struct BP_WaterSpline_C_UnwindRadians final
{
public:
	double                                        R;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Out;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        A;                                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPI_ReturnValue;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPI_ReturnValue_1;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPI_ReturnValue_2;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPI_ReturnValue_3;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_UnwindRadians) == 0x000008, "Wrong alignment on BP_WaterSpline_C_UnwindRadians");
static_assert(sizeof(BP_WaterSpline_C_UnwindRadians) == 0x000070, "Wrong size on BP_WaterSpline_C_UnwindRadians");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, R) == 0x000000, "Member 'BP_WaterSpline_C_UnwindRadians::R' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, Out) == 0x000008, "Member 'BP_WaterSpline_C_UnwindRadians::Out' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, A) == 0x000010, "Member 'BP_WaterSpline_C_UnwindRadians::A' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_GetPI_ReturnValue) == 0x000018, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_GetPI_ReturnValue_1) == 0x000030, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_GetPI_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_GetPI_ReturnValue_2) == 0x000048, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_GetPI_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_GetPI_ReturnValue_3) == 0x000058, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_GetPI_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UnwindRadians, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_WaterSpline_C_UnwindRadians::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Update Dynamic Meshes
// 0x0080 (0x0080 - 0x0000)
struct BP_WaterSpline_C_Update_Dynamic_Meshes final
{
public:
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      CallFunc_Build_Profile_for_Spline_Positions;       // 0x0030(0x0010)(ReferenceParm)
	TArray<double>                                CallFunc_Build_Profile_for_Spline_UVs;             // 0x0040(0x0010)(ReferenceParm)
	TArray<struct FTransform>                     CallFunc_Get_Samples_From_Spline_Frames;           // 0x0050(0x0010)(ReferenceParm)
	TArray<double>                                CallFunc_Get_Samples_From_Spline_FrameTimes;       // 0x0060(0x0010)(ReferenceParm)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Update_Dynamic_Meshes) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Update_Dynamic_Meshes");
static_assert(sizeof(BP_WaterSpline_C_Update_Dynamic_Meshes) == 0x000080, "Wrong size on BP_WaterSpline_C_Update_Dynamic_Meshes");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_GetMaterial_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_GetSplineLength_ReturnValue) == 0x000010, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Build_Profile_for_Spline_Positions) == 0x000030, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Build_Profile_for_Spline_Positions' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Build_Profile_for_Spline_UVs) == 0x000040, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Build_Profile_for_Spline_UVs' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Get_Samples_From_Spline_Frames) == 0x000050, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Get_Samples_From_Spline_Frames' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Get_Samples_From_Spline_FrameTimes) == 0x000060, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Get_Samples_From_Spline_FrameTimes' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000078, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Dynamic_Meshes, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00007C, "Member 'BP_WaterSpline_C_Update_Dynamic_Meshes::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Update Mesh Visibility
// 0x0001 (0x0001 - 0x0000)
struct BP_WaterSpline_C_Update_Mesh_Visibility final
{
public:
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Update_Mesh_Visibility) == 0x000001, "Wrong alignment on BP_WaterSpline_C_Update_Mesh_Visibility");
static_assert(sizeof(BP_WaterSpline_C_Update_Mesh_Visibility) == 0x000001, "Wrong size on BP_WaterSpline_C_Update_Mesh_Visibility");
static_assert(offsetof(BP_WaterSpline_C_Update_Mesh_Visibility, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_Update_Mesh_Visibility::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.Update Static Meshes
// 0x0020 (0x0020 - 0x0000)
struct BP_WaterSpline_C_Update_Static_Meshes final
{
public:
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_Update_Static_Meshes) == 0x000008, "Wrong alignment on BP_WaterSpline_C_Update_Static_Meshes");
static_assert(sizeof(BP_WaterSpline_C_Update_Static_Meshes) == 0x000020, "Wrong size on BP_WaterSpline_C_Update_Static_Meshes");
static_assert(offsetof(BP_WaterSpline_C_Update_Static_Meshes, CallFunc_GetMaterial_ReturnValue) == 0x000000, "Member 'BP_WaterSpline_C_Update_Static_Meshes::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Static_Meshes, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_WaterSpline_C_Update_Static_Meshes::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Static_Meshes, CallFunc_SetStaticMesh_ReturnValue) == 0x000010, "Member 'BP_WaterSpline_C_Update_Static_Meshes::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Static_Meshes, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000014, "Member 'BP_WaterSpline_C_Update_Static_Meshes::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_Update_Static_Meshes, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000018, "Member 'BP_WaterSpline_C_Update_Static_Meshes::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function BP_WaterSpline.BP_WaterSpline_C.UserConstructionScript
// 0x0078 (0x0078 - 0x0000)
struct BP_WaterSpline_C_UserConstructionScript final
{
public:
	TArray<double>                                SplinePointUV;                                     // 0x0000(0x0010)(Edit, BlueprintVisible)
	double                                        Segment_Remainder;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Segment_Len;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Section_Len;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Section_Start;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     SplinePoints;                                      // 0x0030(0x0010)(Edit, BlueprintVisible)
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInvalidateMeshes_Invalidated;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky;       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshPool*                       CallFunc_CreateDynamicMeshPool_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky;    // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterSpline_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_WaterSpline_C_UserConstructionScript");
static_assert(sizeof(BP_WaterSpline_C_UserConstructionScript) == 0x000078, "Wrong size on BP_WaterSpline_C_UserConstructionScript");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, SplinePointUV) == 0x000000, "Member 'BP_WaterSpline_C_UserConstructionScript::SplinePointUV' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, Segment_Remainder) == 0x000010, "Member 'BP_WaterSpline_C_UserConstructionScript::Segment_Remainder' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, Segment_Len) == 0x000018, "Member 'BP_WaterSpline_C_UserConstructionScript::Segment_Len' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, Section_Len) == 0x000020, "Member 'BP_WaterSpline_C_UserConstructionScript::Section_Len' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, Section_Start) == 0x000028, "Member 'BP_WaterSpline_C_UserConstructionScript::Section_Start' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, SplinePoints) == 0x000030, "Member 'BP_WaterSpline_C_UserConstructionScript::SplinePoints' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_IsWithEditor_ReturnValue) == 0x000040, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_GetGameState_ReturnValue) == 0x000048, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_CheckInvalidateMeshes_Invalidated) == 0x000051, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_CheckInvalidateMeshes_Invalidated' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000052, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_GetIntrepidSkyInstance_IntrepidSky) == 0x000058, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_GetIntrepidSkyInstance_IntrepidSky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_CreateDynamicMeshPool_ReturnValue) == 0x000060, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_CreateDynamicMeshPool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky) == 0x000068, "Member 'BP_WaterSpline_C_UserConstructionScript::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_WaterSpline_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_IsValid_ReturnValue_1) == 0x000071, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterSpline_C_UserConstructionScript, CallFunc_IsValid_ReturnValue_2) == 0x000072, "Member 'BP_WaterSpline_C_UserConstructionScript::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

}

