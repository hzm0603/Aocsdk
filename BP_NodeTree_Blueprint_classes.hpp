#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NodeTree_Blueprint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NodeTree_Blueprint.BP_NodeTree_Blueprint_C
// 0x0030 (0x0378 - 0x0348)
class ABP_NodeTree_Blueprint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UIntrepidAkComponent*                   IntrepidAK;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_NodeTree_phase2_01_StaticMeshComponent0;        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_NodeTree_ambientFX_01_NiagaraComponent0;        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   NodeTree_PointLight_LightComponent0;               // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SharedRoot;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NodeTree_Blueprint(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NodeTree_Blueprint_C">();
	}
	static class ABP_NodeTree_Blueprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NodeTree_Blueprint_C>();
	}
};
static_assert(alignof(ABP_NodeTree_Blueprint_C) == 0x000008, "Wrong alignment on ABP_NodeTree_Blueprint_C");
static_assert(sizeof(ABP_NodeTree_Blueprint_C) == 0x000378, "Wrong size on ABP_NodeTree_Blueprint_C");
static_assert(offsetof(ABP_NodeTree_Blueprint_C, UberGraphFrame) == 0x000348, "Member 'ABP_NodeTree_Blueprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NodeTree_Blueprint_C, IntrepidAK) == 0x000350, "Member 'ABP_NodeTree_Blueprint_C::IntrepidAK' has a wrong offset!");
static_assert(offsetof(ABP_NodeTree_Blueprint_C, SM_NodeTree_phase2_01_StaticMeshComponent0) == 0x000358, "Member 'ABP_NodeTree_Blueprint_C::SM_NodeTree_phase2_01_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_NodeTree_Blueprint_C, NS_NodeTree_ambientFX_01_NiagaraComponent0) == 0x000360, "Member 'ABP_NodeTree_Blueprint_C::NS_NodeTree_ambientFX_01_NiagaraComponent0' has a wrong offset!");
static_assert(offsetof(ABP_NodeTree_Blueprint_C, NodeTree_PointLight_LightComponent0) == 0x000368, "Member 'ABP_NodeTree_Blueprint_C::NodeTree_PointLight_LightComponent0' has a wrong offset!");
static_assert(offsetof(ABP_NodeTree_Blueprint_C, SharedRoot) == 0x000370, "Member 'ABP_NodeTree_Blueprint_C::SharedRoot' has a wrong offset!");

}

