#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateTreeModule

#include "Basic.hpp"

#include "StateTreeModule_structs.hpp"
#include "StateTreeModule_classes.hpp"
#include "GameplayStateTreeModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// Class GameplayStateTreeModule.StateTreeComponent
// 0x0098 (0x01E8 - 0x0150)
class UStateTreeComponent : public UBrainComponent
{
public:
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EStateTreeRunStatus StateTreeRunStatus)> OnStateTreeRunStatusChanged;                       // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FStateTreeReference                    StateTreeRef;                                      // 0x0168(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UAoCTasksPool*                          TasksPool;                                         // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStateTreeTransferMetadata             TransferMetaData;                                  // 0x0188(0x0028)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x18];                                     // 0x01B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartLogicAutomatically;                          // 0x01C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTreeInstanceData                 InstanceData;                                      // 0x01D0(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         BitPad_1E0_0 : 1;                                  // 0x01E0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsPaused : 1;                                     // 0x01E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SendStateTreeEvent(const struct FStateTreeEvent& Event);
	void SetStartLogicAutomatically(const bool bInStartLogicAutomatically);

	EStateTreeRunStatus GetStateTreeRunStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeComponent">();
	}
	static class UStateTreeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeComponent>();
	}
};
static_assert(alignof(UStateTreeComponent) == 0x000008, "Wrong alignment on UStateTreeComponent");
static_assert(sizeof(UStateTreeComponent) == 0x0001E8, "Wrong size on UStateTreeComponent");
static_assert(offsetof(UStateTreeComponent, OnStateTreeRunStatusChanged) == 0x000158, "Member 'UStateTreeComponent::OnStateTreeRunStatusChanged' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, StateTreeRef) == 0x000168, "Member 'UStateTreeComponent::StateTreeRef' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, TasksPool) == 0x000180, "Member 'UStateTreeComponent::TasksPool' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, TransferMetaData) == 0x000188, "Member 'UStateTreeComponent::TransferMetaData' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, bStartLogicAutomatically) == 0x0001C8, "Member 'UStateTreeComponent::bStartLogicAutomatically' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, InstanceData) == 0x0001D0, "Member 'UStateTreeComponent::InstanceData' has a wrong offset!");

// Class GameplayStateTreeModule.StateTreeComponentSchema
// 0x0020 (0x0068 - 0x0048)
class UStateTreeComponentSchema final : public UStateTreeSchema
{
public:
	TSubclassOf<class AActor>                     ContextActorClass;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStateTreeExternalDataDesc             ContextActorDataDesc;                              // 0x0050(0x0018)(NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeComponentSchema">();
	}
	static class UStateTreeComponentSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeComponentSchema>();
	}
};
static_assert(alignof(UStateTreeComponentSchema) == 0x000008, "Wrong alignment on UStateTreeComponentSchema");
static_assert(sizeof(UStateTreeComponentSchema) == 0x000068, "Wrong size on UStateTreeComponentSchema");
static_assert(offsetof(UStateTreeComponentSchema, ContextActorClass) == 0x000048, "Member 'UStateTreeComponentSchema::ContextActorClass' has a wrong offset!");
static_assert(offsetof(UStateTreeComponentSchema, ContextActorDataDesc) == 0x000050, "Member 'UStateTreeComponentSchema::ContextActorDataDesc' has a wrong offset!");

}

