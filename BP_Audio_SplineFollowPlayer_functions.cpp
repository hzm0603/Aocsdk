#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_SplineFollowPlayer

#include "Basic.hpp"

#include "BP_Audio_SplineFollowPlayer_classes.hpp"
#include "BP_Audio_SplineFollowPlayer_parameters.hpp"


namespace SDK
{

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.ExecuteUbergraph_BP_Audio_SplineFollowPlayer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineFollowPlayer_C::ExecuteUbergraph_BP_Audio_SplineFollowPlayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "ExecuteUbergraph_BP_Audio_SplineFollowPlayer");

	Params::BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetControlledPawnLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn**                           ControlledPawnReference                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ControlledPawnLocation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineFollowPlayer_C::GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "GetControlledPawnLocation");

	Params::BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControlledPawnReference != nullptr)
		*ControlledPawnReference = Parms.ControlledPawnReference;

	if (ControlledPawnLocation != nullptr)
		*ControlledPawnLocation = std::move(Parms.ControlledPawnLocation);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetDistanceToPlayerFromClosestSplinePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 DistanceToPlayerFromClosestSplinePoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineFollowPlayer_C::GetDistanceToPlayerFromClosestSplinePoint(double* DistanceToPlayerFromClosestSplinePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "GetDistanceToPlayerFromClosestSplinePoint");

	Params::BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DistanceToPlayerFromClosestSplinePoint != nullptr)
		*DistanceToPlayerFromClosestSplinePoint = Parms.DistanceToPlayerFromClosestSplinePoint;
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetPlayerControllerCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator*                        PlayerControllerCameraRotation                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Audio_SplineFollowPlayer_C::GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "GetPlayerControllerCameraRotation");

	Params::BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerControllerCameraRotation != nullptr)
		*PlayerControllerCameraRotation = std::move(Parms.PlayerControllerCameraRotation);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetSplineComponent
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class USplineComponent* ABP_Audio_SplineFollowPlayer_C::GetSplineComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "GetSplineComponent");

	Params::BP_Audio_SplineFollowPlayer_C_GetSplineComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.PostNodeInit
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_SplineFollowPlayer_C::PostNodeInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "PostNodeInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Audio_SplineFollowPlayer_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Audio_SplineFollowPlayer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "ReceiveTick");

	Params::BP_Audio_SplineFollowPlayer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.UpdateEmitterLocationProxy
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_SplineFollowPlayer_C::UpdateEmitterLocationProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "UpdateEmitterLocationProxy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.UpdateEmitterSlowly
// (BlueprintCallable, BlueprintEvent)

void ABP_Audio_SplineFollowPlayer_C::UpdateEmitterSlowly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Audio_SplineFollowPlayer_C", "UpdateEmitterSlowly");

	UObject::ProcessEvent(Func, nullptr);
}

}

