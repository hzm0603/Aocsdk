#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_ReleaseHeldAbilities

#include "Basic.hpp"

#include "STT_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "StateTreeModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_ReleaseHeldAbilities.STT_ReleaseHeldAbilities_C
// 0x0028 (0x00A0 - 0x0078)
class USTT_ReleaseHeldAbilities_C final : public USTT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          DelayCompleted;                                    // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDelay;                                          // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReleaseDelayTime;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CompleteStateOnAnimationRelease;                   // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayTimerHandle;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_STT_ReleaseHeldAbilities(int32 EntryPoint);
	void OnTimerFinished();
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime);
	void ReceiveStateCompleted(const EStateTreeRunStatus CompletionStatus, const struct FStateTreeActiveStates& CompletedActiveStates);
	void ReleaseHeldAbilities(bool* Succeeded);
	EStateTreeRunStatus ReleaseHeldAbilitiesOnOuter();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_ReleaseHeldAbilities_C">();
	}
	static class USTT_ReleaseHeldAbilities_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_ReleaseHeldAbilities_C>();
	}
};
static_assert(alignof(USTT_ReleaseHeldAbilities_C) == 0x000008, "Wrong alignment on USTT_ReleaseHeldAbilities_C");
static_assert(sizeof(USTT_ReleaseHeldAbilities_C) == 0x0000A0, "Wrong size on USTT_ReleaseHeldAbilities_C");
static_assert(offsetof(USTT_ReleaseHeldAbilities_C, UberGraphFrame) == 0x000078, "Member 'USTT_ReleaseHeldAbilities_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USTT_ReleaseHeldAbilities_C, DelayCompleted) == 0x000080, "Member 'USTT_ReleaseHeldAbilities_C::DelayCompleted' has a wrong offset!");
static_assert(offsetof(USTT_ReleaseHeldAbilities_C, UseDelay) == 0x000081, "Member 'USTT_ReleaseHeldAbilities_C::UseDelay' has a wrong offset!");
static_assert(offsetof(USTT_ReleaseHeldAbilities_C, ReleaseDelayTime) == 0x000088, "Member 'USTT_ReleaseHeldAbilities_C::ReleaseDelayTime' has a wrong offset!");
static_assert(offsetof(USTT_ReleaseHeldAbilities_C, CompleteStateOnAnimationRelease) == 0x000090, "Member 'USTT_ReleaseHeldAbilities_C::CompleteStateOnAnimationRelease' has a wrong offset!");
static_assert(offsetof(USTT_ReleaseHeldAbilities_C, DelayTimerHandle) == 0x000098, "Member 'USTT_ReleaseHeldAbilities_C::DelayTimerHandle' has a wrong offset!");

}

