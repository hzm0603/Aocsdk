#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Orbit

#include "Basic.hpp"

#include "STT_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "EAIMovementOrientation_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DesignDataPlugin_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_Orbit.STT_Orbit_C
// 0x02D0 (0x0348 - 0x0078)
class USTT_Orbit_C final : public USTT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Around_Character;                                  // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAoCExpression                         Target_Expression;                                 // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	class ABaseCharacter*                         Target;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Location;                                   // 0x00E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAoCExpression                         Speed_Multiplier;                                  // 0x00F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	EAIMovementOrientation                        OrientationScheme;                                 // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAoCExpression                         Clockwise;                                         // 0x0150(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FAoCExpression                         Duration;                                          // 0x01A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	double                                        Orbit_Distance;                                    // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Orbit_Distance_Tolerance;                          // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Adjustment_Angle;                         // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle_Adjustment_Speed;                            // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         Agent;                                             // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_Multiplier_Value;                            // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveVector;                                        // 0x0220(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDistance;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementAngle;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clockwise_Value;                                   // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TooFar;                                            // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TooClose;                                          // 0x024A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24B[0x5];                                      // 0x024B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OriginalSpeed;                                     // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PerfectOrbitAngle;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration_Value;                                    // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         Stored_Target;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Angle_Adjustment;                          // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Stored_Location;                                   // 0x0280(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Orbit_Pivot;                                       // 0x0298(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMoveRequestData                       NewVar;                                            // 0x02B8(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          NpcAiMovementType;                                 // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdjustDirectionByNav(const struct FVector& Original_Direction, double Length, struct FVector* AdjustedDirection, bool* Valid, struct FVector* Projected_Location);
	void CheckOrbitDirection(const struct FVector& NewDestination, const struct FVector& Orbit_Pivot_0, bool* Clockwise_0);
	void ExecuteUbergraph_STT_Orbit(int32 EntryPoint);
	void Get_Character_Closest_Nav_Location(class ABaseCharacter* Agent_0, struct FVector* Location);
	void GetRealMoveAngle(double Target_Angle, double Delta_Time, double* Real_Move_Angle);
	void ReceiveExitState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime_0);
	void RotateToTarget(const struct FVector& TargetVec, class AActor* Source, double YawDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_Orbit_C">();
	}
	static class USTT_Orbit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_Orbit_C>();
	}
};
static_assert(alignof(USTT_Orbit_C) == 0x000008, "Wrong alignment on USTT_Orbit_C");
static_assert(sizeof(USTT_Orbit_C) == 0x000348, "Wrong size on USTT_Orbit_C");
static_assert(offsetof(USTT_Orbit_C, UberGraphFrame) == 0x000078, "Member 'USTT_Orbit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Around_Character) == 0x000080, "Member 'USTT_Orbit_C::Around_Character' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Target_Expression) == 0x000088, "Member 'USTT_Orbit_C::Target_Expression' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Target) == 0x0000D8, "Member 'USTT_Orbit_C::Target' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Target_Location) == 0x0000E0, "Member 'USTT_Orbit_C::Target_Location' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Speed_Multiplier) == 0x0000F8, "Member 'USTT_Orbit_C::Speed_Multiplier' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, OrientationScheme) == 0x000148, "Member 'USTT_Orbit_C::OrientationScheme' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Clockwise) == 0x000150, "Member 'USTT_Orbit_C::Clockwise' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Duration) == 0x0001A0, "Member 'USTT_Orbit_C::Duration' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Orbit_Distance) == 0x0001F0, "Member 'USTT_Orbit_C::Orbit_Distance' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Orbit_Distance_Tolerance) == 0x0001F8, "Member 'USTT_Orbit_C::Orbit_Distance_Tolerance' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Distance_Adjustment_Angle) == 0x000200, "Member 'USTT_Orbit_C::Distance_Adjustment_Angle' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Angle_Adjustment_Speed) == 0x000208, "Member 'USTT_Orbit_C::Angle_Adjustment_Speed' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Agent) == 0x000210, "Member 'USTT_Orbit_C::Agent' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Speed_Multiplier_Value) == 0x000218, "Member 'USTT_Orbit_C::Speed_Multiplier_Value' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, MoveVector) == 0x000220, "Member 'USTT_Orbit_C::MoveVector' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, CurrentDistance) == 0x000238, "Member 'USTT_Orbit_C::CurrentDistance' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, MovementAngle) == 0x000240, "Member 'USTT_Orbit_C::MovementAngle' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Clockwise_Value) == 0x000248, "Member 'USTT_Orbit_C::Clockwise_Value' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, TooFar) == 0x000249, "Member 'USTT_Orbit_C::TooFar' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, TooClose) == 0x00024A, "Member 'USTT_Orbit_C::TooClose' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, OriginalSpeed) == 0x000250, "Member 'USTT_Orbit_C::OriginalSpeed' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, PerfectOrbitAngle) == 0x000258, "Member 'USTT_Orbit_C::PerfectOrbitAngle' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Duration_Value) == 0x000260, "Member 'USTT_Orbit_C::Duration_Value' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Timer) == 0x000268, "Member 'USTT_Orbit_C::Timer' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Stored_Target) == 0x000270, "Member 'USTT_Orbit_C::Stored_Target' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Current_Angle_Adjustment) == 0x000278, "Member 'USTT_Orbit_C::Current_Angle_Adjustment' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Stored_Location) == 0x000280, "Member 'USTT_Orbit_C::Stored_Location' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, Orbit_Pivot) == 0x000298, "Member 'USTT_Orbit_C::Orbit_Pivot' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, DeltaTime) == 0x0002B0, "Member 'USTT_Orbit_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, NewVar) == 0x0002B8, "Member 'USTT_Orbit_C::NewVar' has a wrong offset!");
static_assert(offsetof(USTT_Orbit_C, NpcAiMovementType) == 0x000340, "Member 'USTT_Orbit_C::NpcAiMovementType' has a wrong offset!");

}

