#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LocalWeatherCustomOverride

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LocalWeatherCustomOverride.BP_LocalWeatherCustomOverride_C
// 0x00B8 (0x0400 - 0x0348)
class ABP_LocalWeatherCustomOverride_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Collision1;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Transition;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Collision;                                         // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Humidity_Max;                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Humidity_Min;                               // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Precipitation_Amount_Max;                   // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Precipitation_Amount_Min;                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Temp_Max;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Temp_Min;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Wind_Speed_Max;                             // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Wind_Speed_Min;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Chance_Of_Precip_Max;                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Custom_Chance_Of_Precip_Min;                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Blend;                                             // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player_Pawn;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Transition_Distance;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowTransitionDistance;                            // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Transition_Amount;                                 // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AIntrepidSkyBase*                       Intrepid_Sky;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Initial_Overlap(class AActor* Player_Pawn_0);
	void ExecuteUbergraph_BP_LocalWeatherCustomOverride(int32 EntryPoint);
	void Catch_Initial_Overlaps(class UPrimitiveComponent* Component);
	void BndEvt__BP_LocalWeatherCustomOverride_Collision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_LocalWeatherCustomOverride_Collision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LocalWeatherCustomOverride_C">();
	}
	static class ABP_LocalWeatherCustomOverride_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LocalWeatherCustomOverride_C>();
	}
};
static_assert(alignof(ABP_LocalWeatherCustomOverride_C) == 0x000008, "Wrong alignment on ABP_LocalWeatherCustomOverride_C");
static_assert(sizeof(ABP_LocalWeatherCustomOverride_C) == 0x000400, "Wrong size on ABP_LocalWeatherCustomOverride_C");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, UberGraphFrame) == 0x000348, "Member 'ABP_LocalWeatherCustomOverride_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Collision1) == 0x000350, "Member 'ABP_LocalWeatherCustomOverride_C::Collision1' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Transition) == 0x000358, "Member 'ABP_LocalWeatherCustomOverride_C::Transition' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, TextRender) == 0x000360, "Member 'ABP_LocalWeatherCustomOverride_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Collision) == 0x000368, "Member 'ABP_LocalWeatherCustomOverride_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, DefaultSceneRoot) == 0x000370, "Member 'ABP_LocalWeatherCustomOverride_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Humidity_Max) == 0x000378, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Humidity_Max' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Humidity_Min) == 0x000380, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Humidity_Min' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Precipitation_Amount_Max) == 0x000388, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Precipitation_Amount_Max' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Precipitation_Amount_Min) == 0x000390, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Precipitation_Amount_Min' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Temp_Max) == 0x000398, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Temp_Max' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Temp_Min) == 0x0003A0, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Temp_Min' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Wind_Speed_Max) == 0x0003A8, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Wind_Speed_Max' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Wind_Speed_Min) == 0x0003B0, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Wind_Speed_Min' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Chance_Of_Precip_Max) == 0x0003B8, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Chance_Of_Precip_Max' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Custom_Chance_Of_Precip_Min) == 0x0003C0, "Member 'ABP_LocalWeatherCustomOverride_C::Custom_Chance_Of_Precip_Min' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Blend) == 0x0003C8, "Member 'ABP_LocalWeatherCustomOverride_C::Blend' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Player_Pawn) == 0x0003D0, "Member 'ABP_LocalWeatherCustomOverride_C::Player_Pawn' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Scale) == 0x0003D8, "Member 'ABP_LocalWeatherCustomOverride_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Transition_Distance) == 0x0003E0, "Member 'ABP_LocalWeatherCustomOverride_C::Transition_Distance' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, ShowTransitionDistance) == 0x0003E8, "Member 'ABP_LocalWeatherCustomOverride_C::ShowTransitionDistance' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Transition_Amount) == 0x0003F0, "Member 'ABP_LocalWeatherCustomOverride_C::Transition_Amount' has a wrong offset!");
static_assert(offsetof(ABP_LocalWeatherCustomOverride_C, Intrepid_Sky) == 0x0003F8, "Member 'ABP_LocalWeatherCustomOverride_C::Intrepid_Sky' has a wrong offset!");

}

