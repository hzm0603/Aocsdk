#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterInfoRenderer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Check if Rendering
// 0x0010 (0x0010 - 0x0000)
struct BP_WaterInfoRenderer_C_Check_if_Rendering final
{
public:
	bool                                          IsRendering_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Check_if_Rendering) == 0x000004, "Wrong alignment on BP_WaterInfoRenderer_C_Check_if_Rendering");
static_assert(sizeof(BP_WaterInfoRenderer_C_Check_if_Rendering) == 0x000010, "Wrong size on BP_WaterInfoRenderer_C_Check_if_Rendering");
static_assert(offsetof(BP_WaterInfoRenderer_C_Check_if_Rendering, IsRendering_0) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Check_if_Rendering::IsRendering_0' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Check_if_Rendering, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_WaterInfoRenderer_C_Check_if_Rendering::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Check_if_Rendering, CallFunc_Array_Length_ReturnValue_1) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Check_if_Rendering::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Check_if_Rendering, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_WaterInfoRenderer_C_Check_if_Rendering::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Check_if_Rendering, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00000D, "Member 'BP_WaterInfoRenderer_C_Check_if_Rendering::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Check_if_Rendering, CallFunc_BooleanOR_ReturnValue) == 0x00000E, "Member 'BP_WaterInfoRenderer_C_Check_if_Rendering::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.ExecuteUbergraph_BP_WaterInfoRenderer
// 0x0338 (0x0338 - 0x0000)
struct BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterSpline_C*                      CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WaterLake_C*                        CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetEditorCameraPosition_CameraLocation;   // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetEditorCameraPosition_CameraRotation;   // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_GuidToString_ReturnValue;            // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue_1;    // 0x0174(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithEditor_ReturnValue_1;               // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Subtract_LinearColorLinearColor_ReturnValue; // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x01E0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_2;   // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_3;   // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UniqueObjectNameForCooking_LinearColor;            // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             UniqueObjectNameForCooking_OutputDelegate;         // 0x0308(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0318(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetVariableFloat_InValue_ImplicitCast;    // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVariableFloat_InValue_ImplicitCast_1;  // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVariableFloat_InValue_ImplicitCast_2;  // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer");
static_assert(sizeof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer) == 0x000338, "Wrong size on BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, EntryPoint) == 0x000000, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetIntrepidSkyInstance_IntrepidSky) == 0x000008, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetIntrepidSkyInstance_IntrepidSky' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky) == 0x000010, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Length_ReturnValue_1) == 0x000020, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue_2) == 0x000031, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, K2Node_Event_DeltaSeconds) == 0x000034, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000038, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000054, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_HasAuthority_ReturnValue) == 0x000064, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000070, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_BreakVector_X) == 0x000088, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_BreakVector_Y) == 0x000090, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_BreakVector_Z) == 0x000098, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue_3) == 0x0000A0, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetGameState_ReturnValue) == 0x0000A8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetPlayerController_ReturnValue) == 0x0000B0, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue_4) == 0x0000B8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue_5) == 0x0000B9, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetCameraLocation_ReturnValue) == 0x0000C0, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetVectorParameterValue_ReturnValue) == 0x0000D8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x0000E8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetEditorCameraPosition_CameraLocation) == 0x000100, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetEditorCameraPosition_CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetEditorCameraPosition_CameraRotation) == 0x000118, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetEditorCameraPosition_CameraRotation' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x000130, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Conv_GuidToString_ReturnValue) == 0x000140, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Conv_GuidToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsWithEditor_ReturnValue) == 0x000150, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetGameState_ReturnValue_1) == 0x000158, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsValid_ReturnValue_6) == 0x000160, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Length_ReturnValue_2) == 0x000164, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Greater_IntInt_ReturnValue) == 0x000168, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Length_ReturnValue_3) == 0x00016C, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000170, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_BooleanOR_ReturnValue) == 0x000171, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_GetVectorParameterValue_ReturnValue_1) == 0x000174, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_GetVectorParameterValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_IsWithEditor_ReturnValue_1) == 0x000184, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_IsWithEditor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Subtract_LinearColorLinearColor_ReturnValue) == 0x000188, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Subtract_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x000198, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x0001B0, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001C8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0001E0, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Conv_VectorToLinearColor_ReturnValue_2) == 0x0002C8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Conv_VectorToLinearColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Conv_VectorToLinearColor_ReturnValue_3) == 0x0002D8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Conv_VectorToLinearColor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, UniqueObjectNameForCooking_LinearColor) == 0x0002E8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::UniqueObjectNameForCooking_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Length_ReturnValue_4) == 0x0002F8, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0002FC, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Array_Length_ReturnValue_5) == 0x000300, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000304, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, UniqueObjectNameForCooking_OutputDelegate) == 0x000308, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::UniqueObjectNameForCooking_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000318, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Vector_Distance_ReturnValue) == 0x000320, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000328, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_SetVariableFloat_InValue_ImplicitCast) == 0x00032C, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_SetVariableFloat_InValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_SetVariableFloat_InValue_ImplicitCast_1) == 0x000330, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_SetVariableFloat_InValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer, CallFunc_SetVariableFloat_InValue_ImplicitCast_2) == 0x000334, "Member 'BP_WaterInfoRenderer_C_ExecuteUbergraph_BP_WaterInfoRenderer::CallFunc_SetVariableFloat_InValue_ImplicitCast_2' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Fix up all Loaded Water Actors
// 0x0080 (0x0080 - 0x0000)
struct BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors final
{
public:
	TArray<class ABP_WaterLake_C*>                Lakes_0;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ABP_WaterSpline_C*>              Rivers_0;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterLake_C*                        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WaterSpline_C*                      CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WaterLake_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0060(0x0010)(ReferenceParm)
	TArray<class ABP_WaterSpline_C*>              CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0070(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors");
static_assert(sizeof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors) == 0x000080, "Wrong size on BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, Lakes_0) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::Lakes_0' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, Rivers_0) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::Rivers_0' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Less_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_GetAllActorsOfClass_OutActors) == 0x000060, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000070, "Member 'BP_WaterInfoRenderer_C_Fix_up_all_Loaded_Water_Actors::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Get Current at Location
// 0x0028 (0x0028 - 0x0000)
struct BP_WaterInfoRenderer_C_Get_Current_at_Location final
{
public:
	struct FVector                                World_Location;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Current_Velocity;                                  // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Get_Current_at_Location) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Get_Current_at_Location");
static_assert(sizeof(BP_WaterInfoRenderer_C_Get_Current_at_Location) == 0x000028, "Wrong size on BP_WaterInfoRenderer_C_Get_Current_at_Location");
static_assert(offsetof(BP_WaterInfoRenderer_C_Get_Current_at_Location, World_Location) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Get_Current_at_Location::World_Location' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Get_Current_at_Location, Current_Velocity) == 0x000018, "Member 'BP_WaterInfoRenderer_C_Get_Current_at_Location::Current_Velocity' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Init Processing MID
// 0x0018 (0x0018 - 0x0000)
struct BP_WaterInfoRenderer_C_Init_Processing_MID final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Init_Processing_MID) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Init_Processing_MID");
static_assert(sizeof(BP_WaterInfoRenderer_C_Init_Processing_MID) == 0x000018, "Wrong size on BP_WaterInfoRenderer_C_Init_Processing_MID");
static_assert(offsetof(BP_WaterInfoRenderer_C_Init_Processing_MID, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Init_Processing_MID::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Init_Processing_MID, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_WaterInfoRenderer_C_Init_Processing_MID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Init_Processing_MID, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Init_Processing_MID::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Init_Processing_MID, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Init_Processing_MID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Init_Processing_MID, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'BP_WaterInfoRenderer_C_Init_Processing_MID::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.IsOverlapping2D
// 0x00D8 (0x00D8 - 0x0000)
struct BP_WaterInfoRenderer_C_IsOverlapping2D final
{
public:
	struct FVector2D                              Max;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Max_0;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Max_1;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Max_2;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Max_3;                                             // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Max_4;                                             // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverlapping;                                     // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_4;                        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_4;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_3;          // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_5;                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_5;                        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_4;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_5;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_IsOverlapping2D) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_IsOverlapping2D");
static_assert(sizeof(BP_WaterInfoRenderer_C_IsOverlapping2D) == 0x0000D8, "Wrong size on BP_WaterInfoRenderer_C_IsOverlapping2D");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, Max) == 0x000000, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::Max' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, Max_0) == 0x000010, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::Max_0' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, Max_1) == 0x000020, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::Max_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, Max_2) == 0x000030, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::Max_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, Max_3) == 0x000040, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::Max_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, Max_4) == 0x000050, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::Max_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, IsOverlapping) == 0x000060, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::IsOverlapping' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_X) == 0x000068, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_Y) == 0x000070, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_X_1) == 0x000078, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_Y_1) == 0x000080, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_X_2) == 0x000088, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_Y_2) == 0x000090, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_X_3) == 0x000098, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_Y_3) == 0x0000A0, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_X_4) == 0x0000A8, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_Y_4) == 0x0000B0, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000B9, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x0000BA, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_Less_DoubleDouble_ReturnValue_3) == 0x0000BB, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_Less_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BooleanAND_ReturnValue) == 0x0000BC, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BooleanAND_ReturnValue_1) == 0x0000BD, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_X_5) == 0x0000C0, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BreakVector2D_Y_5) == 0x0000C8, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_Less_DoubleDouble_ReturnValue_4) == 0x0000D0, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_Less_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_Less_DoubleDouble_ReturnValue_5) == 0x0000D1, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_Less_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BooleanAND_ReturnValue_2) == 0x0000D2, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BooleanAND_ReturnValue_3) == 0x0000D3, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlapping2D, CallFunc_BooleanAND_ReturnValue_4) == 0x0000D4, "Member 'BP_WaterInfoRenderer_C_IsOverlapping2D::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.IsOverlappingGrid2D
// 0x0178 (0x0178 - 0x0000)
struct BP_WaterInfoRenderer_C_IsOverlappingGrid2D final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverlapping;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorBounds_Origin;                    // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorBounds_BoxExtent;                 // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_5;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_4;               // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_5;               // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlapping2D_IsOverlapping;            // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_IsOverlappingGrid2D");
static_assert(sizeof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D) == 0x000178, "Wrong size on BP_WaterInfoRenderer_C_IsOverlappingGrid2D");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, Actor) == 0x000000, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::Actor' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, IsOverlapping) == 0x000008, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::IsOverlapping' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_GetActorBounds_Origin) == 0x000010, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_GetActorBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_GetActorBounds_BoxExtent) == 0x000028, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_GetActorBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_X) == 0x000048, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_Y) == 0x000050, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_Z) == 0x000058, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_X_1) == 0x000060, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_Y_1) == 0x000068, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_Z_1) == 0x000070, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000080, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_X_2) == 0x0000A0, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_Y_2) == 0x0000A8, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_BreakVector_Z_2) == 0x0000B0, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_MakeVector2D_ReturnValue) == 0x0000B8, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000D0, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000D8, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_MakeVector2D_ReturnValue_1) == 0x0000E0, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000F0, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x0000F8, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_MakeVector2D_ReturnValue_2) == 0x000100, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000110, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x000118, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_MakeVector2D_ReturnValue_3) == 0x000120, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000130, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Subtract_DoubleDouble_ReturnValue_5) == 0x000138, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Subtract_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_MakeVector2D_ReturnValue_4) == 0x000140, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_MakeVector2D_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x000150, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_MakeVector2D_ReturnValue_5) == 0x000158, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_MakeVector2D_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_IsOverlapping2D_IsOverlapping) == 0x000168, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_IsOverlapping2D_IsOverlapping' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_IsOverlappingGrid2D, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000170, "Member 'BP_WaterInfoRenderer_C_IsOverlappingGrid2D::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Pad Spline Ends
// 0x0008 (0x0008 - 0x0000)
struct BP_WaterInfoRenderer_C_Pad_Spline_Ends final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Pad_Spline_Ends) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Pad_Spline_Ends");
static_assert(sizeof(BP_WaterInfoRenderer_C_Pad_Spline_Ends) == 0x000008, "Wrong size on BP_WaterInfoRenderer_C_Pad_Spline_Ends");
static_assert(offsetof(BP_WaterInfoRenderer_C_Pad_Spline_Ends, Spline) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Pad_Spline_Ends::Spline' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_WaterInfoRenderer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_WaterInfoRenderer_C_ReceiveTick");
static_assert(sizeof(BP_WaterInfoRenderer_C_ReceiveTick) == 0x000004, "Wrong size on BP_WaterInfoRenderer_C_ReceiveTick");
static_assert(offsetof(BP_WaterInfoRenderer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_WaterInfoRenderer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Register Lake
// 0x0070 (0x0070 - 0x0000)
struct BP_WaterInfoRenderer_C_Register_Lake final
{
public:
	class ABP_WaterLake_C*                        LakeRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterLake_C*                        Lake;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_WaterLake_C>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0010(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_WaterLake_C>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1; // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Register_Lake) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Register_Lake");
static_assert(sizeof(BP_WaterInfoRenderer_C_Register_Lake) == 0x000070, "Wrong size on BP_WaterInfoRenderer_C_Register_Lake");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, LakeRef) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Register_Lake::LakeRef' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, Lake) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Register_Lake::Lake' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Register_Lake::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, CallFunc_Array_AddUnique_ReturnValue) == 0x000038, "Member 'BP_WaterInfoRenderer_C_Register_Lake::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_WaterInfoRenderer_C_Register_Lake::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1) == 0x000040, "Member 'BP_WaterInfoRenderer_C_Register_Lake::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Lake, CallFunc_Array_RemoveItem_ReturnValue) == 0x000068, "Member 'BP_WaterInfoRenderer_C_Register_Lake::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Register Spline
// 0x0070 (0x0070 - 0x0000)
struct BP_WaterInfoRenderer_C_Register_Spline final
{
public:
	class ABP_WaterSpline_C*                      SplineRef;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterSpline_C*                      RiverBP;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_WaterSpline_C>       CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0010(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_WaterSpline_C>       CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1; // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Register_Spline) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Register_Spline");
static_assert(sizeof(BP_WaterInfoRenderer_C_Register_Spline) == 0x000070, "Wrong size on BP_WaterInfoRenderer_C_Register_Spline");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, SplineRef) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Register_Spline::SplineRef' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, RiverBP) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Register_Spline::RiverBP' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Register_Spline::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, CallFunc_Array_AddUnique_ReturnValue) == 0x000038, "Member 'BP_WaterInfoRenderer_C_Register_Spline::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_WaterInfoRenderer_C_Register_Spline::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1) == 0x000040, "Member 'BP_WaterInfoRenderer_C_Register_Spline::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Register_Spline, CallFunc_Array_RemoveItem_ReturnValue) == 0x000068, "Member 'BP_WaterInfoRenderer_C_Register_Spline::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Render Water Actors
// 0x00D0 (0x00D0 - 0x0000)
struct BP_WaterInfoRenderer_C_Render_Water_Actors final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_WaterLake_C>         CallFunc_Array_Get_Item;                           // 0x0038(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_WaterSpline_C>       CallFunc_Array_Get_Item_1;                         // 0x0060(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterLake_C*                        UniqueObjectNameForCooking_AsBP_Water_Lake;        // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UniqueObjectNameForCooking_bSuccess;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WaterSpline_C*                      UniqueObjectNameForCooking_AsBP_Water_Spline;      // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UniqueObjectNameForCooking_bSuccess_1;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingGrid2D_IsOverlapping;        // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingGrid2D_IsOverlapping_1;      // 0x00BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Render_Water_Actors) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Render_Water_Actors");
static_assert(sizeof(BP_WaterInfoRenderer_C_Render_Water_Actors) == 0x0000D0, "Wrong size on BP_WaterInfoRenderer_C_Render_Water_Actors");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_MakeColor_ReturnValue) == 0x000014, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Greater_IntInt_ReturnValue) == 0x00002C, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000034, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_BooleanOR_ReturnValue) == 0x000035, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000088, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x000090, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, UniqueObjectNameForCooking_AsBP_Water_Lake) == 0x000098, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::UniqueObjectNameForCooking_AsBP_Water_Lake' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, UniqueObjectNameForCooking_bSuccess) == 0x0000A0, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::UniqueObjectNameForCooking_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, UniqueObjectNameForCooking_AsBP_Water_Spline) == 0x0000A8, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::UniqueObjectNameForCooking_AsBP_Water_Spline' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, UniqueObjectNameForCooking_bSuccess_1) == 0x0000B0, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::UniqueObjectNameForCooking_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_AddUnique_ReturnValue) == 0x0000B4, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_AddUnique_ReturnValue_1) == 0x0000B8, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_IsValid_ReturnValue) == 0x0000BC, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_IsOverlappingGrid2D_IsOverlapping) == 0x0000BD, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_IsOverlappingGrid2D_IsOverlapping' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_IsValid_ReturnValue_1) == 0x0000BE, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_IsOverlappingGrid2D_IsOverlapping_1) == 0x0000BF, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_IsOverlappingGrid2D_IsOverlapping_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_Length_ReturnValue_2) == 0x0000C0, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Array_Length_ReturnValue_3) == 0x0000C4, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Less_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Render_Water_Actors, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C9, "Member 'BP_WaterInfoRenderer_C_Render_Water_Actors::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Set Water Params
// 0x0138 (0x0138 - 0x0000)
struct BP_WaterInfoRenderer_C_Set_Water_Params final
{
public:
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0050(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Set_Water_Params) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Set_Water_Params");
static_assert(sizeof(BP_WaterInfoRenderer_C_Set_Water_Params) == 0x000138, "Wrong size on BP_WaterInfoRenderer_C_Set_Water_Params");
static_assert(offsetof(BP_WaterInfoRenderer_C_Set_Water_Params, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Set_Water_Params::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Set_Water_Params, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Set_Water_Params::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Set_Water_Params, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000028, "Member 'BP_WaterInfoRenderer_C_Set_Water_Params::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Set_Water_Params, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000040, "Member 'BP_WaterInfoRenderer_C_Set_Water_Params::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Set_Water_Params, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000050, "Member 'BP_WaterInfoRenderer_C_Set_Water_Params::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Unpad Spline Ends
// 0x0008 (0x0008 - 0x0000)
struct BP_WaterInfoRenderer_C_Unpad_Spline_Ends final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Unpad_Spline_Ends) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Unpad_Spline_Ends");
static_assert(sizeof(BP_WaterInfoRenderer_C_Unpad_Spline_Ends) == 0x000008, "Wrong size on BP_WaterInfoRenderer_C_Unpad_Spline_Ends");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unpad_Spline_Ends, Spline) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Unpad_Spline_Ends::Spline' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Unregister Lake
// 0x0038 (0x0038 - 0x0000)
struct BP_WaterInfoRenderer_C_Unregister_Lake final
{
public:
	class ABP_WaterLake_C*                        LakeRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_WaterLake_C>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Unregister_Lake) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Unregister_Lake");
static_assert(sizeof(BP_WaterInfoRenderer_C_Unregister_Lake) == 0x000038, "Wrong size on BP_WaterInfoRenderer_C_Unregister_Lake");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Lake, LakeRef) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Unregister_Lake::LakeRef' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Lake, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Unregister_Lake::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Lake, CallFunc_Array_RemoveItem_ReturnValue) == 0x000030, "Member 'BP_WaterInfoRenderer_C_Unregister_Lake::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Lake, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000031, "Member 'BP_WaterInfoRenderer_C_Unregister_Lake::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Unregister Spline
// 0x0038 (0x0038 - 0x0000)
struct BP_WaterInfoRenderer_C_Unregister_Spline final
{
public:
	class ABP_WaterSpline_C*                      SplineRef;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_WaterSpline_C>       CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Unregister_Spline) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Unregister_Spline");
static_assert(sizeof(BP_WaterInfoRenderer_C_Unregister_Spline) == 0x000038, "Wrong size on BP_WaterInfoRenderer_C_Unregister_Spline");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Spline, SplineRef) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Unregister_Spline::SplineRef' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Spline, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Unregister_Spline::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Spline, CallFunc_Array_RemoveItem_ReturnValue) == 0x000030, "Member 'BP_WaterInfoRenderer_C_Unregister_Spline::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Unregister_Spline, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000031, "Member 'BP_WaterInfoRenderer_C_Unregister_Spline::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.Update WaterActor Registry
// 0x0058 (0x0058 - 0x0000)
struct BP_WaterInfoRenderer_C_Update_WaterActor_Registry final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_WaterLake_C*>                CallFunc_GetAllActorsOfClass_OutActors;            // 0x0010(0x0010)(ReferenceParm)
	TArray<class ABP_WaterSpline_C*>              CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0020(0x0010)(ReferenceParm)
	class ABP_WaterLake_C*                        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterSpline_C*                      CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_Update_WaterActor_Registry");
static_assert(sizeof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry) == 0x000058, "Wrong size on BP_WaterInfoRenderer_C_Update_WaterActor_Registry");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000020, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, Temp_int_Loop_Counter_Variable_1) == 0x00004C, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_Update_WaterActor_Registry, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'BP_WaterInfoRenderer_C_Update_WaterActor_Registry::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_WaterInfoRenderer.BP_WaterInfoRenderer_C.UserConstructionScript
// 0x0028 (0x0028 - 0x0000)
struct BP_WaterInfoRenderer_C_UserConstructionScript final
{
public:
	class AAoCPlayerController*                   CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AIntrepidSkyBase*                       CallFunc_GetIntrepidSkyInstance_IntrepidSky;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_VerraWorld_GlobalSky_C*             K2Node_DynamicCast_AsBP_Verra_World_Global_Sky;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithEditor_ReturnValue;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WaterInfoRenderer_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_WaterInfoRenderer_C_UserConstructionScript");
static_assert(sizeof(BP_WaterInfoRenderer_C_UserConstructionScript) == 0x000028, "Wrong size on BP_WaterInfoRenderer_C_UserConstructionScript");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000000, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, CallFunc_GetIntrepidSkyInstance_IntrepidSky) == 0x000010, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::CallFunc_GetIntrepidSkyInstance_IntrepidSky' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, K2Node_DynamicCast_AsBP_Verra_World_Global_Sky) == 0x000018, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::K2Node_DynamicCast_AsBP_Verra_World_Global_Sky' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WaterInfoRenderer_C_UserConstructionScript, CallFunc_IsWithEditor_ReturnValue) == 0x000022, "Member 'BP_WaterInfoRenderer_C_UserConstructionScript::CallFunc_IsWithEditor_ReturnValue' has a wrong offset!");

}

