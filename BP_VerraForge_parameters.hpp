#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VerraForge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_VerraForge.BP_VerraForge_C.BakeInstances
// 0x0040 (0x0040 - 0x0000)
struct BP_VerraForge_C_BakeInstances final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_ClearPCGLink_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UInstancedStaticMeshComponent*>  CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstancedStaticMeshComponent*          CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VerraForge_C_BakeInstances) == 0x000008, "Wrong alignment on BP_VerraForge_C_BakeInstances");
static_assert(sizeof(BP_VerraForge_C_BakeInstances) == 0x000040, "Wrong size on BP_VerraForge_C_BakeInstances");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_VerraForge_C_BakeInstances::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_VerraForge_C_BakeInstances::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_ClearPCGLink_ReturnValue) == 0x000010, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_ClearPCGLink_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000018, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000039, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_BakeInstances, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003A, "Member 'BP_VerraForge_C_BakeInstances::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_VerraForge.BP_VerraForge_C.Draw Shapes
// 0x00C8 (0x00C8 - 0x0000)
struct BP_VerraForge_C_Draw_Shapes final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyByPi_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sin_ReturnValue;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Cos_ReturnValue;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VerraForge_C_Draw_Shapes) == 0x000008, "Wrong alignment on BP_VerraForge_C_Draw_Shapes");
static_assert(sizeof(BP_VerraForge_C_Draw_Shapes) == 0x0000C8, "Wrong size on BP_VerraForge_C_Draw_Shapes");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, Temp_int_Variable) == 0x000000, "Member 'BP_VerraForge_C_Draw_Shapes::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_MultiplyByPi_ReturnValue) == 0x000018, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_MultiplyByPi_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Sin_ReturnValue) == 0x000030, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Cos_ReturnValue) == 0x000038, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000048, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_BreakVector_X) == 0x000068, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_BreakVector_Y) == 0x000070, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_BreakVector_Z) == 0x000078, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000080, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000088, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000090, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_MakeVector_ReturnValue_1) == 0x000098, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, K2Node_SwitchEnum_CmpSuccess) == 0x0000B0, "Member 'BP_VerraForge_C_Draw_Shapes::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000B8, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_Draw_Shapes, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0000C0, "Member 'BP_VerraForge_C_Draw_Shapes::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function BP_VerraForge.BP_VerraForge_C.SetupExclusionCheckVolume
// 0x01C8 (0x01C8 - 0x0000)
struct BP_VerraForge_C_SetupExclusionCheckVolume final
{
public:
	double                                        MaxDistanceToCenter;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineCenter;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SplinePointLocations;                              // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorArrayAverage_ReturnValue;        // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BD[0x3];                                      // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VerraForge_C_SetupExclusionCheckVolume) == 0x000008, "Wrong alignment on BP_VerraForge_C_SetupExclusionCheckVolume");
static_assert(sizeof(BP_VerraForge_C_SetupExclusionCheckVolume) == 0x0001C8, "Wrong size on BP_VerraForge_C_SetupExclusionCheckVolume");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, MaxDistanceToCenter) == 0x000000, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::MaxDistanceToCenter' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, SplineCenter) == 0x000008, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::SplineCenter' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, SplinePointLocations) == 0x000020, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::SplinePointLocations' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, Temp_int_Variable) == 0x000034, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000040, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, Temp_int_Loop_Counter_Variable) == 0x000128, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Array_Get_Item) == 0x000130, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Array_Length_ReturnValue) == 0x000148, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000150, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Less_IntInt_ReturnValue) == 0x000168, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_VSize_ReturnValue) == 0x000170, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000178, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Add_IntInt_ReturnValue_1) == 0x00017C, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_GetVectorArrayAverage_ReturnValue) == 0x000180, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_GetVectorArrayAverage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000198, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Array_Add_ReturnValue) == 0x0001B0, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0001B4, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001B8, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001BC, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_SetupExclusionCheckVolume, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x0001C0, "Member 'BP_VerraForge_C_SetupExclusionCheckVolume::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");

// Function BP_VerraForge.BP_VerraForge_C.UX Icon
// 0x0370 (0x0370 - 0x0000)
struct BP_VerraForge_C_UX_Icon final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtSplinePoint_ReturnValue;     // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0030(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetVectorArrayAverage_ReturnValue;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0090(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19A[0x2];                                      // 0x019A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0218(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0288(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_VerraForge_C_UX_Icon) == 0x000008, "Wrong alignment on BP_VerraForge_C_UX_Icon");
static_assert(sizeof(BP_VerraForge_C_UX_Icon) == 0x000370, "Wrong size on BP_VerraForge_C_UX_Icon");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, Temp_int_Variable) == 0x000000, "Member 'BP_VerraForge_C_UX_Icon::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_GetLocationAtSplinePoint_ReturnValue) == 0x000008, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_GetLocationAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000020, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, Temp_object_Variable) == 0x000030, "Member 'BP_VerraForge_C_UX_Icon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_GetVectorArrayAverage_ReturnValue) == 0x000040, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_GetVectorArrayAverage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000060, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_LineTraceSingle_OutHit) == 0x000090, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_LineTraceSingle_ReturnValue) == 0x000178, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_MakeVector_ReturnValue) == 0x000180, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_bBlockingHit) == 0x000198, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_bInitialOverlap) == 0x000199, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_Time) == 0x00019C, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_Distance) == 0x0001A0, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_Location) == 0x0001A8, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_ImpactPoint) == 0x0001C0, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_Normal) == 0x0001D8, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_ImpactNormal) == 0x0001F0, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_PhysMat) == 0x000208, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_HitActor) == 0x000210, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_HitComponent) == 0x000218, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_HitBoneName) == 0x000220, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_BoneName) == 0x000228, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_HitItem) == 0x000230, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_ElementIndex) == 0x000234, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_FaceIndex) == 0x000238, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_TraceStart) == 0x000240, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_BreakHitResult_TraceEnd) == 0x000258, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000270, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VerraForge_C_UX_Icon, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000288, "Member 'BP_VerraForge_C_UX_Icon::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

}

