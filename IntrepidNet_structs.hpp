#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IntrepidNet

#include "Basic.hpp"

#include "IntrepidNetCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "NetCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum IntrepidNet.EInterServerReplicationState
// NumValues: 0x0008
enum class EInterServerReplicationState : uint8
{
	None                                     = 0,
	PendingCreation                          = 1,
	Created                                  = 2,
	PendingDestroy                           = 3,
	PendingPromotion                         = 4,
	Promoting                                = 5,
	cCount                                   = 6,
	EInterServerReplicationState_MAX         = 7,
};

// Enum IntrepidNet.FIntrepidNetDebugActorDataType
// NumValues: 0x0004
enum class EFIntrepidNetDebugActorDataType : uint8
{
	OTHER                                    = 0,
	PLAYER                                   = 1,
	NPC                                      = 2,
	FIntrepidNetDebugActorDataType_MAX       = 3,
};

// Enum IntrepidNet.EClassRepPolicy
// NumValues: 0x000A
enum class EClassRepPolicy : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	RelevantOwnerConnection                  = 2,
	UseOwnerRelevancy                        = 3,
	Spatialize_Static                        = 4,
	Spatialize_Dynamic                       = 5,
	Spatialize_Dormancy                      = 6,
	Spatialize_LargeCullDistance             = 7,
	Spatialize_VariableCullDistance          = 8,
	EClassRepPolicy_MAX                      = 9,
};

// Enum IntrepidNet.EHandlerRegistrationPacketType
// NumValues: 0x0004
enum class EHandlerRegistrationPacketType : uint8
{
	Unregister                               = 0,
	Register                                 = 1,
	Update                                   = 2,
	EHandlerRegistrationPacketType_MAX       = 3,
};

// ScriptStruct IntrepidNet.IntrepidNetDebugActorData
// 0x0034 (0x0040 - 0x000C)
struct FIntrepidNetDebugActorData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationYaw;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeIndex;                                         // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFIntrepidNetDebugActorDataType               Type;                                              // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntrepidNetDebugActorData) == 0x000008, "Wrong alignment on FIntrepidNetDebugActorData");
static_assert(sizeof(FIntrepidNetDebugActorData) == 0x000040, "Wrong size on FIntrepidNetDebugActorData");
static_assert(offsetof(FIntrepidNetDebugActorData, Name) == 0x000010, "Member 'FIntrepidNetDebugActorData::Name' has a wrong offset!");
static_assert(offsetof(FIntrepidNetDebugActorData, Location) == 0x000020, "Member 'FIntrepidNetDebugActorData::Location' has a wrong offset!");
static_assert(offsetof(FIntrepidNetDebugActorData, RotationYaw) == 0x000030, "Member 'FIntrepidNetDebugActorData::RotationYaw' has a wrong offset!");
static_assert(offsetof(FIntrepidNetDebugActorData, NodeIndex) == 0x000034, "Member 'FIntrepidNetDebugActorData::NodeIndex' has a wrong offset!");
static_assert(offsetof(FIntrepidNetDebugActorData, Type) == 0x000038, "Member 'FIntrepidNetDebugActorData::Type' has a wrong offset!");

// ScriptStruct IntrepidNet.IntrepidNetDebugNodeFastArray
// 0x0010 (0x0118 - 0x0108)
struct FIntrepidNetDebugNodeFastArray final : public FFastArraySerializer
{
public:
	TArray<struct FIntrepidNetDebugActorData>     Items;                                             // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidNetDebugNodeFastArray) == 0x000008, "Wrong alignment on FIntrepidNetDebugNodeFastArray");
static_assert(sizeof(FIntrepidNetDebugNodeFastArray) == 0x000118, "Wrong size on FIntrepidNetDebugNodeFastArray");
static_assert(offsetof(FIntrepidNetDebugNodeFastArray, Items) == 0x000108, "Member 'FIntrepidNetDebugNodeFastArray::Items' has a wrong offset!");

// ScriptStruct IntrepidNet.IntrepidNetDebugRealmData
// 0x0048 (0x0048 - 0x0000)
struct FIntrepidNetDebugRealmData final
{
public:
	TArray<struct FIntrepidNetDebugServerData>    Servers;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBox                                   RealmBounds;                                       // 0x0010(0x0038)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidNetDebugRealmData) == 0x000008, "Wrong alignment on FIntrepidNetDebugRealmData");
static_assert(sizeof(FIntrepidNetDebugRealmData) == 0x000048, "Wrong size on FIntrepidNetDebugRealmData");
static_assert(offsetof(FIntrepidNetDebugRealmData, Servers) == 0x000000, "Member 'FIntrepidNetDebugRealmData::Servers' has a wrong offset!");
static_assert(offsetof(FIntrepidNetDebugRealmData, RealmBounds) == 0x000010, "Member 'FIntrepidNetDebugRealmData::RealmBounds' has a wrong offset!");

// ScriptStruct IntrepidNet.IntrepidNetTransferData
// 0x0030 (0x0030 - 0x0000)
struct FIntrepidNetTransferData final
{
public:
	struct FTimespan                              LastTransferTime;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              TotalTime;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TotalAvgTimeMs;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              MaxTime;                                           // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              MinTime;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidNetTransferData) == 0x000008, "Wrong alignment on FIntrepidNetTransferData");
static_assert(sizeof(FIntrepidNetTransferData) == 0x000030, "Wrong size on FIntrepidNetTransferData");
static_assert(offsetof(FIntrepidNetTransferData, LastTransferTime) == 0x000000, "Member 'FIntrepidNetTransferData::LastTransferTime' has a wrong offset!");
static_assert(offsetof(FIntrepidNetTransferData, Count) == 0x000008, "Member 'FIntrepidNetTransferData::Count' has a wrong offset!");
static_assert(offsetof(FIntrepidNetTransferData, TotalTime) == 0x000010, "Member 'FIntrepidNetTransferData::TotalTime' has a wrong offset!");
static_assert(offsetof(FIntrepidNetTransferData, TotalAvgTimeMs) == 0x000018, "Member 'FIntrepidNetTransferData::TotalAvgTimeMs' has a wrong offset!");
static_assert(offsetof(FIntrepidNetTransferData, MaxTime) == 0x000020, "Member 'FIntrepidNetTransferData::MaxTime' has a wrong offset!");
static_assert(offsetof(FIntrepidNetTransferData, MinTime) == 0x000028, "Member 'FIntrepidNetTransferData::MinTime' has a wrong offset!");

// ScriptStruct IntrepidNet.IntrepidNetClientServerDebugData
// 0x0050 (0x0050 - 0x0000)
struct FIntrepidNetClientServerDebugData final
{
public:
	int32                                         ClientsServerId;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntrepidNetDebugRealmData             RealmData;                                         // 0x0008(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidNetClientServerDebugData) == 0x000008, "Wrong alignment on FIntrepidNetClientServerDebugData");
static_assert(sizeof(FIntrepidNetClientServerDebugData) == 0x000050, "Wrong size on FIntrepidNetClientServerDebugData");
static_assert(offsetof(FIntrepidNetClientServerDebugData, ClientsServerId) == 0x000000, "Member 'FIntrepidNetClientServerDebugData::ClientsServerId' has a wrong offset!");
static_assert(offsetof(FIntrepidNetClientServerDebugData, RealmData) == 0x000008, "Member 'FIntrepidNetClientServerDebugData::RealmData' has a wrong offset!");

// ScriptStruct IntrepidNet.IntrepidNetInterServerManagerTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FIntrepidNetInterServerManagerTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntrepidNetInterServerManagerTickFunction) == 0x000008, "Wrong alignment on FIntrepidNetInterServerManagerTickFunction");
static_assert(sizeof(FIntrepidNetInterServerManagerTickFunction) == 0x000030, "Wrong size on FIntrepidNetInterServerManagerTickFunction");

// ScriptStruct IntrepidNet.IntrepidNetReplicationGraphGlobal
// 0x0018 (0x0018 - 0x0000)
struct FIntrepidNetReplicationGraphGlobal final
{
public:
	class UReplicationGraphNode_GridSpatialization2D* SpatialGridNode;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_AlwaysRelevant*   AlwaysRelevantNode;                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIntrepidNetReplicationGraphNode_LargeCullDistance* LargeCullDistanceActors;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidNetReplicationGraphGlobal) == 0x000008, "Wrong alignment on FIntrepidNetReplicationGraphGlobal");
static_assert(sizeof(FIntrepidNetReplicationGraphGlobal) == 0x000018, "Wrong size on FIntrepidNetReplicationGraphGlobal");
static_assert(offsetof(FIntrepidNetReplicationGraphGlobal, SpatialGridNode) == 0x000000, "Member 'FIntrepidNetReplicationGraphGlobal::SpatialGridNode' has a wrong offset!");
static_assert(offsetof(FIntrepidNetReplicationGraphGlobal, AlwaysRelevantNode) == 0x000008, "Member 'FIntrepidNetReplicationGraphGlobal::AlwaysRelevantNode' has a wrong offset!");
static_assert(offsetof(FIntrepidNetReplicationGraphGlobal, LargeCullDistanceActors) == 0x000010, "Member 'FIntrepidNetReplicationGraphGlobal::LargeCullDistanceActors' has a wrong offset!");

// ScriptStruct IntrepidNet.IntrepidNetConfigUnreal
// 0x0070 (0x0070 - 0x0000)
struct FIntrepidNetConfigUnreal final
{
public:
	class FString                                 WorldName;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldOrigin;                                       // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldSize;                                         // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridNodesX;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridNodesY;                                        // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PlayerStartLocations;                              // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsVariableDensity;                                // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPartitionTreeSubdivision>      PartitionTree;                                     // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidNetConfigUnreal) == 0x000008, "Wrong alignment on FIntrepidNetConfigUnreal");
static_assert(sizeof(FIntrepidNetConfigUnreal) == 0x000070, "Wrong size on FIntrepidNetConfigUnreal");
static_assert(offsetof(FIntrepidNetConfigUnreal, WorldName) == 0x000000, "Member 'FIntrepidNetConfigUnreal::WorldName' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, WorldOrigin) == 0x000010, "Member 'FIntrepidNetConfigUnreal::WorldOrigin' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, WorldSize) == 0x000028, "Member 'FIntrepidNetConfigUnreal::WorldSize' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, GridNodesX) == 0x000040, "Member 'FIntrepidNetConfigUnreal::GridNodesX' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, GridNodesY) == 0x000044, "Member 'FIntrepidNetConfigUnreal::GridNodesY' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, PlayerStartLocations) == 0x000048, "Member 'FIntrepidNetConfigUnreal::PlayerStartLocations' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, bIsVariableDensity) == 0x000058, "Member 'FIntrepidNetConfigUnreal::bIsVariableDensity' has a wrong offset!");
static_assert(offsetof(FIntrepidNetConfigUnreal, PartitionTree) == 0x000060, "Member 'FIntrepidNetConfigUnreal::PartitionTree' has a wrong offset!");

}

