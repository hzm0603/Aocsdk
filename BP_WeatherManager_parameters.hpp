#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Struct_BiomeClimate_structs.hpp"
#include "E_Weather_HumidityCondition_structs.hpp"
#include "E_Weather_FogCondition_structs.hpp"
#include "E_Weather_WindCondition_structs.hpp"
#include "E_Weather_SnowCondition_structs.hpp"
#include "E_Weather_RainCondition_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "STRUCT_SingularClimateData_structs.hpp"


namespace SDK::Params
{

// Function BP_WeatherManager.BP_WeatherManager_C.Absolute Humidity
// 0x00A0 (0x00A0 - 0x0000)
struct BP_WeatherManager_C_Absolute_Humidity final
{
public:
	double                                        Normalized_Temp_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dew_Pont;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Exp_ReturnValue;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Exp_ReturnValue_1;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Absolute_Humidity) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Absolute_Humidity");
static_assert(sizeof(BP_WeatherManager_C_Absolute_Humidity) == 0x0000A0, "Wrong size on BP_WeatherManager_C_Absolute_Humidity");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, Normalized_Temp_0) == 0x000000, "Member 'BP_WeatherManager_C_Absolute_Humidity::Normalized_Temp_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, Humidity) == 0x000008, "Member 'BP_WeatherManager_C_Absolute_Humidity::Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, Dew_Pont) == 0x000010, "Member 'BP_WeatherManager_C_Absolute_Humidity::Dew_Pont' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000048, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000058, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000070, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Exp_ReturnValue) == 0x000078, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Exp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Exp_ReturnValue_1) == 0x000080, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Exp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000088, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000090, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Absolute_Humidity, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000098, "Member 'BP_WeatherManager_C_Absolute_Humidity::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Assign Fog Condition
// 0x0028 (0x0028 - 0x0000)
struct BP_WeatherManager_C_Assign_Fog_Condition final
{
public:
	double                                        Fog_in;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_FogCondition                        FogCondition_0;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fog;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Assign_Fog_Condition) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Assign_Fog_Condition");
static_assert(sizeof(BP_WeatherManager_C_Assign_Fog_Condition) == 0x000028, "Wrong size on BP_WeatherManager_C_Assign_Fog_Condition");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, Fog_in) == 0x000000, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::Fog_in' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, FogCondition_0) == 0x000008, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::FogCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, Fog) == 0x000010, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::Fog' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000019, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x00001A, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00001B, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x00001D, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00001E, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_BooleanAND_ReturnValue_1) == 0x00001F, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4) == 0x000020, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000021, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Fog_Condition, CallFunc_BooleanAND_ReturnValue_2) == 0x000022, "Member 'BP_WeatherManager_C_Assign_Fog_Condition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Assign Humidity Condition
// 0x0028 (0x0028 - 0x0000)
struct BP_WeatherManager_C_Assign_Humidity_Condition final
{
public:
	double                                        Humidity;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_HumidityCondition                   HumidityCondition_0;                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Hum;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4;  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Assign_Humidity_Condition) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Assign_Humidity_Condition");
static_assert(sizeof(BP_WeatherManager_C_Assign_Humidity_Condition) == 0x000028, "Wrong size on BP_WeatherManager_C_Assign_Humidity_Condition");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, Humidity) == 0x000000, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, HumidityCondition_0) == 0x000008, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::HumidityCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, Hum) == 0x000010, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::Hum' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000019, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x00001A, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00001B, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x00001D, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00001E, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_BooleanAND_ReturnValue_1) == 0x00001F, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4) == 0x000020, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000021, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Humidity_Condition, CallFunc_BooleanAND_ReturnValue_2) == 0x000022, "Member 'BP_WeatherManager_C_Assign_Humidity_Condition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Assign Precipitation Condition
// 0x0048 (0x0048 - 0x0000)
struct BP_WeatherManager_C_Assign_Precipitation_Condition final
{
public:
	double                                        Precipitation;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_RainCondition                       RainCondition_0;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_SnowCondition                       SnowCondition_0;                                   // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Precip;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4;  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_5;  // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_6;  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_7;  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_8;  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_9;  // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_3;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_10; // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_11; // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Assign_Precipitation_Condition) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Assign_Precipitation_Condition");
static_assert(sizeof(BP_WeatherManager_C_Assign_Precipitation_Condition) == 0x000048, "Wrong size on BP_WeatherManager_C_Assign_Precipitation_Condition");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, Precipitation) == 0x000000, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::Precipitation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, Temperature) == 0x000008, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::Temperature' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, RainCondition_0) == 0x000010, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::RainCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, SnowCondition_0) == 0x000011, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::SnowCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, Precip) == 0x000018, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::Precip' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000021, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_Not_PreBool_ReturnValue_1) == 0x000023, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_1) == 0x000025, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_2) == 0x000026, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_3) == 0x000027, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000029, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00002A, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00002B, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanOR_ReturnValue) == 0x00002C, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x00002D, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_4) == 0x00002E, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x00002F, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4) == 0x000030, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000031, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_5) == 0x000032, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000033, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanOR_ReturnValue_1) == 0x000034, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_6) == 0x000035, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_5) == 0x000036, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000037, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_6) == 0x000038, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_7) == 0x000039, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_7) == 0x00003A, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00003B, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_8) == 0x00003C, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_8) == 0x00003D, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x00003E, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_9) == 0x00003F, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_3) == 0x000040, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_10) == 0x000041, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_9) == 0x000042, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_BooleanAND_ReturnValue_10) == 0x000043, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Precipitation_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_11) == 0x000044, "Member 'BP_WeatherManager_C_Assign_Precipitation_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_11' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Assign Weather Conditions
// 0x0038 (0x0038 - 0x0000)
struct BP_WeatherManager_C_Assign_Weather_Conditions final
{
public:
	double                                        Temperature;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Precipitation;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog;                                               // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Speed;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_RainCondition                       RainCondition_0;                                   // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_SnowCondition                       SnowCondition_0;                                   // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_WindCondition                       WindCondition_0;                                   // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_HumidityCondition                   HumidityCondition_0;                               // 0x002B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_FogCondition                        FogCondition_0;                                    // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_RainCondition                       CallFunc_Assign_Precipitation_Condition_RainCondition; // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_SnowCondition                       CallFunc_Assign_Precipitation_Condition_SnowCondition; // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_WindCondition                       CallFunc_Assign_Wind_Condition_WindCondition;      // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_FogCondition                        CallFunc_Assign_Fog_Condition_FogCondition;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_HumidityCondition                   CallFunc_Assign_Humidity_Condition_HumidityCondition; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Assign_Weather_Conditions) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Assign_Weather_Conditions");
static_assert(sizeof(BP_WeatherManager_C_Assign_Weather_Conditions) == 0x000038, "Wrong size on BP_WeatherManager_C_Assign_Weather_Conditions");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, Temperature) == 0x000000, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::Temperature' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, Precipitation) == 0x000008, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::Precipitation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, Humidity) == 0x000010, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, Fog) == 0x000018, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::Fog' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, Wind_Speed) == 0x000020, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::Wind_Speed' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, RainCondition_0) == 0x000028, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::RainCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, SnowCondition_0) == 0x000029, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::SnowCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, WindCondition_0) == 0x00002A, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::WindCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, HumidityCondition_0) == 0x00002B, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::HumidityCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, FogCondition_0) == 0x00002C, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::FogCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, CallFunc_Assign_Precipitation_Condition_RainCondition) == 0x00002D, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::CallFunc_Assign_Precipitation_Condition_RainCondition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, CallFunc_Assign_Precipitation_Condition_SnowCondition) == 0x00002E, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::CallFunc_Assign_Precipitation_Condition_SnowCondition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, CallFunc_Assign_Wind_Condition_WindCondition) == 0x00002F, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::CallFunc_Assign_Wind_Condition_WindCondition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, CallFunc_Assign_Fog_Condition_FogCondition) == 0x000030, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::CallFunc_Assign_Fog_Condition_FogCondition' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Weather_Conditions, CallFunc_Assign_Humidity_Condition_HumidityCondition) == 0x000031, "Member 'BP_WeatherManager_C_Assign_Weather_Conditions::CallFunc_Assign_Humidity_Condition_HumidityCondition' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Assign Wind Condition
// 0x0028 (0x0028 - 0x0000)
struct BP_WeatherManager_C_Assign_Wind_Condition final
{
public:
	double                                        WindSpeed;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Weather_WindCondition                       WindCondition_0;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4;  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Assign_Wind_Condition) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Assign_Wind_Condition");
static_assert(sizeof(BP_WeatherManager_C_Assign_Wind_Condition) == 0x000028, "Wrong size on BP_WeatherManager_C_Assign_Wind_Condition");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, WindSpeed) == 0x000000, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::WindSpeed' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, WindCondition_0) == 0x000008, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::WindCondition_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, Speed) == 0x000010, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::Speed' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000019, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x00001A, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x00001B, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x00001D, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x00001E, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_BooleanAND_ReturnValue_1) == 0x00001F, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000020, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4) == 0x000021, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Assign_Wind_Condition, CallFunc_BooleanAND_ReturnValue_2) == 0x000022, "Member 'BP_WeatherManager_C_Assign_Wind_Condition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Dew Point
// 0x0050 (0x0050 - 0x0000)
struct BP_WeatherManager_C_Calculate_Dew_Point final
{
public:
	double                                        Normalized_Temp_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Humidity;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wetness_0;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NormalizedDewPoint;                                // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Dew_Point) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Dew_Point");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Dew_Point) == 0x000050, "Wrong size on BP_WeatherManager_C_Calculate_Dew_Point");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, Normalized_Temp_0) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::Normalized_Temp_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, Current_Humidity) == 0x000008, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::Current_Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, Wetness_0) == 0x000010, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::Wetness_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, NormalizedDewPoint) == 0x000018, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::NormalizedDewPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Dew_Point, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'BP_WeatherManager_C_Calculate_Dew_Point::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Humidity
// 0x0068 (0x0068 - 0x0000)
struct BP_WeatherManager_C_Calculate_Humidity final
{
public:
	double                                        Humidity;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Time_of_Year_in_hours;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wetness_0;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temp_0;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RetHumidity_0;                                     // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Random_Weather_Flucuations_Post_Noise;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Humidity) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Humidity");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Humidity) == 0x000068, "Wrong size on BP_WeatherManager_C_Calculate_Humidity");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, Humidity) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Humidity::Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, In_Time_of_Year_in_hours) == 0x000008, "Member 'BP_WeatherManager_C_Calculate_Humidity::In_Time_of_Year_in_hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, Wetness_0) == 0x000010, "Member 'BP_WeatherManager_C_Calculate_Humidity::Wetness_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, Normalized_Temp_0) == 0x000018, "Member 'BP_WeatherManager_C_Calculate_Humidity::Normalized_Temp_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, RetHumidity_0) == 0x000020, "Member 'BP_WeatherManager_C_Calculate_Humidity::RetHumidity_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_Calculate_Humidity::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_Random_Weather_Flucuations_Post_Noise) == 0x000040, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_Random_Weather_Flucuations_Post_Noise' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Humidity, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'BP_WeatherManager_C_Calculate_Humidity::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Precipitation
// 0x0048 (0x0048 - 0x0000)
struct BP_WeatherManager_C_Calculate_Precipitation final
{
public:
	EBiomeType                                    Current_Biome;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Chance_Of_Precipitation;                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_TOY_in_hours;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Precip_Amount;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Amount_Of_Precipitation_0;                         // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Random_Weather_Flucuations_Post_Noise;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetBiomeNormalizedPrecipAmount_Normalized_Precip_Amount_For_Biome; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Precipitation) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Precipitation");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Precipitation) == 0x000048, "Wrong size on BP_WeatherManager_C_Calculate_Precipitation");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, Current_Biome) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Precipitation::Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, Chance_Of_Precipitation) == 0x000008, "Member 'BP_WeatherManager_C_Calculate_Precipitation::Chance_Of_Precipitation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, In_TOY_in_hours) == 0x000010, "Member 'BP_WeatherManager_C_Calculate_Precipitation::In_TOY_in_hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, In_Precip_Amount) == 0x000018, "Member 'BP_WeatherManager_C_Calculate_Precipitation::In_Precip_Amount' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, Amount_Of_Precipitation_0) == 0x000020, "Member 'BP_WeatherManager_C_Calculate_Precipitation::Amount_Of_Precipitation_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, CallFunc_Random_Weather_Flucuations_Post_Noise) == 0x000028, "Member 'BP_WeatherManager_C_Calculate_Precipitation::CallFunc_Random_Weather_Flucuations_Post_Noise' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, CallFunc_GetBiomeNormalizedPrecipAmount_Normalized_Precip_Amount_For_Biome) == 0x000030, "Member 'BP_WeatherManager_C_Calculate_Precipitation::CallFunc_GetBiomeNormalizedPrecipAmount_Normalized_Precip_Amount_For_Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_Calculate_Precipitation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Precipitation, CallFunc_FMin_ReturnValue) == 0x000040, "Member 'BP_WeatherManager_C_Calculate_Precipitation::CallFunc_FMin_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Saturation Point
// 0x0008 (0x0008 - 0x0000)
struct BP_WeatherManager_C_Calculate_Saturation_Point final
{
public:
	double                                        Temp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Saturation_Point) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Saturation_Point");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Saturation_Point) == 0x000008, "Wrong size on BP_WeatherManager_C_Calculate_Saturation_Point");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Saturation_Point, Temp) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Saturation_Point::Temp' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Temperature
// 0x0118 (0x0118 - 0x0000)
struct BP_WeatherManager_C_Calculate_Temperature final
{
public:
	double                                        Time_Of_Day_2400;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Current_Biome;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Degrees_Low;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Degrees_High;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Altitude;                               // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Time_of_Year_in_hours;                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AmountPrecip;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaT;                                            // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Temp;                                      // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Modified_Normalized_Temp;                          // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NonModified_Normalized_Temp;                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LocalClimate;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WetnessRet;                                        // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSec;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Temp_byte_Variable;                                // 0x0078(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Map_Find_Value;                           // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Map_Find_Value_1;                         // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GaussianCurve_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Wetness_WetnessRet;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Random_Weather_Flucuations_Post_Noise;    // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Temperature) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Temperature");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Temperature) == 0x000118, "Wrong size on BP_WeatherManager_C_Calculate_Temperature");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Time_Of_Day_2400) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Temperature::Time_Of_Day_2400' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Current_Biome) == 0x000008, "Member 'BP_WeatherManager_C_Calculate_Temperature::Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Degrees_Low) == 0x000010, "Member 'BP_WeatherManager_C_Calculate_Temperature::Degrees_Low' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Degrees_High) == 0x000018, "Member 'BP_WeatherManager_C_Calculate_Temperature::Degrees_High' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Normalized_Altitude) == 0x000020, "Member 'BP_WeatherManager_C_Calculate_Temperature::Normalized_Altitude' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, In_Time_of_Year_in_hours) == 0x000028, "Member 'BP_WeatherManager_C_Calculate_Temperature::In_Time_of_Year_in_hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, AmountPrecip) == 0x000030, "Member 'BP_WeatherManager_C_Calculate_Temperature::AmountPrecip' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, DeltaT) == 0x000038, "Member 'BP_WeatherManager_C_Calculate_Temperature::DeltaT' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Current_Temp) == 0x000040, "Member 'BP_WeatherManager_C_Calculate_Temperature::Current_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Modified_Normalized_Temp) == 0x000048, "Member 'BP_WeatherManager_C_Calculate_Temperature::Modified_Normalized_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, NonModified_Normalized_Temp) == 0x000050, "Member 'BP_WeatherManager_C_Calculate_Temperature::NonModified_Normalized_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, LocalClimate) == 0x000058, "Member 'BP_WeatherManager_C_Calculate_Temperature::LocalClimate' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, WetnessRet) == 0x000068, "Member 'BP_WeatherManager_C_Calculate_Temperature::WetnessRet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, DeltaSec) == 0x000070, "Member 'BP_WeatherManager_C_Calculate_Temperature::DeltaSec' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, Temp_byte_Variable) == 0x000078, "Member 'BP_WeatherManager_C_Calculate_Temperature::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Map_Find_Value) == 0x000090, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Map_Find_ReturnValue) == 0x0000A0, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Map_Find_Value_1) == 0x0000A8, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Map_Find_ReturnValue_1) == 0x0000B8, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_GaussianCurve_ReturnValue) == 0x0000C0, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_GaussianCurve_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Lerp_ReturnValue) == 0x0000C8, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000D0, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Calculate_Wetness_WetnessRet) == 0x0000E0, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Calculate_Wetness_WetnessRet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x0000F0, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000F8, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Random_Weather_Flucuations_Post_Noise) == 0x000100, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Random_Weather_Flucuations_Post_Noise' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000108, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Temperature, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000110, "Member 'BP_WeatherManager_C_Calculate_Temperature::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Weather
// 0x0218 (0x0218 - 0x0000)
struct BP_WeatherManager_C_Calculate_Weather final
{
public:
	struct FSingleDayClimate                      In_Climate;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        Time_Of_Day_2400;                                  // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Time_of_Year_in_hours;                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Current_Biome;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideTemp;                                     // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverridePrecip;                                   // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideHumidity;                                 // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideFog;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Local_FogIn;                                       // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Seconds;                                     // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temp_Return;                            // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Amount_of_Precip_Return;                           // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity_Return;                                   // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_DewPoint_Return;                        // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wetness_Return;                                    // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Local_Fog_Return;                                  // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Lerp_Return;                                 // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaT;                                            // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_increasing;                                     // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LocalWetness;                                      // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewLocalVar;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Dew_Point;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Lerp;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Local_Fog;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_DewPoint;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DewPoint;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Amount_of_Precip;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temp___Local;                           // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Temp;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Biome;                                             // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TOY_In_Hours;                                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TOD_24Hrs;                                         // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSingleDayClimate                      Climate;                                           // 0x0108(0x0028)(Edit, BlueprintVisible)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Absolute_Humidity_Dew_Pont;               // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Dew_Point_NormalizedDewPoint;   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateCloudLerp_Cloud_Lerp;            // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Humidity_RetHumidity;           // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Humidity_ReturnValue;           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Wetness_WetnessRet;             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Precipitation_Amount_Of_Precipitation; // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Temperature_Current_Temp;       // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Temperature_Modified_Normalized_Temp; // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Temperature_NonModified_Normalized_Temp; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Humidity_Humidity_ImplicitCast; // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Humidity_ImplicitCast;          // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Amount_of_Precip_ImplicitCast;  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Precipitation_In_Precip_Amount_ImplicitCast; // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Precipitation_Chance_Of_Precipitation_ImplicitCast; // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Temperature_Degrees_High_ImplicitCast; // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Normalized_Temp___Local_ImplicitCast; // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Calculate_Temperature_Degrees_Low_ImplicitCast; // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Weather) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Weather");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Weather) == 0x000218, "Wrong size on BP_WeatherManager_C_Calculate_Weather");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, In_Climate) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Weather::In_Climate' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Time_Of_Day_2400) == 0x000028, "Member 'BP_WeatherManager_C_Calculate_Weather::Time_Of_Day_2400' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, In_Time_of_Year_in_hours) == 0x000030, "Member 'BP_WeatherManager_C_Calculate_Weather::In_Time_of_Year_in_hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Current_Biome) == 0x000038, "Member 'BP_WeatherManager_C_Calculate_Weather::Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, bOverrideTemp) == 0x000039, "Member 'BP_WeatherManager_C_Calculate_Weather::bOverrideTemp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, bOverridePrecip) == 0x00003A, "Member 'BP_WeatherManager_C_Calculate_Weather::bOverridePrecip' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, bOverrideHumidity) == 0x00003B, "Member 'BP_WeatherManager_C_Calculate_Weather::bOverrideHumidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, bOverrideFog) == 0x00003C, "Member 'BP_WeatherManager_C_Calculate_Weather::bOverrideFog' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Local_FogIn) == 0x000040, "Member 'BP_WeatherManager_C_Calculate_Weather::Local_FogIn' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Delta_Seconds) == 0x000048, "Member 'BP_WeatherManager_C_Calculate_Weather::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Normalized_Temp_Return) == 0x000050, "Member 'BP_WeatherManager_C_Calculate_Weather::Normalized_Temp_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Amount_of_Precip_Return) == 0x000058, "Member 'BP_WeatherManager_C_Calculate_Weather::Amount_of_Precip_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Humidity_Return) == 0x000060, "Member 'BP_WeatherManager_C_Calculate_Weather::Humidity_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Normalized_DewPoint_Return) == 0x000068, "Member 'BP_WeatherManager_C_Calculate_Weather::Normalized_DewPoint_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Wetness_Return) == 0x000070, "Member 'BP_WeatherManager_C_Calculate_Weather::Wetness_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Local_Fog_Return) == 0x000078, "Member 'BP_WeatherManager_C_Calculate_Weather::Local_Fog_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Cloud_Lerp_Return) == 0x000080, "Member 'BP_WeatherManager_C_Calculate_Weather::Cloud_Lerp_Return' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, DeltaT) == 0x000088, "Member 'BP_WeatherManager_C_Calculate_Weather::DeltaT' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Is_increasing) == 0x000090, "Member 'BP_WeatherManager_C_Calculate_Weather::Is_increasing' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, LocalWetness) == 0x000098, "Member 'BP_WeatherManager_C_Calculate_Weather::LocalWetness' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, NewLocalVar) == 0x0000A0, "Member 'BP_WeatherManager_C_Calculate_Weather::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Normalized_Dew_Point) == 0x0000A8, "Member 'BP_WeatherManager_C_Calculate_Weather::Normalized_Dew_Point' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Cloud_Lerp) == 0x0000B0, "Member 'BP_WeatherManager_C_Calculate_Weather::Cloud_Lerp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Local_Fog) == 0x0000B8, "Member 'BP_WeatherManager_C_Calculate_Weather::Local_Fog' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Normalized_DewPoint) == 0x0000C0, "Member 'BP_WeatherManager_C_Calculate_Weather::Normalized_DewPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, DewPoint) == 0x0000C8, "Member 'BP_WeatherManager_C_Calculate_Weather::DewPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Humidity) == 0x0000D0, "Member 'BP_WeatherManager_C_Calculate_Weather::Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Amount_of_Precip) == 0x0000D8, "Member 'BP_WeatherManager_C_Calculate_Weather::Amount_of_Precip' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Normalized_Temp___Local) == 0x0000E0, "Member 'BP_WeatherManager_C_Calculate_Weather::Normalized_Temp___Local' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Current_Temp) == 0x0000E8, "Member 'BP_WeatherManager_C_Calculate_Weather::Current_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Biome) == 0x0000F0, "Member 'BP_WeatherManager_C_Calculate_Weather::Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, TOY_In_Hours) == 0x0000F8, "Member 'BP_WeatherManager_C_Calculate_Weather::TOY_In_Hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, TOD_24Hrs) == 0x000100, "Member 'BP_WeatherManager_C_Calculate_Weather::TOD_24Hrs' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, Climate) == 0x000108, "Member 'BP_WeatherManager_C_Calculate_Weather::Climate' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000130, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Absolute_Humidity_Dew_Pont) == 0x000138, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Absolute_Humidity_Dew_Pont' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Lerp_ReturnValue) == 0x000140, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Lerp_ReturnValue_1) == 0x000148, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000150, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000158, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000160, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_BooleanOR_ReturnValue) == 0x000161, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000168, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_FClamp_ReturnValue) == 0x000170, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000178, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000180, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Dew_Point_NormalizedDewPoint) == 0x000188, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Dew_Point_NormalizedDewPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000190, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_CalculateCloudLerp_Cloud_Lerp) == 0x000198, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_CalculateCloudLerp_Cloud_Lerp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Humidity_RetHumidity) == 0x0001A0, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Humidity_RetHumidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Humidity_ReturnValue) == 0x0001A8, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Humidity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Wetness_WetnessRet) == 0x0001B0, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Wetness_WetnessRet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Precipitation_Amount_Of_Precipitation) == 0x0001B8, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Precipitation_Amount_Of_Precipitation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Temperature_Current_Temp) == 0x0001C0, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Temperature_Current_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Temperature_Modified_Normalized_Temp) == 0x0001C8, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Temperature_Modified_Normalized_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Temperature_NonModified_Normalized_Temp) == 0x0001D0, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Temperature_NonModified_Normalized_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Humidity_Humidity_ImplicitCast) == 0x0001D8, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Humidity_Humidity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, K2Node_VariableSet_Humidity_ImplicitCast) == 0x0001E0, "Member 'BP_WeatherManager_C_Calculate_Weather::K2Node_VariableSet_Humidity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, K2Node_VariableSet_Amount_of_Precip_ImplicitCast) == 0x0001E8, "Member 'BP_WeatherManager_C_Calculate_Weather::K2Node_VariableSet_Amount_of_Precip_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Precipitation_In_Precip_Amount_ImplicitCast) == 0x0001F0, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Precipitation_In_Precip_Amount_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Precipitation_Chance_Of_Precipitation_ImplicitCast) == 0x0001F8, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Precipitation_Chance_Of_Precipitation_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Temperature_Degrees_High_ImplicitCast) == 0x000200, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Temperature_Degrees_High_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, K2Node_VariableSet_Normalized_Temp___Local_ImplicitCast) == 0x000208, "Member 'BP_WeatherManager_C_Calculate_Weather::K2Node_VariableSet_Normalized_Temp___Local_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Weather, CallFunc_Calculate_Temperature_Degrees_Low_ImplicitCast) == 0x000210, "Member 'BP_WeatherManager_C_Calculate_Weather::CallFunc_Calculate_Temperature_Degrees_Low_ImplicitCast' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Wetness
// 0x0030 (0x0030 - 0x0000)
struct BP_WeatherManager_C_Calculate_Wetness final
{
public:
	double                                        Precipitation;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temp_0;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wetness_0;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WetnessRet;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Calculate_Wetness) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Calculate_Wetness");
static_assert(sizeof(BP_WeatherManager_C_Calculate_Wetness) == 0x000030, "Wrong size on BP_WeatherManager_C_Calculate_Wetness");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Wetness, Precipitation) == 0x000000, "Member 'BP_WeatherManager_C_Calculate_Wetness::Precipitation' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Wetness, Normalized_Temp_0) == 0x000008, "Member 'BP_WeatherManager_C_Calculate_Wetness::Normalized_Temp_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Wetness, Wetness_0) == 0x000010, "Member 'BP_WeatherManager_C_Calculate_Wetness::Wetness_0' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Wetness, WetnessRet) == 0x000018, "Member 'BP_WeatherManager_C_Calculate_Wetness::WetnessRet' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Wetness, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_Calculate_Wetness::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Calculate_Wetness, CallFunc_Lerp_ReturnValue_1) == 0x000028, "Member 'BP_WeatherManager_C_Calculate_Wetness::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.CalculateCloudLerp
// 0x0050 (0x0050 - 0x0000)
struct BP_WeatherManager_C_CalculateCloudLerp final
{
public:
	double                                        Humidity;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Precip;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sunshine_Hours;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Lerp;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_CalculateCloudLerp) == 0x000008, "Wrong alignment on BP_WeatherManager_C_CalculateCloudLerp");
static_assert(sizeof(BP_WeatherManager_C_CalculateCloudLerp) == 0x000050, "Wrong size on BP_WeatherManager_C_CalculateCloudLerp");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, Humidity) == 0x000000, "Member 'BP_WeatherManager_C_CalculateCloudLerp::Humidity' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, Normalized_Precip) == 0x000008, "Member 'BP_WeatherManager_C_CalculateCloudLerp::Normalized_Precip' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, Sunshine_Hours) == 0x000010, "Member 'BP_WeatherManager_C_CalculateCloudLerp::Sunshine_Hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, Cloud_Lerp) == 0x000018, "Member 'BP_WeatherManager_C_CalculateCloudLerp::Cloud_Lerp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_CalculateCloudLerp::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000028, "Member 'BP_WeatherManager_C_CalculateCloudLerp::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_WeatherManager_C_CalculateCloudLerp::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_WeatherManager_C_CalculateCloudLerp::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_WeatherManager_C_CalculateCloudLerp::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateCloudLerp, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'BP_WeatherManager_C_CalculateCloudLerp::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.CalculateLocalFog
// 0x0028 (0x0028 - 0x0000)
struct BP_WeatherManager_C_CalculateLocalFog final
{
public:
	double                                        Normalized_DewPoint;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Temperature;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Local_Fog;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_CalculateLocalFog) == 0x000008, "Wrong alignment on BP_WeatherManager_C_CalculateLocalFog");
static_assert(sizeof(BP_WeatherManager_C_CalculateLocalFog) == 0x000028, "Wrong size on BP_WeatherManager_C_CalculateLocalFog");
static_assert(offsetof(BP_WeatherManager_C_CalculateLocalFog, Normalized_DewPoint) == 0x000000, "Member 'BP_WeatherManager_C_CalculateLocalFog::Normalized_DewPoint' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateLocalFog, Normalized_Temperature) == 0x000008, "Member 'BP_WeatherManager_C_CalculateLocalFog::Normalized_Temperature' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateLocalFog, Local_Fog) == 0x000010, "Member 'BP_WeatherManager_C_CalculateLocalFog::Local_Fog' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateLocalFog, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_CalculateLocalFog::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateLocalFog, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_CalculateLocalFog::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.CalculateShouldLighting
// 0x0068 (0x0068 - 0x0000)
struct BP_WeatherManager_C_CalculateShouldLighting final
{
public:
	bool                                          CouldLightning;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_LightningMOD_ImplicitCast;      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_CalculateShouldLighting) == 0x000008, "Wrong alignment on BP_WeatherManager_C_CalculateShouldLighting");
static_assert(sizeof(BP_WeatherManager_C_CalculateShouldLighting) == 0x000068, "Wrong size on BP_WeatherManager_C_CalculateShouldLighting");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CouldLightning) == 0x000000, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CouldLightning' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_FClamp_ReturnValue_1) == 0x000028, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000031, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Lerp_ReturnValue_1) == 0x000038, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Lerp_A_ImplicitCast) == 0x000048, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000050, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x000058, "Member 'BP_WeatherManager_C_CalculateShouldLighting::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_CalculateShouldLighting, K2Node_VariableSet_LightningMOD_ImplicitCast) == 0x000060, "Member 'BP_WeatherManager_C_CalculateShouldLighting::K2Node_VariableSet_LightningMOD_ImplicitCast' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GaussianCurve
// 0x00D8 (0x00D8 - 0x0000)
struct BP_WeatherManager_C_GaussianCurve final
{
public:
	struct FVector2D                              Start_Peak;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GaussainCore;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Center;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WidthScale;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SigNormalized;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SigZero;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sig;                                               // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset;                                            // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Steepness;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T;                                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Peak;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Start;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GaussianCurve) == 0x000008, "Wrong alignment on BP_WeatherManager_C_GaussianCurve");
static_assert(sizeof(BP_WeatherManager_C_GaussianCurve) == 0x0000D8, "Wrong size on BP_WeatherManager_C_GaussianCurve");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Start_Peak) == 0x000000, "Member 'BP_WeatherManager_C_GaussianCurve::Start_Peak' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Time) == 0x000010, "Member 'BP_WeatherManager_C_GaussianCurve::Time' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_GaussianCurve::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, GaussainCore) == 0x000020, "Member 'BP_WeatherManager_C_GaussianCurve::GaussainCore' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Center) == 0x000028, "Member 'BP_WeatherManager_C_GaussianCurve::Center' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, WidthScale) == 0x000030, "Member 'BP_WeatherManager_C_GaussianCurve::WidthScale' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, SigNormalized) == 0x000038, "Member 'BP_WeatherManager_C_GaussianCurve::SigNormalized' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, SigZero) == 0x000040, "Member 'BP_WeatherManager_C_GaussianCurve::SigZero' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Sig) == 0x000048, "Member 'BP_WeatherManager_C_GaussianCurve::Sig' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Offset) == 0x000050, "Member 'BP_WeatherManager_C_GaussianCurve::Offset' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Steepness) == 0x000058, "Member 'BP_WeatherManager_C_GaussianCurve::Steepness' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, T) == 0x000060, "Member 'BP_WeatherManager_C_GaussianCurve::T' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Peak) == 0x000068, "Member 'BP_WeatherManager_C_GaussianCurve::Peak' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, Start) == 0x000070, "Member 'BP_WeatherManager_C_GaussianCurve::Start' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_BreakVector2D_X) == 0x000078, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_BreakVector2D_Y) == 0x000080, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_FClamp_ReturnValue_1) == 0x000090, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x0000B8, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GaussianCurve, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0000D0, "Member 'BP_WeatherManager_C_GaussianCurve::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Get 0-1 TimeOfDay Normalized
// 0x0018 (0x0018 - 0x0000)
struct BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zero_1_Time_of_Day_Normalized;                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized");
static_assert(sizeof(BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized) == 0x000018, "Wrong size on BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized");
static_assert(offsetof(BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized, Value) == 0x000000, "Member 'BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized::Value' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized, Zero_1_Time_of_Day_Normalized) == 0x000008, "Member 'BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized::Zero_1_Time_of_Day_Normalized' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_WeatherManager_C_Get_0_1_TimeOfDay_Normalized::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.GetBiomeNormalizedPrecipAmount
// 0x00F0 (0x00F0 - 0x0000)
struct BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount final
{
public:
	EBiomeType                                    Current_Biome;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        In_Precip;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Precip_Amount_For_Biome;                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_10;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_11;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_12;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_13;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_14;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_15;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_16;                             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_17;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_18;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_19;                             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_20;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_21;                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount) == 0x000008, "Wrong alignment on BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount");
static_assert(sizeof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount) == 0x0000F0, "Wrong size on BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Current_Biome) == 0x000000, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, In_Precip) == 0x000008, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::In_Precip' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Normalized_Precip_Amount_For_Biome) == 0x000010, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Normalized_Precip_Amount_For_Biome' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_byte_Variable) == 0x000018, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable) == 0x000028, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_1) == 0x000030, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_2) == 0x000038, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_3) == 0x000040, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_4) == 0x000048, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_5) == 0x000050, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_6) == 0x000058, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_7) == 0x000060, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_8) == 0x000068, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_9) == 0x000070, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_10) == 0x000078, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_11) == 0x000080, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_12) == 0x000088, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_13) == 0x000090, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_14) == 0x000098, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_15) == 0x0000A0, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_16) == 0x0000A8, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_17) == 0x0000B0, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_18) == 0x0000B8, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_19) == 0x0000C0, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_20) == 0x0000C8, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, Temp_real_Variable_21) == 0x0000D0, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::Temp_real_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, K2Node_Select_Default) == 0x0000D8, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_WeatherManager_C_GetBiomeNormalizedPrecipAmount::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Random Weather Flucuations
// 0x0050 (0x0050 - 0x0000)
struct BP_WeatherManager_C_Random_Weather_Flucuations final
{
public:
	double                                        In_Float;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Time_of_Year_in_hours;                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Post_Noise;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_MakePerlinNoiseAndRemap_ReturnValue;   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_MakePerlinNoiseAndRemap_RangeOutMax_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_MakePerlinNoiseAndRemap_Value_ImplicitCast; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Random_Weather_Flucuations) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Random_Weather_Flucuations");
static_assert(sizeof(BP_WeatherManager_C_Random_Weather_Flucuations) == 0x000050, "Wrong size on BP_WeatherManager_C_Random_Weather_Flucuations");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, In_Float) == 0x000000, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::In_Float' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, In_Time_of_Year_in_hours) == 0x000008, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::In_Time_of_Year_in_hours' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, Post_Noise) == 0x000010, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::Post_Noise' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_K2_MakePerlinNoiseAndRemap_ReturnValue) == 0x000030, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_K2_MakePerlinNoiseAndRemap_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_K2_MakePerlinNoiseAndRemap_RangeOutMax_ImplicitCast) == 0x000040, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_K2_MakePerlinNoiseAndRemap_RangeOutMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_K2_MakePerlinNoiseAndRemap_Value_ImplicitCast) == 0x000044, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_K2_MakePerlinNoiseAndRemap_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Random_Weather_Flucuations, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000048, "Member 'BP_WeatherManager_C_Random_Weather_Flucuations::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.S Curve For Temp
// 0x0128 (0x0128 - 0x0000)
struct BP_WeatherManager_C_S_Curve_For_Temp final
{
public:
	struct FVector2D                              Start_Peak;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SigNormalized;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SigZero;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sig;                                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Steepness;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T;                                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Peak;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Start;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Exp_ReturnValue;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Exp_ReturnValue_1;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Loge_ReturnValue;                         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_4;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_S_Curve_For_Temp) == 0x000008, "Wrong alignment on BP_WeatherManager_C_S_Curve_For_Temp");
static_assert(sizeof(BP_WeatherManager_C_S_Curve_For_Temp) == 0x000128, "Wrong size on BP_WeatherManager_C_S_Curve_For_Temp");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Start_Peak) == 0x000000, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Start_Peak' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Time) == 0x000010, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Time' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, ReturnValue) == 0x000018, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, SigNormalized) == 0x000020, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::SigNormalized' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, SigZero) == 0x000028, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::SigZero' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Sig) == 0x000030, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Sig' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Offset) == 0x000038, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Offset' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Steepness) == 0x000040, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Steepness' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, T) == 0x000048, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::T' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Peak) == 0x000050, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Peak' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, Start) == 0x000058, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::Start' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_BreakVector2D_X) == 0x000060, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_BreakVector2D_Y) == 0x000068, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_FClamp_ReturnValue) == 0x000070, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_FClamp_ReturnValue_1) == 0x000078, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000090, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Exp_ReturnValue) == 0x0000A0, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Exp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000B8, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000C8, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Exp_ReturnValue_1) == 0x0000D0, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Exp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x0000D8, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0000E8, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x0000F0, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_FMax_ReturnValue) == 0x0000F8, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000100, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Loge_ReturnValue) == 0x000108, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Loge_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x000110, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000118, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_S_Curve_For_Temp, CallFunc_Divide_DoubleDouble_ReturnValue_4) == 0x000120, "Member 'BP_WeatherManager_C_S_Curve_For_Temp::CallFunc_Divide_DoubleDouble_ReturnValue_4' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.Set Days Climate Data
// 0x01B0 (0x01B0 - 0x0000)
struct BP_WeatherManager_C_Set_Days_Climate_Data final
{
public:
	struct FStruct_BiomeClimate                   Biome_Data_Struct;                                 // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	double                                        Min;                                               // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max;                                               // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            StructOut;                                         // 0x0080(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LV_Night_Min_Temp;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LV_Day_Max_Temp;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LV_TempOffsetRange;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_1;              // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_2;              // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_3;              // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_4;              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_5;              // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue_6;              // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            UniqueObjectNameForCooking_STRUCT_SingularClimateData; // 0x00D8(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item_4;                         // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_5;                         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_Set_Days_Climate_Data) == 0x000008, "Wrong alignment on BP_WeatherManager_C_Set_Days_Climate_Data");
static_assert(sizeof(BP_WeatherManager_C_Set_Days_Climate_Data) == 0x0001B0, "Wrong size on BP_WeatherManager_C_Set_Days_Climate_Data");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, Biome_Data_Struct) == 0x000000, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::Biome_Data_Struct' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, Min) == 0x000070, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::Min' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, Max) == 0x000078, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::Max' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, StructOut) == 0x000080, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::StructOut' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, LV_Night_Min_Temp) == 0x0000B0, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::LV_Night_Min_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, LV_Day_Max_Temp) == 0x0000B8, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::LV_Day_Max_Temp' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, LV_TempOffsetRange) == 0x0000C0, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::LV_TempOffsetRange' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue) == 0x0000C8, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue_1) == 0x0000C9, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue_2) == 0x0000CA, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue_3) == 0x0000CB, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue_4) == 0x0000CC, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue_5) == 0x0000CD, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_IsEmpty_ReturnValue_6) == 0x0000CE, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_IsEmpty_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_BooleanOR_ReturnValue) == 0x0000CF, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_BooleanOR_ReturnValue_1) == 0x0000D0, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_BooleanOR_ReturnValue_2) == 0x0000D1, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_BooleanOR_ReturnValue_3) == 0x0000D2, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_BooleanOR_ReturnValue_4) == 0x0000D3, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_BooleanOR_ReturnValue_5) == 0x0000D4, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, UniqueObjectNameForCooking_STRUCT_SingularClimateData) == 0x0000D8, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::UniqueObjectNameForCooking_STRUCT_SingularClimateData' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_Get_Item) == 0x000108, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000110, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000118, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_Get_Item_1) == 0x000120, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_RandomFloatInRange_ReturnValue) == 0x000128, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000130, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_Get_Item_2) == 0x000134, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_Get_Item_3) == 0x000138, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Subtract_IntInt_ReturnValue) == 0x000140, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000148, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000150, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Add_IntInt_ReturnValue) == 0x000158, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000160, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000168, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_Get_Item_4) == 0x000170, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Array_Get_Item_5) == 0x000178, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000180, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000188, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000190, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000198, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0001A0, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_Set_Days_Climate_Data, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x0001A8, "Member 'BP_WeatherManager_C_Set_Days_Climate_Data::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");

// Function BP_WeatherManager.BP_WeatherManager_C.UserConstructionScript
// 0x00B0 (0x00B0 - 0x0000)
struct BP_WeatherManager_C_UserConstructionScript final
{
public:
	struct FStruct_BiomeClimate                   UniqueObjectNameForCooking_Struct_BiomeClimate;    // 0x0000(0x0070)(HasGetValueTypeHash)
	double                                        CallFunc_Set_Days_Climate_Data_Min;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Set_Days_Climate_Data_Max;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_Set_Days_Climate_Data_StructOut;          // 0x0080(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeatherManager_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_WeatherManager_C_UserConstructionScript");
static_assert(sizeof(BP_WeatherManager_C_UserConstructionScript) == 0x0000B0, "Wrong size on BP_WeatherManager_C_UserConstructionScript");
static_assert(offsetof(BP_WeatherManager_C_UserConstructionScript, UniqueObjectNameForCooking_Struct_BiomeClimate) == 0x000000, "Member 'BP_WeatherManager_C_UserConstructionScript::UniqueObjectNameForCooking_Struct_BiomeClimate' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UserConstructionScript, CallFunc_Set_Days_Climate_Data_Min) == 0x000070, "Member 'BP_WeatherManager_C_UserConstructionScript::CallFunc_Set_Days_Climate_Data_Min' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UserConstructionScript, CallFunc_Set_Days_Climate_Data_Max) == 0x000078, "Member 'BP_WeatherManager_C_UserConstructionScript::CallFunc_Set_Days_Climate_Data_Max' has a wrong offset!");
static_assert(offsetof(BP_WeatherManager_C_UserConstructionScript, CallFunc_Set_Days_Climate_Data_StructOut) == 0x000080, "Member 'BP_WeatherManager_C_UserConstructionScript::CallFunc_Set_Days_Climate_Data_StructOut' has a wrong offset!");

}

