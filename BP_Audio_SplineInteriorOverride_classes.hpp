#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_SplineInteriorOverride

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SStartStopAudioEvents_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Audio_SplineInteriorOverride.BP_Audio_SplineInteriorOverride_C
// 0x00A0 (0x03E8 - 0x0348)
class ABP_Audio_SplineInteriorOverride_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HiddenInGame;                                      // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxRangeFadeDistance;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInsideSpline;                                    // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DotValue;                                          // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AKEmitterLocation;                                 // 0x0380(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerLazy;                                         // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLazy;                                            // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialized;                                     // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverriding;                                      // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A3[0x5];                                      // 0x03A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplineCurveLocationClosestToPlayer;                // 0x03A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSStartStopAudioEvents                 Interior_Audio_Override;                           // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          InteriorOverrideStartEvent;                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          InteriorOverrideStopEvent;                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      DefaultMaterialOverride;                           // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Audio_SplineInteriorOverride(int32 EntryPoint);
	void GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation);
	void GetDistanceFromPlayerToClosestSplintPoint(double* DistanceToPlayerFromClosestSpawnPoint);
	void GetInsideSpline(bool* IsInsideSpine_, bool* IsInsideSplineChanged_);
	void GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation);
	class USplineComponent* GetSplineComponent();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Set_AK_State();
	void SetOverrideStruct();
	void Update_Emitter_Slowly();
	void UpdateEmitterLocationProxy();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Audio_SplineInteriorOverride_C">();
	}
	static class ABP_Audio_SplineInteriorOverride_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Audio_SplineInteriorOverride_C>();
	}
};
static_assert(alignof(ABP_Audio_SplineInteriorOverride_C) == 0x000008, "Wrong alignment on ABP_Audio_SplineInteriorOverride_C");
static_assert(sizeof(ABP_Audio_SplineInteriorOverride_C) == 0x0003E8, "Wrong size on ABP_Audio_SplineInteriorOverride_C");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, UberGraphFrame) == 0x000348, "Member 'ABP_Audio_SplineInteriorOverride_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, Spline) == 0x000350, "Member 'ABP_Audio_SplineInteriorOverride_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_Audio_SplineInteriorOverride_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, HiddenInGame) == 0x000360, "Member 'ABP_Audio_SplineInteriorOverride_C::HiddenInGame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, MaxRangeFadeDistance) == 0x000368, "Member 'ABP_Audio_SplineInteriorOverride_C::MaxRangeFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, IsInsideSpline) == 0x000370, "Member 'ABP_Audio_SplineInteriorOverride_C::IsInsideSpline' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, DotValue) == 0x000378, "Member 'ABP_Audio_SplineInteriorOverride_C::DotValue' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, AKEmitterLocation) == 0x000380, "Member 'ABP_Audio_SplineInteriorOverride_C::AKEmitterLocation' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, TimerLazy) == 0x000398, "Member 'ABP_Audio_SplineInteriorOverride_C::TimerLazy' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, IsLazy) == 0x0003A0, "Member 'ABP_Audio_SplineInteriorOverride_C::IsLazy' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, IsInitialized) == 0x0003A1, "Member 'ABP_Audio_SplineInteriorOverride_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, IsOverriding) == 0x0003A2, "Member 'ABP_Audio_SplineInteriorOverride_C::IsOverriding' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, SplineCurveLocationClosestToPlayer) == 0x0003A8, "Member 'ABP_Audio_SplineInteriorOverride_C::SplineCurveLocationClosestToPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, Interior_Audio_Override) == 0x0003C0, "Member 'ABP_Audio_SplineInteriorOverride_C::Interior_Audio_Override' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, InteriorOverrideStartEvent) == 0x0003D0, "Member 'ABP_Audio_SplineInteriorOverride_C::InteriorOverrideStartEvent' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, InteriorOverrideStopEvent) == 0x0003D8, "Member 'ABP_Audio_SplineInteriorOverride_C::InteriorOverrideStopEvent' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineInteriorOverride_C, DefaultMaterialOverride) == 0x0003E0, "Member 'ABP_Audio_SplineInteriorOverride_C::DefaultMaterialOverride' has a wrong offset!");

}

