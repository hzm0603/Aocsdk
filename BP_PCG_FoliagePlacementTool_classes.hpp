#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PCG_FoliagePlacementTool

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "EBiomes_structs.hpp"
#include "BP_VerraForge_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PCG_FoliagePlacementTool.BP_PCG_FoliagePlacementTool_C
// 0x0088 (0x0448 - 0x03C0)
class ABP_PCG_FoliagePlacementTool_C final : public ABP_VerraForge_C
{
public:
	class UBoxComponent*                          Box;                                               // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Active_Biome;                                      // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fill_Node;                                         // 0x03CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CE[0x2];                                      // 0x03CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Node_Spline_Point_Locations;                       // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Node_Arrive_Tangents;                              // 0x03E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Node_Leave_Tangents;                               // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Use_Interior_Points;                               // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Foliage_Assignment;                       // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFoliageType_InstancedStaticMesh*> FoliageTypes;                                    // 0x0408(0x0010)(Edit, BlueprintVisible)
	class FString                                 Primary_Landscape_Layer;                           // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Secondary_Landscape_Layer;                         // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UDataTable*                             RiverlandsFoliage_DataTable;                       // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DesertFoliage_DataTable;                           // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Cache_Landscape();
	void Choose_Foliage();
	void Find_Box_Extent_from_Spline();
	void Generate_Foliage();
	void Generate_Node_Foliage();
	void Override_Spline();
	void Randomize_Seed();
	void Set_Graph_Foliage();
	void Set_Graph_Parameters();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PCG_FoliagePlacementTool_C">();
	}
	static class ABP_PCG_FoliagePlacementTool_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PCG_FoliagePlacementTool_C>();
	}
};
static_assert(alignof(ABP_PCG_FoliagePlacementTool_C) == 0x000008, "Wrong alignment on ABP_PCG_FoliagePlacementTool_C");
static_assert(sizeof(ABP_PCG_FoliagePlacementTool_C) == 0x000448, "Wrong size on ABP_PCG_FoliagePlacementTool_C");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Box) == 0x0003C0, "Member 'ABP_PCG_FoliagePlacementTool_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Seed) == 0x0003C8, "Member 'ABP_PCG_FoliagePlacementTool_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Active_Biome) == 0x0003CC, "Member 'ABP_PCG_FoliagePlacementTool_C::Active_Biome' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Fill_Node) == 0x0003CD, "Member 'ABP_PCG_FoliagePlacementTool_C::Fill_Node' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Node_Spline_Point_Locations) == 0x0003D0, "Member 'ABP_PCG_FoliagePlacementTool_C::Node_Spline_Point_Locations' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Node_Arrive_Tangents) == 0x0003E0, "Member 'ABP_PCG_FoliagePlacementTool_C::Node_Arrive_Tangents' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Node_Leave_Tangents) == 0x0003F0, "Member 'ABP_PCG_FoliagePlacementTool_C::Node_Leave_Tangents' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Use_Interior_Points) == 0x000400, "Member 'ABP_PCG_FoliagePlacementTool_C::Use_Interior_Points' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Override_Foliage_Assignment) == 0x000401, "Member 'ABP_PCG_FoliagePlacementTool_C::Override_Foliage_Assignment' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, FoliageTypes) == 0x000408, "Member 'ABP_PCG_FoliagePlacementTool_C::FoliageTypes' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Primary_Landscape_Layer) == 0x000418, "Member 'ABP_PCG_FoliagePlacementTool_C::Primary_Landscape_Layer' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, Secondary_Landscape_Layer) == 0x000428, "Member 'ABP_PCG_FoliagePlacementTool_C::Secondary_Landscape_Layer' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, RiverlandsFoliage_DataTable) == 0x000438, "Member 'ABP_PCG_FoliagePlacementTool_C::RiverlandsFoliage_DataTable' has a wrong offset!");
static_assert(offsetof(ABP_PCG_FoliagePlacementTool_C, DesertFoliage_DataTable) == 0x000440, "Member 'ABP_PCG_FoliagePlacementTool_C::DesertFoliage_DataTable' has a wrong offset!");

}

