#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherEvent

#include "Basic.hpp"

#include "S_EnvironmentSettings_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "S_EnvironmentSettingsSwitches_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeatherEvent.BP_WeatherEvent_C
// 0x06C8 (0x0A10 - 0x0348)
class ABP_WeatherEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak_Thunder;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Weather_Material;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Radius;                                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intensity;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Event_Specific_Movement;                           // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Amount;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Previewing;                                        // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_391[0xF];                                      // 0x0391(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_EnvironmentSettings                 Weather_Settings;                                  // 0x03A0(0x0600)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FS_EnvironmentSettingsSwitches         Weather_Settings_Switches;                         // 0x09A0(0x0013)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B3[0x5];                                      // 0x09B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Weather_DMI;                                       // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         World_Size;                                        // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Registered_With_IntrepidSky;                       // 0x09C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C5[0x3];                                      // 0x09C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lightning_Accumulator;                             // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Accumulation_Speed;                      // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Random_Stream;                                     // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          Travelling;                                        // 0x09E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E1[0x3];                                      // 0x09E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Wind_Vector;                                       // 0x09E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Master_Value;                                      // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class AIntrepidSkyBase*                       Intrepid_Sky_Instance;                             // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Disable_Preview();
	void Enable_Preview();
	void ExecuteUbergraph_BP_WeatherEvent(int32 EntryPoint);
	void Get_Weather_Settings(double Delta_Seconds, struct FS_EnvironmentSettings* Settings, struct FS_EnvironmentSettingsSwitches* Switches, double* Radius_0, double* Intensity_0, struct FVector4* Lightning_Pos_Size);
	void Pass_Data();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Set_DMI_Parameters();
	void Travel(double Delta_Seconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeatherEvent_C">();
	}
	static class ABP_WeatherEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeatherEvent_C>();
	}
};
static_assert(alignof(ABP_WeatherEvent_C) == 0x000010, "Wrong alignment on ABP_WeatherEvent_C");
static_assert(sizeof(ABP_WeatherEvent_C) == 0x000A10, "Wrong size on ABP_WeatherEvent_C");
static_assert(offsetof(ABP_WeatherEvent_C, UberGraphFrame) == 0x000348, "Member 'ABP_WeatherEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Ak_Thunder) == 0x000350, "Member 'ABP_WeatherEvent_C::Ak_Thunder' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_WeatherEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Weather_Material) == 0x000360, "Member 'ABP_WeatherEvent_C::Weather_Material' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Radius) == 0x000368, "Member 'ABP_WeatherEvent_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Intensity) == 0x000370, "Member 'ABP_WeatherEvent_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Event_Specific_Movement) == 0x000378, "Member 'ABP_WeatherEvent_C::Event_Specific_Movement' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Lightning_Amount) == 0x000388, "Member 'ABP_WeatherEvent_C::Lightning_Amount' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Previewing) == 0x000390, "Member 'ABP_WeatherEvent_C::Previewing' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Weather_Settings) == 0x0003A0, "Member 'ABP_WeatherEvent_C::Weather_Settings' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Weather_Settings_Switches) == 0x0009A0, "Member 'ABP_WeatherEvent_C::Weather_Settings_Switches' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Weather_DMI) == 0x0009B8, "Member 'ABP_WeatherEvent_C::Weather_DMI' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, World_Size) == 0x0009C0, "Member 'ABP_WeatherEvent_C::World_Size' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Registered_With_IntrepidSky) == 0x0009C4, "Member 'ABP_WeatherEvent_C::Registered_With_IntrepidSky' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Lightning_Accumulator) == 0x0009C8, "Member 'ABP_WeatherEvent_C::Lightning_Accumulator' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Lightning_Accumulation_Speed) == 0x0009D0, "Member 'ABP_WeatherEvent_C::Lightning_Accumulation_Speed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Random_Stream) == 0x0009D8, "Member 'ABP_WeatherEvent_C::Random_Stream' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Travelling) == 0x0009E0, "Member 'ABP_WeatherEvent_C::Travelling' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Speed) == 0x0009E4, "Member 'ABP_WeatherEvent_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Wind_Vector) == 0x0009E8, "Member 'ABP_WeatherEvent_C::Wind_Vector' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Master_Value) == 0x0009F8, "Member 'ABP_WeatherEvent_C::Master_Value' has a wrong offset!");
static_assert(offsetof(ABP_WeatherEvent_C, Intrepid_Sky_Instance) == 0x000A00, "Member 'ABP_WeatherEvent_C::Intrepid_Sky_Instance' has a wrong offset!");

}

