#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_RotateToTarget

#include "Basic.hpp"

#include "STT_Base_classes.hpp"
#include "Engine_structs.hpp"
#include "DesignDataPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_RotateToTarget.STT_RotateToTarget_C
// 0x0098 (0x0110 - 0x0078)
class USTT_RotateToTarget_C final : public USTT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAoCExpression                         Target_Expression;                                 // 0x0080(0x0050)(Edit, BlueprintVisible)
	class AActor*                                 Target;                                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        RotationSpeed;                                     // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset_Angle;                                      // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABaseCharacter*                         Agent;                                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Timer;                                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Stored_Target;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LastYawDiff;                                       // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_STT_RotateToTarget(int32 EntryPoint);
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime);
	void RotateToTarget(const struct FVector& TargetVec, class AActor* Source, double YawDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_RotateToTarget_C">();
	}
	static class USTT_RotateToTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_RotateToTarget_C>();
	}
};
static_assert(alignof(USTT_RotateToTarget_C) == 0x000008, "Wrong alignment on USTT_RotateToTarget_C");
static_assert(sizeof(USTT_RotateToTarget_C) == 0x000110, "Wrong size on USTT_RotateToTarget_C");
static_assert(offsetof(USTT_RotateToTarget_C, UberGraphFrame) == 0x000078, "Member 'USTT_RotateToTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Target_Expression) == 0x000080, "Member 'USTT_RotateToTarget_C::Target_Expression' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Target) == 0x0000D0, "Member 'USTT_RotateToTarget_C::Target' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, RotationSpeed) == 0x0000D8, "Member 'USTT_RotateToTarget_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Duration) == 0x0000E0, "Member 'USTT_RotateToTarget_C::Duration' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Offset_Angle) == 0x0000E8, "Member 'USTT_RotateToTarget_C::Offset_Angle' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Agent) == 0x0000F0, "Member 'USTT_RotateToTarget_C::Agent' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Timer) == 0x0000F8, "Member 'USTT_RotateToTarget_C::Timer' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, Stored_Target) == 0x000100, "Member 'USTT_RotateToTarget_C::Stored_Target' has a wrong offset!");
static_assert(offsetof(USTT_RotateToTarget_C, LastYawDiff) == 0x000108, "Member 'USTT_RotateToTarget_C::LastYawDiff' has a wrong offset!");

}

