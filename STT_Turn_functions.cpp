#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Turn

#include "Basic.hpp"

#include "STT_Turn_classes.hpp"
#include "STT_Turn_parameters.hpp"


namespace SDK
{

// Function STT_Turn.STT_Turn_C.ExecuteUbergraph_STT_Turn
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Turn_C::ExecuteUbergraph_STT_Turn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Turn_C", "ExecuteUbergraph_STT_Turn");

	Params::STT_Turn_C_ExecuteUbergraph_STT_Turn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Turn.STT_Turn_C.GetTurnDirectionAndAngle
// (Public, BlueprintCallable, BlueprintEvent)

void USTT_Turn_C::GetTurnDirectionAndAngle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Turn_C", "GetTurnDirectionAndAngle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function STT_Turn.STT_Turn_C.ReceiveExitState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_Turn_C::ReceiveExitState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Turn_C", "ReceiveExitState");

	Params::STT_Turn_C_ReceiveExitState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Turn.STT_Turn_C.ReceiveLatentEnterState
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FStateTreeTransitionResult&Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USTT_Turn_C::ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Turn_C", "ReceiveLatentEnterState");

	Params::STT_Turn_C_ReceiveLatentEnterState Parms{};

	Parms.Transition = std::move(Transition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Turn.STT_Turn_C.ReceiveLatentTick
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             DeltaTime                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USTT_Turn_C::ReceiveLatentTick(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Turn_C", "ReceiveLatentTick");

	Params::STT_Turn_C_ReceiveLatentTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function STT_Turn.STT_Turn_C.ReceiveStateCompleted
// (Event, Public, BlueprintEvent)
// Parameters:
// const EStateTreeRunStatus               CompletionStatus                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FStateTreeActiveStates&    CompletedActiveStates                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void USTT_Turn_C::ReceiveStateCompleted(const EStateTreeRunStatus CompletionStatus, const struct FStateTreeActiveStates& CompletedActiveStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("STT_Turn_C", "ReceiveStateCompleted");

	Params::STT_Turn_C_ReceiveStateCompleted Parms{};

	Parms.CompletionStatus = CompletionStatus;
	Parms.CompletedActiveStates = std::move(CompletedActiveStates);

	UObject::ProcessEvent(Func, &Parms);
}

}

