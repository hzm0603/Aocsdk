#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineTwistCorrect

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SplineTwistCorrect_structs.hpp"


namespace SDK
{

// Class SplineTwistCorrect.SplineTwistCorrectBPLibrary
// 0x0000 (0x0048 - 0x0048)
class USplineTwistCorrectBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BuildCorrectedSpline(const class USplineComponent* SplineUser, const class USplineComponent* SplineOffset, class USplineComponent* SplineFinal, const float IdealLength);
	static void BuildOffsetSpline(const class USplineComponent* SplineUser, class USplineComponent* SplineOffset, const float RotFromUp, const float OffsetDist);
	static void CalcRailLength(const class USplineComponent* Spline, int32* Number, float* Length, const float IdealLength);
	static void CalcRotFromUp(float* Rotation, const class USplineComponent* Spline, const int32 Index_0, const float Length);
	static void CalcStartEnd(const class USplineComponent* Spline, struct FVector* LocStart, struct FVector* TanStart, struct FVector* LocEnd, struct FVector* TanEnd, const int32 Index_0, const float Length);
	static void ConfigSplineMesh(const int32& Index_0, const float& Length, const class USplineComponent* SplineFinal, class USplineMeshComponent* SplineMesh, const class AActor* Actor, class UMaterialInterface* Material, class UStaticMesh* StaticMesh, const struct FStartEndScale2& StartEndScale, const float Roll);
	static void FixTangents(const class USplineComponent* SplineUser, class USplineComponent* SplineOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineTwistCorrectBPLibrary">();
	}
	static class USplineTwistCorrectBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineTwistCorrectBPLibrary>();
	}
};
static_assert(alignof(USplineTwistCorrectBPLibrary) == 0x000008, "Wrong alignment on USplineTwistCorrectBPLibrary");
static_assert(sizeof(USplineTwistCorrectBPLibrary) == 0x000048, "Wrong size on USplineTwistCorrectBPLibrary");

// Class SplineTwistCorrect.SplineWithMesh
// 0x00C0 (0x0780 - 0x06C0)
class USplineWithMesh final : public USplineComponent
{
public:
	EMeshToUse                                    MeshToUse;                                         // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubSegmentLength;                                  // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMeshDefault;                                 // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    StaticMeshArray;                                   // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x06E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x06EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       OffsetSpline;                                      // 0x06F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       CorrectedSpline;                                   // 0x06F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USplineMeshComponent*>           SplineMeshArray;                                   // 0x0700(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialDefault;                                   // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialArray;                                     // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0728(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArrowComponent*>                DirectionArrows;                                   // 0x0730(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UArrowComponent*                        Arrow;                                             // 0x0740(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0748(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root;                                              // 0x0750(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0758(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddDirectionArrows;                               // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bArrows;                                           // 0x0761(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_762[0x6];                                      // 0x0762(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	EMeshScalingType                              MeshScalingType;                                   // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_769[0x3];                                      // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ScaleCurve;                                        // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMeshRollType                                 MeshRollType;                                      // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollIncrement;                                     // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddDirectionArrows();
	void AddMesh(class AActor* PActor);
	void AddRootToParent();
	float GetRollMesh(int32 I);
	struct FStartEndScale2 GetScaleMesh(int32 I);
	void RemoveDirectionArrows();
	void RemoveMesh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineWithMesh">();
	}
	static class USplineWithMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<USplineWithMesh>();
	}
};
static_assert(alignof(USplineWithMesh) == 0x000010, "Wrong alignment on USplineWithMesh");
static_assert(sizeof(USplineWithMesh) == 0x000780, "Wrong size on USplineWithMesh");
static_assert(offsetof(USplineWithMesh, MeshToUse) == 0x0006C0, "Member 'USplineWithMesh::MeshToUse' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, SubSegmentLength) == 0x0006C4, "Member 'USplineWithMesh::SubSegmentLength' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, StaticMeshDefault) == 0x0006C8, "Member 'USplineWithMesh::StaticMeshDefault' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, StaticMeshArray) == 0x0006D0, "Member 'USplineWithMesh::StaticMeshArray' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, StaticMesh) == 0x0006E0, "Member 'USplineWithMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Length) == 0x0006E8, "Member 'USplineWithMesh::Length' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Number) == 0x0006EC, "Member 'USplineWithMesh::Number' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, OffsetSpline) == 0x0006F0, "Member 'USplineWithMesh::OffsetSpline' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, CorrectedSpline) == 0x0006F8, "Member 'USplineWithMesh::CorrectedSpline' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, SplineMeshArray) == 0x000700, "Member 'USplineWithMesh::SplineMeshArray' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, MaterialDefault) == 0x000710, "Member 'USplineWithMesh::MaterialDefault' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, MaterialArray) == 0x000718, "Member 'USplineWithMesh::MaterialArray' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Material) == 0x000728, "Member 'USplineWithMesh::Material' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, DirectionArrows) == 0x000730, "Member 'USplineWithMesh::DirectionArrows' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Arrow) == 0x000740, "Member 'USplineWithMesh::Arrow' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, SplineMesh) == 0x000748, "Member 'USplineWithMesh::SplineMesh' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Root) == 0x000750, "Member 'USplineWithMesh::Root' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Actor) == 0x000758, "Member 'USplineWithMesh::Actor' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, bAddDirectionArrows) == 0x000760, "Member 'USplineWithMesh::bAddDirectionArrows' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, bArrows) == 0x000761, "Member 'USplineWithMesh::bArrows' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, MeshScalingType) == 0x000768, "Member 'USplineWithMesh::MeshScalingType' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, Scale) == 0x00076C, "Member 'USplineWithMesh::Scale' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, ScaleCurve) == 0x000770, "Member 'USplineWithMesh::ScaleCurve' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, MeshRollType) == 0x000778, "Member 'USplineWithMesh::MeshRollType' has a wrong offset!");
static_assert(offsetof(USplineWithMesh, RollIncrement) == 0x00077C, "Member 'USplineWithMesh::RollIncrement' has a wrong offset!");

// Class SplineTwistCorrect.STC_MathFunctions
// 0x0000 (0x0048 - 0x0048)
class USTC_MathFunctions final : public UBlueprintFunctionLibrary
{
public:
	static void CalcIcosahedron(TArray<struct FVector>* Vertices, const float Radius);
	static bool FindNextSplineLocation(class UObject* WorldContextObject, struct FVector* NextLocation, struct FVector* NextUpVector, const float SegmentLength, const struct FVector& LastLocation, const struct FVector& LastDirection, const int32 Seed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"STC_MathFunctions">();
	}
	static class USTC_MathFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTC_MathFunctions>();
	}
};
static_assert(alignof(USTC_MathFunctions) == 0x000008, "Wrong alignment on USTC_MathFunctions");
static_assert(sizeof(USTC_MathFunctions) == 0x000048, "Wrong size on USTC_MathFunctions");

}

