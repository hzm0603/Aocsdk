#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LandscapeBrushRoad

#include "Basic.hpp"

#include "S_RoadSetDressingData_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "GameSystemsPlugin_classes.hpp"
#include "SRoadSplineMeshActorSettings_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LandscapeBrushRoad.BP_LandscapeBrushRoad_C
// 0x0500 (0x0978 - 0x0478)
class ABP_LandscapeBrushRoad_C : public ARoadActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Segment_Length;                                    // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Editor_Road_Level;                                 // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Start_Road_Level;                                  // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         End_Road_Level;                                    // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Road_Width;                                    // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Start_Road_Width;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        End_Road_Width;                                    // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Road_Width_Override;                               // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fade_Distance;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Groove_Depth;                                      // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LandscapeBrushRoadIntersection_C> Intersection_Start;                   // 0x04D0(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LandscapeBrushRoadIntersection_C> Intersection_End;                     // 0x04F8(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           Grass_Hiding_Spline_Meshes;                        // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Grass_Hiding_DMIs;                                 // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USplineMeshComponent*>           Visible_Spline_Base_Meshes;                        // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Road_Base_Material_DMIs;                           // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class ABP_LandscapeBrushNodeShape_C> Node_Start;                                  // 0x0560(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LandscapeBrushNodeShape_C> Node_End;                                    // 0x0588(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Split_At;                                          // 0x05B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineMeshComponent*>           Visible_Spline_Top_Meshes;                         // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Road_Top_Material_DMIs;                            // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UMaterialInterface>      Debug_Text_Material;                               // 0x05D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_LandscapeBrushRoad_C*               Other_Road;                                        // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 Connection_Start;                                  // 0x0608(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 Connection_End;                                    // 0x0630(0x0028)(Edit, BlueprintVisible, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Tilt_Amount;                                       // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  Dynamic_Mesh_Component;                            // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          EditingMode;                                       // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Top_Road_Material;                                 // 0x0670(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TSoftObjectPtr<class UPhysicalMaterial>       Top_Road_Phys_Material;                            // 0x0698(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  Landscape_Deforming_DynMesh;                       // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Active_Road;                                    // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadedRoadAppearance                  RoadAppearance;                                    // 0x06D0(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLoadedRoadBaseAppearance              BaseAppearance;                                    // 0x0738(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	TMap<TSoftClassPtr<class UClass>, struct FSRoadSplineMeshActorSettings> Spline_Mesh_Actors;      // 0x07B0(0x0050)(Edit, BlueprintVisible)
	TSoftObjectPtr<class UMaterialInterface>      Road_For_Minimap_Material;                         // 0x0800(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Debugging;                                         // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActiveReady;                                     // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBaseReady;                                       // 0x082A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAppReady;                                        // 0x082B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DegreesToRadians;                                  // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_RoadSetDressingData                 Road_Set_Dressing_Data;                            // 0x0838(0x0138)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UPCGComponent*                          Active_PCG_Comp;                                   // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Build_Road();
	void Capture_Minimap(bool Is_Capturing, double Height_Offset, double Width_Scale);
	void OnRoadActiveStateUpdatedBP(const bool bIsRoadActive);
	void OnRoadAppearanceUpdatedBP(const struct FLoadedRoadAppearance& LoadedRoadAppearance);
	void OnRoadBaseAppearanceUpdatedBP(const struct FLoadedRoadBaseAppearance& LoadedRoadBaseAppearance);
	void OnUpdateActiveRoadStatus();
	void OnUpdateLoadedRoadAppearance();
	void Set_Road_Levels(int32 Road_Level);
	void ExecuteUbergraph_BP_LandscapeBrushRoad(int32 EntryPoint);
	void Get_Mesh_List(struct FAoCSplineMeshEntry* First_Override_Beginning_Mesh, struct FAoCSplineMeshEntry* First_Override_End_Mesh, TArray<struct FAoCSplineMeshEntry>* First_Fence_Objects, TArray<struct FAoCSplineDebrisEntry>* First_Debris_Objects, struct FAoCSplineMeshEntry* Second_Override_Beginning_Mesh, struct FAoCSplineMeshEntry* Second_Override_End_Mesh, TArray<struct FAoCSplineMeshEntry>* Second_Fence_Objects, TArray<struct FAoCSplineDebrisEntry>* Second_Debris_Objects);
	void GetRoadTerrainData(TArray<struct FAoCRoadTerrainEntry>* Terrain_Objects, TArray<struct FAoCRoadTerrainEntry>* Grass_Objects);
	void Get_Road_Width_Based_on_Level(double Start_Alpha, double End_Alpha, double* Width_Start, double* Width_End);
	void Get_Current_and_Next_DMI_Distance(int32 Current_Index, double* Current_Distance, double* Next_Distance);
	bool Not_Connected_to_Intersection_or_Node();
	void Apply_Set_Dressing();
	void Update_PCG_Data(const struct FS_RoadSetDressingData& S_RoadSetDressingData);
	void Remove_Duplicate_Spline_Points();
	void Validate_Connections();
	void Remove_This_Brush_From_Only_Update_List();
	void Add_This_Brush_To_Only_Update_List();
	void Update_Connected_Intersections();
	void PrepForSceneCapture(bool IsCapturing, class FName LayerName);
	void Manage_Spline_Mesh_Actors();
	void Manage_Top_Visible_Spline_Meshes_From_Code();
	void Capture_Minimap_Internal(bool Is_Capturing, double Height_Offset, double Width_Scale);
	void Capture_Off();
	void Capture_On();
	void Snap_Road_to_Ground();
	void Elevate_By_Groove_Depth();
	void Show_Indices();
	void Split();
	void Join();
	void disable();
	void Enable();
	void Update_Grass_Hiding_Spline_Meshes();
	void Add_Grass_Hiding_Spline_Meshes();
	void Update_Base_Visible_Spline_Meshes();
	void Add_Base_Visible_Spline_Meshes();
	void Build_Landscape_Deforming_Dynamic_Mesh();
	void Editor_Get_Road_Level_Settings();
	void UserConstructionScript();
	void EditorPrepForSceneCapture(const bool bIsCapturing, const class FName LayerName);
	void EditorPreviewNodeAtLevel(int32 NodeLevel);
	void EditorAddLandscapeBrushToManagerUpdateArray();
	void EditorRemoveLandscapeBrushFromManagerUpdateArray();
	void ReceiveBeginPlay();

	void GetBaseAppearance(struct FLoadedRoadBaseAppearance* Appearance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LandscapeBrushRoad_C">();
	}
	static class ABP_LandscapeBrushRoad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LandscapeBrushRoad_C>();
	}
};
static_assert(alignof(ABP_LandscapeBrushRoad_C) == 0x000008, "Wrong alignment on ABP_LandscapeBrushRoad_C");
static_assert(sizeof(ABP_LandscapeBrushRoad_C) == 0x000978, "Wrong size on ABP_LandscapeBrushRoad_C");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, UberGraphFrame) == 0x000478, "Member 'ABP_LandscapeBrushRoad_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Billboard) == 0x000480, "Member 'ABP_LandscapeBrushRoad_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Segment_Length) == 0x000488, "Member 'ABP_LandscapeBrushRoad_C::Segment_Length' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Editor_Road_Level) == 0x000490, "Member 'ABP_LandscapeBrushRoad_C::Editor_Road_Level' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Start_Road_Level) == 0x000494, "Member 'ABP_LandscapeBrushRoad_C::Start_Road_Level' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, End_Road_Level) == 0x000498, "Member 'ABP_LandscapeBrushRoad_C::End_Road_Level' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Max_Road_Width) == 0x0004A0, "Member 'ABP_LandscapeBrushRoad_C::Max_Road_Width' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Start_Road_Width) == 0x0004A8, "Member 'ABP_LandscapeBrushRoad_C::Start_Road_Width' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, End_Road_Width) == 0x0004B0, "Member 'ABP_LandscapeBrushRoad_C::End_Road_Width' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Road_Width_Override) == 0x0004B8, "Member 'ABP_LandscapeBrushRoad_C::Road_Width_Override' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Fade_Distance) == 0x0004C0, "Member 'ABP_LandscapeBrushRoad_C::Fade_Distance' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Groove_Depth) == 0x0004C8, "Member 'ABP_LandscapeBrushRoad_C::Groove_Depth' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Intersection_Start) == 0x0004D0, "Member 'ABP_LandscapeBrushRoad_C::Intersection_Start' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Intersection_End) == 0x0004F8, "Member 'ABP_LandscapeBrushRoad_C::Intersection_End' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Grass_Hiding_Spline_Meshes) == 0x000520, "Member 'ABP_LandscapeBrushRoad_C::Grass_Hiding_Spline_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Grass_Hiding_DMIs) == 0x000530, "Member 'ABP_LandscapeBrushRoad_C::Grass_Hiding_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Visible_Spline_Base_Meshes) == 0x000540, "Member 'ABP_LandscapeBrushRoad_C::Visible_Spline_Base_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Road_Base_Material_DMIs) == 0x000550, "Member 'ABP_LandscapeBrushRoad_C::Road_Base_Material_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Node_Start) == 0x000560, "Member 'ABP_LandscapeBrushRoad_C::Node_Start' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Node_End) == 0x000588, "Member 'ABP_LandscapeBrushRoad_C::Node_End' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Split_At) == 0x0005B0, "Member 'ABP_LandscapeBrushRoad_C::Split_At' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Visible_Spline_Top_Meshes) == 0x0005B8, "Member 'ABP_LandscapeBrushRoad_C::Visible_Spline_Top_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Road_Top_Material_DMIs) == 0x0005C8, "Member 'ABP_LandscapeBrushRoad_C::Road_Top_Material_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Debug_Text_Material) == 0x0005D8, "Member 'ABP_LandscapeBrushRoad_C::Debug_Text_Material' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Other_Road) == 0x000600, "Member 'ABP_LandscapeBrushRoad_C::Other_Road' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Connection_Start) == 0x000608, "Member 'ABP_LandscapeBrushRoad_C::Connection_Start' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Connection_End) == 0x000630, "Member 'ABP_LandscapeBrushRoad_C::Connection_End' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Tilt_Amount) == 0x000658, "Member 'ABP_LandscapeBrushRoad_C::Tilt_Amount' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Dynamic_Mesh_Component) == 0x000660, "Member 'ABP_LandscapeBrushRoad_C::Dynamic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, EditingMode) == 0x000668, "Member 'ABP_LandscapeBrushRoad_C::EditingMode' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Top_Road_Material) == 0x000670, "Member 'ABP_LandscapeBrushRoad_C::Top_Road_Material' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Top_Road_Phys_Material) == 0x000698, "Member 'ABP_LandscapeBrushRoad_C::Top_Road_Phys_Material' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Landscape_Deforming_DynMesh) == 0x0006C0, "Member 'ABP_LandscapeBrushRoad_C::Landscape_Deforming_DynMesh' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Is_Active_Road) == 0x0006C8, "Member 'ABP_LandscapeBrushRoad_C::Is_Active_Road' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, RoadAppearance) == 0x0006D0, "Member 'ABP_LandscapeBrushRoad_C::RoadAppearance' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, BaseAppearance) == 0x000738, "Member 'ABP_LandscapeBrushRoad_C::BaseAppearance' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Spline_Mesh_Actors) == 0x0007B0, "Member 'ABP_LandscapeBrushRoad_C::Spline_Mesh_Actors' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Road_For_Minimap_Material) == 0x000800, "Member 'ABP_LandscapeBrushRoad_C::Road_For_Minimap_Material' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Debugging) == 0x000828, "Member 'ABP_LandscapeBrushRoad_C::Debugging' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, IsActiveReady) == 0x000829, "Member 'ABP_LandscapeBrushRoad_C::IsActiveReady' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, IsBaseReady) == 0x00082A, "Member 'ABP_LandscapeBrushRoad_C::IsBaseReady' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, IsAppReady) == 0x00082B, "Member 'ABP_LandscapeBrushRoad_C::IsAppReady' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, DegreesToRadians) == 0x000830, "Member 'ABP_LandscapeBrushRoad_C::DegreesToRadians' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Road_Set_Dressing_Data) == 0x000838, "Member 'ABP_LandscapeBrushRoad_C::Road_Set_Dressing_Data' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoad_C, Active_PCG_Comp) == 0x000970, "Member 'ABP_LandscapeBrushRoad_C::Active_PCG_Comp' has a wrong offset!");

}

