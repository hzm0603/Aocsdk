#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_AnimBP_AoC

#include "Basic.hpp"

#include "ALSV4_CPP_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.(CLF) CycleBlending
// 0x0070 (0x0070 - 0x0000)
struct ALS_AnimBP_AoC_C__CLF__CycleBlending final
{
public:
	struct FPoseLink                              I_F;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_B;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_LF;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_LB;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_RF;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_RB;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              _CLF__CycleBlending_0;                             // 0x0060(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C__CLF__CycleBlending) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C__CLF__CycleBlending");
static_assert(sizeof(ALS_AnimBP_AoC_C__CLF__CycleBlending) == 0x000070, "Wrong size on ALS_AnimBP_AoC_C__CLF__CycleBlending");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, I_F) == 0x000000, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::I_F' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, I_B) == 0x000010, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::I_B' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, I_LF) == 0x000020, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::I_LF' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, I_LB) == 0x000030, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::I_LB' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, I_RF) == 0x000040, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::I_RF' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, I_RB) == 0x000050, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::I_RB' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__CLF__CycleBlending, _CLF__CycleBlending_0) == 0x000060, "Member 'ALS_AnimBP_AoC_C__CLF__CycleBlending::_CLF__CycleBlending_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.(N) CycleBlending
// 0x0080 (0x0080 - 0x0000)
struct ALS_AnimBP_AoC_C__N__CycleBlending final
{
public:
	struct FPoseLink                              F;                                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              B;                                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LF;                                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LB;                                                // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              RF;                                                // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              RB;                                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Sprint;                                            // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              _N__CycleBlending_0;                               // 0x0070(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C__N__CycleBlending) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C__N__CycleBlending");
static_assert(sizeof(ALS_AnimBP_AoC_C__N__CycleBlending) == 0x000080, "Wrong size on ALS_AnimBP_AoC_C__N__CycleBlending");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, F) == 0x000000, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::F' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, B) == 0x000010, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::B' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, LF) == 0x000020, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::LF' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, LB) == 0x000030, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::LB' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, RF) == 0x000040, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::RF' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, RB) == 0x000050, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::RB' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, Sprint) == 0x000060, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::Sprint' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__N__CycleBlending, _N__CycleBlending_0) == 0x000070, "Member 'ALS_AnimBP_AoC_C__N__CycleBlending::_N__CycleBlending_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.(S) SwimBlending
// 0x0070 (0x0070 - 0x0000)
struct ALS_AnimBP_AoC_C__S__SwimBlending final
{
public:
	struct FPoseLink                              I_F;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_B;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_LF;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_LB;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_RF;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              I_RB;                                              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              _S__SwimBlending_0;                                // 0x0060(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C__S__SwimBlending) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C__S__SwimBlending");
static_assert(sizeof(ALS_AnimBP_AoC_C__S__SwimBlending) == 0x000070, "Wrong size on ALS_AnimBP_AoC_C__S__SwimBlending");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, I_F) == 0x000000, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::I_F' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, I_B) == 0x000010, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::I_B' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, I_LF) == 0x000020, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::I_LF' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, I_LB) == 0x000030, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::I_LB' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, I_RF) == 0x000040, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::I_RF' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, I_RB) == 0x000050, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::I_RB' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C__S__SwimBlending, _S__SwimBlending_0) == 0x000060, "Member 'ALS_AnimBP_AoC_C__S__SwimBlending::_S__SwimBlending_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AimOffsetBehaviors
// 0x0010 (0x0010 - 0x0000)
struct ALS_AnimBP_AoC_C_AimOffsetBehaviors final
{
public:
	struct FPoseLink                              AimOffsetBehaviors_0;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_AimOffsetBehaviors) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_AimOffsetBehaviors");
static_assert(sizeof(ALS_AnimBP_AoC_C_AimOffsetBehaviors) == 0x000010, "Wrong size on ALS_AnimBP_AoC_C_AimOffsetBehaviors");
static_assert(offsetof(ALS_AnimBP_AoC_C_AimOffsetBehaviors, AimOffsetBehaviors_0) == 0x000000, "Member 'ALS_AnimBP_AoC_C_AimOffsetBehaviors::AimOffsetBehaviors_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ALS_AnimBP_AoC_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_AnimGraph) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_AnimGraph");
static_assert(sizeof(ALS_AnimBP_AoC_C_AnimGraph) == 0x000010, "Wrong size on ALS_AnimBP_AoC_C_AnimGraph");
static_assert(offsetof(ALS_AnimBP_AoC_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ALS_AnimBP_AoC_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.BaseLayer
// 0x0010 (0x0010 - 0x0000)
struct ALS_AnimBP_AoC_C_BaseLayer final
{
public:
	struct FPoseLink                              BaseLayer_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_BaseLayer) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_BaseLayer");
static_assert(sizeof(ALS_AnimBP_AoC_C_BaseLayer) == 0x000010, "Wrong size on ALS_AnimBP_AoC_C_BaseLayer");
static_assert(offsetof(ALS_AnimBP_AoC_C_BaseLayer, BaseLayer_0) == 0x000000, "Member 'ALS_AnimBP_AoC_C_BaseLayer::BaseLayer_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.BasePoses
// 0x0010 (0x0010 - 0x0000)
struct ALS_AnimBP_AoC_C_BasePoses final
{
public:
	struct FPoseLink                              BasePoses_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_BasePoses) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_BasePoses");
static_assert(sizeof(ALS_AnimBP_AoC_C_BasePoses) == 0x000010, "Wrong size on ALS_AnimBP_AoC_C_BasePoses");
static_assert(offsetof(ALS_AnimBP_AoC_C_BasePoses, BasePoses_0) == 0x000000, "Member 'ALS_AnimBP_AoC_C_BasePoses::BasePoses_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ALS_AnimBP_AoC_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_AnimBP_AoC_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ALS_AnimBP_AoC_C_BlueprintUpdateAnimation");
static_assert(sizeof(ALS_AnimBP_AoC_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ALS_AnimBP_AoC_C_BlueprintUpdateAnimation");
static_assert(offsetof(ALS_AnimBP_AoC_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ALS_AnimBP_AoC_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.CombatLayer
// 0x0020 (0x0020 - 0x0000)
struct ALS_AnimBP_AoC_C_CombatLayer final
{
public:
	struct FPoseLink                              CombatLayerInput;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CombatLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_CombatLayer) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_CombatLayer");
static_assert(sizeof(ALS_AnimBP_AoC_C_CombatLayer) == 0x000020, "Wrong size on ALS_AnimBP_AoC_C_CombatLayer");
static_assert(offsetof(ALS_AnimBP_AoC_C_CombatLayer, CombatLayerInput) == 0x000000, "Member 'ALS_AnimBP_AoC_C_CombatLayer::CombatLayerInput' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_CombatLayer, CombatLayer_0) == 0x000010, "Member 'ALS_AnimBP_AoC_C_CombatLayer::CombatLayer_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.ExecuteUbergraph_ALS_AnimBP_AoC
// 0x0158 (0x0158 - 0x0000)
struct ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams; // 0x0010(0x0018)(NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_2;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_1; // 0x0030(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_2; // 0x0048(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_3; // 0x0060(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_4; // 0x0078(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_5; // 0x0090(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_6; // 0x00A8(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_7; // 0x00C0(0x0018)(NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_8; // 0x00E0(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_9; // 0x00F8(0x0018)(NoDestructor)
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_10; // 0x0118(0x0018)(NoDestructor)
	struct FALSDynamicMontageParams               UniqueObjectNameForCooking_ALSDynamicMontageParams_11; // 0x0130(0x0018)(NoDestructor)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_1;               // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_2;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC");
static_assert(sizeof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC) == 0x000158, "Wrong size on ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, EntryPoint) == 0x000000, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::EntryPoint' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, K2Node_Event_DeltaTimeX) == 0x000008, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams) == 0x000010, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, K2Node_SwitchInteger_CmpSuccess) == 0x000028, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, K2Node_SwitchInteger_CmpSuccess_1) == 0x000029, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, K2Node_SwitchInteger_CmpSuccess_2) == 0x00002A, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::K2Node_SwitchInteger_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_1) == 0x000030, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_1' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_2) == 0x000048, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_2' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_3) == 0x000060, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_3' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_4) == 0x000078, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_4' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_5) == 0x000090, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_5' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_6) == 0x0000A8, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_6' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_7) == 0x0000C0, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_7' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, K2Node_SwitchEnum_CmpSuccess) == 0x0000D8, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_8) == 0x0000E0, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_8' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_9) == 0x0000F8, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_9' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, CallFunc_GetCurveValueWithDefault_OutValue) == 0x000110, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x000114, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_10) == 0x000118, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_10' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, UniqueObjectNameForCooking_ALSDynamicMontageParams_11) == 0x000130, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::UniqueObjectNameForCooking_ALSDynamicMontageParams_11' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, CallFunc_Montage_Play_ReturnValue) == 0x000148, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, CallFunc_Montage_Play_ReturnValue_1) == 0x00014C, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::CallFunc_Montage_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC, CallFunc_Montage_Play_ReturnValue_2) == 0x000150, "Member 'ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC::CallFunc_Montage_Play_ReturnValue_2' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.FootIK
// 0x0020 (0x0020 - 0x0000)
struct ALS_AnimBP_AoC_C_FootIK final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FootIK_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_FootIK) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_FootIK");
static_assert(sizeof(ALS_AnimBP_AoC_C_FootIK) == 0x000020, "Wrong size on ALS_AnimBP_AoC_C_FootIK");
static_assert(offsetof(ALS_AnimBP_AoC_C_FootIK, InPose) == 0x000000, "Member 'ALS_AnimBP_AoC_C_FootIK::InPose' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_FootIK, FootIK_0) == 0x000010, "Member 'ALS_AnimBP_AoC_C_FootIK::FootIK_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.HandIK
// 0x0020 (0x0020 - 0x0000)
struct ALS_AnimBP_AoC_C_HandIK final
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandIK_0;                                          // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_HandIK) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_HandIK");
static_assert(sizeof(ALS_AnimBP_AoC_C_HandIK) == 0x000020, "Wrong size on ALS_AnimBP_AoC_C_HandIK");
static_assert(offsetof(ALS_AnimBP_AoC_C_HandIK, InputPose) == 0x000000, "Member 'ALS_AnimBP_AoC_C_HandIK::InputPose' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_HandIK, HandIK_0) == 0x000010, "Member 'ALS_AnimBP_AoC_C_HandIK::HandIK_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.LayerBleding
// 0x0040 (0x0040 - 0x0000)
struct ALS_AnimBP_AoC_C_LayerBleding final
{
public:
	struct FPoseLink                              BaseLayerInput;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              OverlayLayerInput;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BasePosesInput;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LayerBleding_0;                                    // 0x0030(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_LayerBleding) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_LayerBleding");
static_assert(sizeof(ALS_AnimBP_AoC_C_LayerBleding) == 0x000040, "Wrong size on ALS_AnimBP_AoC_C_LayerBleding");
static_assert(offsetof(ALS_AnimBP_AoC_C_LayerBleding, BaseLayerInput) == 0x000000, "Member 'ALS_AnimBP_AoC_C_LayerBleding::BaseLayerInput' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_LayerBleding, OverlayLayerInput) == 0x000010, "Member 'ALS_AnimBP_AoC_C_LayerBleding::OverlayLayerInput' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_LayerBleding, BasePosesInput) == 0x000020, "Member 'ALS_AnimBP_AoC_C_LayerBleding::BasePosesInput' has a wrong offset!");
static_assert(offsetof(ALS_AnimBP_AoC_C_LayerBleding, LayerBleding_0) == 0x000030, "Member 'ALS_AnimBP_AoC_C_LayerBleding::LayerBleding_0' has a wrong offset!");

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.OverlayLayer
// 0x0010 (0x0010 - 0x0000)
struct ALS_AnimBP_AoC_C_OverlayLayer final
{
public:
	struct FPoseLink                              OverlayLayer_0;                                    // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALS_AnimBP_AoC_C_OverlayLayer) == 0x000008, "Wrong alignment on ALS_AnimBP_AoC_C_OverlayLayer");
static_assert(sizeof(ALS_AnimBP_AoC_C_OverlayLayer) == 0x000010, "Wrong size on ALS_AnimBP_AoC_C_OverlayLayer");
static_assert(offsetof(ALS_AnimBP_AoC_C_OverlayLayer, OverlayLayer_0) == 0x000000, "Member 'ALS_AnimBP_AoC_C_OverlayLayer::OverlayLayer_0' has a wrong offset!");

}

