#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DragonIKPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DragonIKPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DragonIKPlugin.DragonIKFootStepsComponent
// 0x0198 (0x0290 - 0x00F8)
class alignas(0x10) UDragonIKFootStepsComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class FName bone_name, const struct FTransform& foot_transform, float height_difference, const struct FHitResult& hit_info)> OnCharacterFootStep; // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x15C];                                    // 0x0108(0x015C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   read_this;                                         // 0x0264(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           foot_socket;                                       // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         foot_enter_height;                                 // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         foot_exit_height;                                  // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CallFootSteps(class FName bone_name, const struct FTransform& foot_transform, float height_difference, const struct FHitResult& hit_info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKFootStepsComponent">();
	}
	static class UDragonIKFootStepsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKFootStepsComponent>();
	}
};
static_assert(alignof(UDragonIKFootStepsComponent) == 0x000010, "Wrong alignment on UDragonIKFootStepsComponent");
static_assert(sizeof(UDragonIKFootStepsComponent) == 0x000290, "Wrong size on UDragonIKFootStepsComponent");
static_assert(offsetof(UDragonIKFootStepsComponent, OnCharacterFootStep) == 0x0000F8, "Member 'UDragonIKFootStepsComponent::OnCharacterFootStep' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, read_this) == 0x000264, "Member 'UDragonIKFootStepsComponent::read_this' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, foot_socket) == 0x000270, "Member 'UDragonIKFootStepsComponent::foot_socket' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, foot_enter_height) == 0x000280, "Member 'UDragonIKFootStepsComponent::foot_enter_height' has a wrong offset!");
static_assert(offsetof(UDragonIKFootStepsComponent, foot_exit_height) == 0x000284, "Member 'UDragonIKFootStepsComponent::foot_exit_height' has a wrong offset!");

// Class DragonIKPlugin.DragonIKPhysicsComponent
// 0x03D8 (0x04D0 - 0x00F8)
class alignas(0x10) UDragonIKPhysicsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ADragonIKPhysicsHolder*                 handler_holder;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         physanim_tag_index;                                // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Custom_Root_Bone;                                  // 0x011C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           individual_bone_selection;                         // 0x0128(0x0010)(Edit, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x20];                                     // 0x0138(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Influence_Stopping_Bones;                          // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDragonData_PhysicsHandleMultiplier> Override_Handle_Strength_Multiplier;          // 0x0168(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x30];                                     // 0x0178(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Linear_Strength;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Strength;                                  // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Damp;                                       // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Damp;                                      // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interpolation_Speed;                               // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Teleport_Distance;                                 // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x70];                                     // 0x01C0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          parent_child_ragdoll_state;                        // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                Parent_Child_Connection_Array;                     // 0x0238(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          use_auto_blending_logic;                           // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Autoblendalpha;                                    // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x1];                                      // 0x0290(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          modify_physics_states;                             // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0x2];                                      // 0x0292(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hit_Enable_Speed;                                  // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit_Disable_Speed;                                 // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hit_delay_time;                                    // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Physanim_Enter_Curve;                              // 0x02A8(0x0090)(Edit, NativeAccessSpecifierPublic)
	bool                                          blend_to_zero;                                     // 0x0338(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x197];                                    // 0x0339(0x0197)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheSimulationStates();
	void Control_Bone_Handle(class FName bone_name, const struct FTransform& override_transform, bool Enable);
	void FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Modify_Reset_Bone_Info(const TArray<class FName>& bone_list);
	void Multicast_CacheSimulationStates();
	void Multicast_Control_Bone_Handle(class FName bone_name, const struct FTransform& override_transform, bool Enable);
	void Multicast_DragonIKSimulatePhysics(class USkeletalMeshComponent* SKMesh, class FName BoneName, bool IncludeSelf);
	void Multicast_FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Multicast_Modify_Reset_Bone_Info(const TArray<class FName>& bone_list);
	void Multicast_OnHitCallback(const struct FHitResult& Hit, const class FName Optional_Override_Hit_Bone_Name, const struct FVector& hit_location, const struct FVector& hit_impulse_direction, const class FName& hit_bone_name);
	void Multicast_PerformActiveRagdoll(float pelvis_mass_override);
	void Multicast_ReGrabAllHandles(bool exit_ragdoll);
	void Multicast_ReleaseAllHandles(bool go_ragdoll);
	void Multicast_SetInterpolation(int32 inter_value);
	void Multicast_UpdatePhysanimData(int32 LinearStrength, int32 AngularStrength, int32 LinearDamp, int32 AngularDamp);
	void OnHitCallback(const struct FHitResult& Hit, class FName Optional_Override_Hit_Bone_Name, struct FVector* hit_location, struct FVector* hit_impulse_direction, class FName* hit_bone_name);
	void PerformActiveRagdoll(float pelvis_mass_override);
	void ReGrabAllHandles(bool exit_ragdoll);
	void ReleaseAllHandles(bool go_ragdoll);
	void Server_CacheSimulationStates();
	void Server_Control_Bone_Handle(class FName bone_name, const struct FTransform& override_transform, bool Enable);
	void Server_DragonIKSimulatePhysics(class USkeletalMeshComponent* SKMesh, class FName BoneName, bool IncludeSelf);
	void Server_FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Server_Modify_Reset_Bone_Info(const TArray<class FName>& bone_list);
	void Server_OnHitCallback(const struct FHitResult& Hit, const class FName Optional_Override_Hit_Bone_Name, const struct FVector& hit_location, const struct FVector& hit_impulse_direction, const class FName& hit_bone_name);
	void Server_PerformActiveRagdoll(float pelvis_mass_override);
	void Server_ReGrabAllHandles(bool exit_ragdoll);
	void Server_ReleaseAllHandles(bool go_ragdoll);
	void Server_SetInterpolation(int32 inter_value);
	void Server_UpdatePhysanimData(int32 LinearStrength, int32 AngularStrength, int32 LinearDamp, int32 AngularDamp);
	void SetInterpolation(int32 inter_value);
	void UpdatePhysanimData(int32 LinearStrength, int32 AngularStrength, int32 LinearDamp, int32 AngularDamp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKPhysicsComponent">();
	}
	static class UDragonIKPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKPhysicsComponent>();
	}
};
static_assert(alignof(UDragonIKPhysicsComponent) == 0x000010, "Wrong alignment on UDragonIKPhysicsComponent");
static_assert(sizeof(UDragonIKPhysicsComponent) == 0x0004D0, "Wrong size on UDragonIKPhysicsComponent");
static_assert(offsetof(UDragonIKPhysicsComponent, handler_holder) == 0x000110, "Member 'UDragonIKPhysicsComponent::handler_holder' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, physanim_tag_index) == 0x000118, "Member 'UDragonIKPhysicsComponent::physanim_tag_index' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Custom_Root_Bone) == 0x00011C, "Member 'UDragonIKPhysicsComponent::Custom_Root_Bone' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, individual_bone_selection) == 0x000128, "Member 'UDragonIKPhysicsComponent::individual_bone_selection' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Influence_Stopping_Bones) == 0x000158, "Member 'UDragonIKPhysicsComponent::Influence_Stopping_Bones' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Override_Handle_Strength_Multiplier) == 0x000168, "Member 'UDragonIKPhysicsComponent::Override_Handle_Strength_Multiplier' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Linear_Strength) == 0x0001A8, "Member 'UDragonIKPhysicsComponent::Linear_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Angular_Strength) == 0x0001AC, "Member 'UDragonIKPhysicsComponent::Angular_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Linear_Damp) == 0x0001B0, "Member 'UDragonIKPhysicsComponent::Linear_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Angular_Damp) == 0x0001B4, "Member 'UDragonIKPhysicsComponent::Angular_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Interpolation_Speed) == 0x0001B8, "Member 'UDragonIKPhysicsComponent::Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Teleport_Distance) == 0x0001BC, "Member 'UDragonIKPhysicsComponent::Teleport_Distance' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, parent_child_ragdoll_state) == 0x000230, "Member 'UDragonIKPhysicsComponent::parent_child_ragdoll_state' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Parent_Child_Connection_Array) == 0x000238, "Member 'UDragonIKPhysicsComponent::Parent_Child_Connection_Array' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, use_auto_blending_logic) == 0x000288, "Member 'UDragonIKPhysicsComponent::use_auto_blending_logic' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Autoblendalpha) == 0x00028C, "Member 'UDragonIKPhysicsComponent::Autoblendalpha' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, modify_physics_states) == 0x000291, "Member 'UDragonIKPhysicsComponent::modify_physics_states' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_Enable_Speed) == 0x000294, "Member 'UDragonIKPhysicsComponent::Hit_Enable_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Hit_Disable_Speed) == 0x000298, "Member 'UDragonIKPhysicsComponent::Hit_Disable_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, hit_delay_time) == 0x00029C, "Member 'UDragonIKPhysicsComponent::hit_delay_time' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, Physanim_Enter_Curve) == 0x0002A8, "Member 'UDragonIKPhysicsComponent::Physanim_Enter_Curve' has a wrong offset!");
static_assert(offsetof(UDragonIKPhysicsComponent, blend_to_zero) == 0x000338, "Member 'UDragonIKPhysicsComponent::blend_to_zero' has a wrong offset!");

// Class DragonIKPlugin.DragonIKPhysicsHolder
// 0x0018 (0x0360 - 0x0348)
class ADragonIKPhysicsHolder final : public AActor
{
public:
	uint8                                         Pad_348[0x10];                                     // 0x0348(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 connected_actor;                                   // 0x0358(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKPhysicsHolder">();
	}
	static class ADragonIKPhysicsHolder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADragonIKPhysicsHolder>();
	}
};
static_assert(alignof(ADragonIKPhysicsHolder) == 0x000008, "Wrong alignment on ADragonIKPhysicsHolder");
static_assert(sizeof(ADragonIKPhysicsHolder) == 0x000360, "Wrong size on ADragonIKPhysicsHolder");
static_assert(offsetof(ADragonIKPhysicsHolder, connected_actor) == 0x000358, "Member 'ADragonIKPhysicsHolder::connected_actor' has a wrong offset!");

// Class DragonIKPlugin.DragonIKTraceManagerComponent
// 0x0058 (0x0150 - 0x00F8)
class UDragonIKTraceManagerComponent final : public UActorComponent
{
public:
	class FName                                   read_this;                                         // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is_Enabled;                                        // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow_Spine_Trace_Lines_InGame;                    // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow_Foot_Trace_Lines_InGame;                     // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103[0x3D];                                     // 0x0103(0x003D)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const TArray<struct FDragonIKTraceKeyValuePair>& hit_data_pair)> OnDragonikFootHitData; // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void SpineSolverTraceData(const TArray<struct FDragonIKTraceKeyValuePair>& hit_data_pair);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKTraceManagerComponent">();
	}
	static class UDragonIKTraceManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKTraceManagerComponent>();
	}
};
static_assert(alignof(UDragonIKTraceManagerComponent) == 0x000008, "Wrong alignment on UDragonIKTraceManagerComponent");
static_assert(sizeof(UDragonIKTraceManagerComponent) == 0x000150, "Wrong size on UDragonIKTraceManagerComponent");
static_assert(offsetof(UDragonIKTraceManagerComponent, read_this) == 0x0000F8, "Member 'UDragonIKTraceManagerComponent::read_this' has a wrong offset!");
static_assert(offsetof(UDragonIKTraceManagerComponent, Is_Enabled) == 0x000100, "Member 'UDragonIKTraceManagerComponent::Is_Enabled' has a wrong offset!");
static_assert(offsetof(UDragonIKTraceManagerComponent, bShow_Spine_Trace_Lines_InGame) == 0x000101, "Member 'UDragonIKTraceManagerComponent::bShow_Spine_Trace_Lines_InGame' has a wrong offset!");
static_assert(offsetof(UDragonIKTraceManagerComponent, bShow_Foot_Trace_Lines_InGame) == 0x000102, "Member 'UDragonIKTraceManagerComponent::bShow_Foot_Trace_Lines_InGame' has a wrong offset!");
static_assert(offsetof(UDragonIKTraceManagerComponent, OnDragonikFootHitData) == 0x000140, "Member 'UDragonIKTraceManagerComponent::OnDragonikFootHitData' has a wrong offset!");

// Class DragonIKPlugin.DragonIKWeaponPhysicsComponent
// 0x0588 (0x0680 - 0x00F8)
class alignas(0x10) UDragonIKWeaponPhysicsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F8[0x30];                                      // 0x00F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    weapon_input_component;                            // 0x0128(0x0008)(Edit, BlueprintVisible, ExportObject, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x3D8];                                    // 0x0130(0x03D8)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   read_this;                                         // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Arm_Length_Percent;                            // 0x0510(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         physanim_tag_index;                                // 0x0514(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Strength;                                   // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Strength;                                  // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Linear_Damp;                                       // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Angular_Damp;                                      // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Interpolation_Speed;                               // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         unfreeze_speed;                                    // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          is_grabbing;                                       // 0x0530(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Teleport_Distance;                                 // 0x0534(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_538[0x148];                                    // 0x0538(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Attach_Hand_Only(class FName hand_bone, bool arm_position_recalibrate);
	void Destroy_Weapon(class AActor* Weapon);
	void DisableWeaponsArms(bool reset_weapon_transform);
	void EnableWeaponsArms();
	void FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Freeze_Elbows_Function(class FName hand_bone);
	void Grab_Weapon(class FName grabbed_bone, bool simulate_physics, bool use_gravity);
	void Multicast_Attach_Hand_Only(class FName hand_bone, bool arm_position_recalibrate);
	void Multicast_Destroy_Weapon(class AActor* Weapon);
	void Multicast_DisableWeaponsArms(bool reset_weapon_transform);
	void Multicast_EnableWeaponsArms();
	void Multicast_FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Multicast_Freeze_Elbows_Function(class FName hand_bone);
	void Multicast_Grab_Weapon(class FName grabbed_bone, bool simulate_physics, bool use_gravity);
	void Multicast_Release_Hand_Only(class FName hand_bone);
	void Multicast_Release_Hand_Plus_Override(class FName hand_bone, const struct FTransform& hand_transform, bool override_hand_location, bool Override_Hand_Rotation);
	void Multicast_Release_Weapon(bool should_simulatephysics, bool use_gravity, bool bKeep_Attachment);
	void Multicast_Unfreeze_Elbows_Function(class FName hand_bone);
	void Multicast_Weapon_Transform_Override(const struct FTransform& Weapon_Transform, bool bShould_Override_Weapon_Transform);
	void Release_Hand_Only(class FName hand_bone);
	void Release_Hand_Plus_Override(class FName hand_bone, const struct FTransform& hand_transform, bool override_hand_location, bool Override_Hand_Rotation);
	void Release_Weapon(bool should_simulatephysics, bool use_gravity, bool bKeep_Attachment);
	void Server_Attach_Hand_Only(class FName hand_bone, bool arm_position_recalibrate);
	void Server_Destroy_Weapon(class AActor* Weapon);
	void Server_DisableWeaponsArms(bool reset_weapon_transform);
	void Server_EnableWeaponsArms();
	void Server_FirstTimeInitialization(class USkeletalMeshComponent* skeleton_input);
	void Server_Freeze_Elbows_Function(class FName hand_bone);
	void Server_Grab_Weapon(class FName grabbed_bone, bool simulate_physics, bool use_gravity);
	void Server_Release_Hand_Only(class FName hand_bone);
	void Server_Release_Hand_Plus_Override(class FName hand_bone, const struct FTransform& hand_transform, bool override_hand_location, bool Override_Hand_Rotation);
	void Server_Release_Weapon(bool should_simulatephysics, bool use_gravity, bool bKeep_Attachment);
	void Server_Unfreeze_Elbows_Function(class FName hand_bone);
	void Server_Weapon_Transform_Override(const struct FTransform& Weapon_Transform, bool bShould_Override_Weapon_Transform);
	void Unfreeze_Elbows_Function(class FName hand_bone);
	void Weapon_Transform_Override(const struct FTransform& Weapon_Transform, bool bShould_Override_Weapon_Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIKWeaponPhysicsComponent">();
	}
	static class UDragonIKWeaponPhysicsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIKWeaponPhysicsComponent>();
	}
};
static_assert(alignof(UDragonIKWeaponPhysicsComponent) == 0x000010, "Wrong alignment on UDragonIKWeaponPhysicsComponent");
static_assert(sizeof(UDragonIKWeaponPhysicsComponent) == 0x000680, "Wrong size on UDragonIKWeaponPhysicsComponent");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, weapon_input_component) == 0x000128, "Member 'UDragonIKWeaponPhysicsComponent::weapon_input_component' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, read_this) == 0x000508, "Member 'UDragonIKWeaponPhysicsComponent::read_this' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Max_Arm_Length_Percent) == 0x000510, "Member 'UDragonIKWeaponPhysicsComponent::Max_Arm_Length_Percent' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, physanim_tag_index) == 0x000514, "Member 'UDragonIKWeaponPhysicsComponent::physanim_tag_index' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Linear_Strength) == 0x000518, "Member 'UDragonIKWeaponPhysicsComponent::Linear_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Angular_Strength) == 0x00051C, "Member 'UDragonIKWeaponPhysicsComponent::Angular_Strength' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Linear_Damp) == 0x000520, "Member 'UDragonIKWeaponPhysicsComponent::Linear_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Angular_Damp) == 0x000524, "Member 'UDragonIKWeaponPhysicsComponent::Angular_Damp' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Interpolation_Speed) == 0x000528, "Member 'UDragonIKWeaponPhysicsComponent::Interpolation_Speed' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, unfreeze_speed) == 0x00052C, "Member 'UDragonIKWeaponPhysicsComponent::unfreeze_speed' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, is_grabbing) == 0x000530, "Member 'UDragonIKWeaponPhysicsComponent::is_grabbing' has a wrong offset!");
static_assert(offsetof(UDragonIKWeaponPhysicsComponent, Teleport_Distance) == 0x000534, "Member 'UDragonIKWeaponPhysicsComponent::Teleport_Distance' has a wrong offset!");

// Class DragonIKPlugin.DragonIK_Library
// 0x0008 (0x0050 - 0x0048)
class UDragonIK_Library final : public UObject
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FRotator CustomLookRotation(const struct FVector& lookAt, const struct FVector& upDirection);
	static struct FRotator LookAtRotation_V3(const struct FVector& Source, const struct FVector& Target, const struct FVector& UpVector);
	static struct FRotator LookAtVector_V2(const struct FVector& Source_Location, const struct FVector& lookAt, const struct FVector& upDirection);
	static struct FTransform QuatLookXatLocation(const struct FTransform& LookAtFromTransform, const struct FVector& LookAtTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonIK_Library">();
	}
	static class UDragonIK_Library* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonIK_Library>();
	}
};
static_assert(alignof(UDragonIK_Library) == 0x000008, "Wrong alignment on UDragonIK_Library");
static_assert(sizeof(UDragonIK_Library) == 0x000050, "Wrong size on UDragonIK_Library");

}

