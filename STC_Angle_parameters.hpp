#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STC_Angle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function STC_Angle.STC_Angle_C.ReceiveTestCondition
// 0x0140 (0x0140 - 0x0000)
struct STC_Angle_C_ReceiveTestCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Diff;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(STC_Angle_C_ReceiveTestCondition) == 0x000008, "Wrong alignment on STC_Angle_C_ReceiveTestCondition");
static_assert(sizeof(STC_Angle_C_ReceiveTestCondition) == 0x000140, "Wrong size on STC_Angle_C_ReceiveTestCondition");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, ReturnValue) == 0x000000, "Member 'STC_Angle_C_ReceiveTestCondition::ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, Diff) == 0x000008, "Member 'STC_Angle_C_ReceiveTestCondition::Diff' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, Temp_real_Variable) == 0x000010, "Member 'STC_Angle_C_ReceiveTestCondition::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Abs_ReturnValue) == 0x000018, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Abs_ReturnValue_1) == 0x000020, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000028, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000038, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x00003B, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Not_PreBool_ReturnValue_1) == 0x00003C, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_GetActorForwardVector_ReturnValue) == 0x000048, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_IsValid_ReturnValue_1) == 0x000061, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BooleanAND_ReturnValue_1) == 0x000062, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000080, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000098, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BreakVector_X) == 0x0000B0, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BreakVector_Y) == 0x0000B8, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BreakVector_Z) == 0x0000C0, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_MakeVector_ReturnValue) == 0x0000C8, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Normal_ReturnValue) == 0x0000E0, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000F8, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Cross_VectorVector_ReturnValue) == 0x000100, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_DegAcos_ReturnValue) == 0x000118, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BreakVector_X_1) == 0x000120, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BreakVector_Y_1) == 0x000128, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BreakVector_Z_1) == 0x000130, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000138, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(STC_Angle_C_ReceiveTestCondition, CallFunc_BooleanAND_ReturnValue_2) == 0x000139, "Member 'STC_Angle_C_ReceiveTestCondition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

}

