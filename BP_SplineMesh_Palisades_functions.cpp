#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMesh_Palisades

#include "Basic.hpp"

#include "BP_SplineMesh_Palisades_classes.hpp"
#include "BP_SplineMesh_Palisades_parameters.hpp"


namespace SDK
{

// Function BP_SplineMesh_Palisades.BP_SplineMesh_Palisades_C.Add Meshes To Spline
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSSplineMeshEntry>&       In_Entries                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FSSplineMeshEntry&         In_Override_Entry_Start                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FSSplineMeshEntry&         In_Override_Entry_End                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineMesh_Palisades_C::Add_Meshes_To_Spline(class USplineComponent* Spline_Component, TArray<struct FSSplineMeshEntry>& In_Entries, const struct FSSplineMeshEntry& In_Override_Entry_Start, const struct FSSplineMeshEntry& In_Override_Entry_End, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineMesh_Palisades_C", "Add Meshes To Spline");

	Params::BP_SplineMesh_Palisades_C_Add_Meshes_To_Spline Parms{};

	Parms.Spline_Component = Spline_Component;
	Parms.In_Entries = std::move(In_Entries);
	Parms.In_Override_Entry_Start = std::move(In_Override_Entry_Start);
	Parms.In_Override_Entry_End = std::move(In_Override_Entry_End);

	UObject::ProcessEvent(Func, &Parms);

	In_Entries = std::move(Parms.In_Entries);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

