#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineTwistCorrect

#include "Basic.hpp"

#include "SplineTwistCorrect_classes.hpp"
#include "SplineTwistCorrect_parameters.hpp"


namespace SDK
{

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.BuildCorrectedSpline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class USplineComponent*           SplineUser                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           SplineOffset                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineFinal                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             IdealLength                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::BuildCorrectedSpline(const class USplineComponent* SplineUser, const class USplineComponent* SplineOffset, class USplineComponent* SplineFinal, const float IdealLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "BuildCorrectedSpline");

	Params::SplineTwistCorrectBPLibrary_BuildCorrectedSpline Parms{};

	Parms.SplineUser = SplineUser;
	Parms.SplineOffset = SplineOffset;
	Parms.SplineFinal = SplineFinal;
	Parms.IdealLength = IdealLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.BuildOffsetSpline
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class USplineComponent*           SplineUser                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineOffset                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RotFromUp                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             OffsetDist                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::BuildOffsetSpline(const class USplineComponent* SplineUser, class USplineComponent* SplineOffset, const float RotFromUp, const float OffsetDist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "BuildOffsetSpline");

	Params::SplineTwistCorrectBPLibrary_BuildOffsetSpline Parms{};

	Parms.SplineUser = SplineUser;
	Parms.SplineOffset = SplineOffset;
	Parms.RotFromUp = RotFromUp;
	Parms.OffsetDist = OffsetDist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.CalcRailLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USplineComponent*           Spline                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Number                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             IdealLength                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::CalcRailLength(const class USplineComponent* Spline, int32* Number, float* Length, const float IdealLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "CalcRailLength");

	Params::SplineTwistCorrectBPLibrary_CalcRailLength Parms{};

	Parms.Spline = Spline;
	Parms.IdealLength = IdealLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Number != nullptr)
		*Number = Parms.Number;

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.CalcRotFromUp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float*                                  Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           Spline                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Length                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::CalcRotFromUp(float* Rotation, const class USplineComponent* Spline, const int32 Index_0, const float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "CalcRotFromUp");

	Params::SplineTwistCorrectBPLibrary_CalcRotFromUp Parms{};

	Parms.Spline = Spline;
	Parms.Index_0 = Index_0;
	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Rotation != nullptr)
		*Rotation = Parms.Rotation;
}


// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.CalcStartEnd
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USplineComponent*           Spline                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         LocStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         TanStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         LocEnd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         TanEnd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Length                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::CalcStartEnd(const class USplineComponent* Spline, struct FVector* LocStart, struct FVector* TanStart, struct FVector* LocEnd, struct FVector* TanEnd, const int32 Index_0, const float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "CalcStartEnd");

	Params::SplineTwistCorrectBPLibrary_CalcStartEnd Parms{};

	Parms.Spline = Spline;
	Parms.Index_0 = Index_0;
	Parms.Length = Length;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LocStart != nullptr)
		*LocStart = std::move(Parms.LocStart);

	if (TanStart != nullptr)
		*TanStart = std::move(Parms.TanStart);

	if (LocEnd != nullptr)
		*LocEnd = std::move(Parms.LocEnd);

	if (TanEnd != nullptr)
		*TanEnd = std::move(Parms.TanEnd);
}


// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.ConfigSplineMesh
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32&                            Index_0                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            Length                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           SplineFinal                                            (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineMeshComponent*             SplineMesh                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FStartEndScale2&           StartEndScale                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             Roll                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::ConfigSplineMesh(const int32& Index_0, const float& Length, const class USplineComponent* SplineFinal, class USplineMeshComponent* SplineMesh, const class AActor* Actor, class UMaterialInterface* Material, class UStaticMesh* StaticMesh, const struct FStartEndScale2& StartEndScale, const float Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "ConfigSplineMesh");

	Params::SplineTwistCorrectBPLibrary_ConfigSplineMesh Parms{};

	Parms.Index_0 = Index_0;
	Parms.Length = Length;
	Parms.SplineFinal = SplineFinal;
	Parms.SplineMesh = SplineMesh;
	Parms.Actor = Actor;
	Parms.Material = Material;
	Parms.StaticMesh = StaticMesh;
	Parms.StartEndScale = std::move(StartEndScale);
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.FixTangents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class USplineComponent*           SplineUser                                             (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 SplineOffset                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineTwistCorrectBPLibrary::FixTangents(const class USplineComponent* SplineUser, class USplineComponent* SplineOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SplineTwistCorrectBPLibrary", "FixTangents");

	Params::SplineTwistCorrectBPLibrary_FixTangents Parms{};

	Parms.SplineUser = SplineUser;
	Parms.SplineOffset = SplineOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineWithMesh.AddDirectionArrows
// (Final, Native, Public, BlueprintCallable)

void USplineWithMesh::AddDirectionArrows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "AddDirectionArrows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineWithMesh.AddMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PActor                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USplineWithMesh::AddMesh(class AActor* PActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "AddMesh");

	Params::SplineWithMesh_AddMesh Parms{};

	Parms.PActor = PActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineWithMesh.AddRootToParent
// (Final, Native, Public)

void USplineWithMesh::AddRootToParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "AddRootToParent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineWithMesh.GetRollMesh
// (Final, Native, Public)
// Parameters:
// int32                                   I                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USplineWithMesh::GetRollMesh(int32 I)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "GetRollMesh");

	Params::SplineWithMesh_GetRollMesh Parms{};

	Parms.I = I;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SplineTwistCorrect.SplineWithMesh.GetScaleMesh
// (Final, Native, Public)
// Parameters:
// int32                                   I                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FStartEndScale2                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FStartEndScale2 USplineWithMesh::GetScaleMesh(int32 I)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "GetScaleMesh");

	Params::SplineWithMesh_GetScaleMesh Parms{};

	Parms.I = I;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SplineTwistCorrect.SplineWithMesh.RemoveDirectionArrows
// (Final, Native, Public, BlueprintCallable)

void USplineWithMesh::RemoveDirectionArrows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "RemoveDirectionArrows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.SplineWithMesh.RemoveMesh
// (Final, Native, Public, BlueprintCallable)

void USplineWithMesh::RemoveMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineWithMesh", "RemoveMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SplineTwistCorrect.STC_MathFunctions.CalcIcosahedron
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>*                 Vertices                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const float                             Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USTC_MathFunctions::CalcIcosahedron(TArray<struct FVector>* Vertices, const float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("STC_MathFunctions", "CalcIcosahedron");

	Params::STC_MathFunctions_CalcIcosahedron Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Vertices != nullptr)
		*Vertices = std::move(Parms.Vertices);
}


// Function SplineTwistCorrect.STC_MathFunctions.FindNextSplineLocation
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         NextLocation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         NextUpVector                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SegmentLength                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LastLocation                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LastDirection                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Seed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USTC_MathFunctions::FindNextSplineLocation(class UObject* WorldContextObject, struct FVector* NextLocation, struct FVector* NextUpVector, const float SegmentLength, const struct FVector& LastLocation, const struct FVector& LastDirection, const int32 Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("STC_MathFunctions", "FindNextSplineLocation");

	Params::STC_MathFunctions_FindNextSplineLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SegmentLength = SegmentLength;
	Parms.LastLocation = std::move(LastLocation);
	Parms.LastDirection = std::move(LastDirection);
	Parms.Seed = Seed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NextLocation != nullptr)
		*NextLocation = std::move(Parms.NextLocation);

	if (NextUpVector != nullptr)
		*NextUpVector = std::move(Parms.NextUpVector);

	return Parms.ReturnValue;
}

}

