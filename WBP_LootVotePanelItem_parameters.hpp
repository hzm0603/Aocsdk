#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_LootVotePanelItem

#include "Basic.hpp"

#include "GameSystemsPlugin_structs.hpp"


namespace SDK::Params
{

// Function WBP_LootVotePanelItem.WBP_LootVotePanelItem_C.SetData
// 0x01C8 (0x01C8 - 0x0000)
struct WBP_LootVotePanelItem_C_SetData final
{
public:
	ELootAllocationTier                           Tier;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELootAllocationMethod                         From;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELootAllocationMethod                         To;                                                // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELootAllocationMethod                         Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)()
	ELootAllocationMethod                         Temp_byte_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0070(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0088(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00B8(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D0(0x0018)()
	ELootAllocationTier                           Temp_byte_Variable_2;                              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0120(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0198(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x01B0(0x0018)()
};
static_assert(alignof(WBP_LootVotePanelItem_C_SetData) == 0x000008, "Wrong alignment on WBP_LootVotePanelItem_C_SetData");
static_assert(sizeof(WBP_LootVotePanelItem_C_SetData) == 0x0001C8, "Wrong size on WBP_LootVotePanelItem_C_SetData");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Tier) == 0x000000, "Member 'WBP_LootVotePanelItem_C_SetData::Tier' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, From) == 0x000001, "Member 'WBP_LootVotePanelItem_C_SetData::From' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, To) == 0x000002, "Member 'WBP_LootVotePanelItem_C_SetData::To' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_byte_Variable) == 0x000003, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable) == 0x000008, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_1) == 0x000020, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_2) == 0x000038, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_3) == 0x000050, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_byte_Variable_1) == 0x000068, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, K2Node_Select_Default) == 0x000070, "Member 'WBP_LootVotePanelItem_C_SetData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_4) == 0x000088, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_5) == 0x0000A0, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_6) == 0x0000B8, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_7) == 0x0000D0, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_byte_Variable_2) == 0x0000E8, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, K2Node_Select_Default_1) == 0x0000F0, "Member 'WBP_LootVotePanelItem_C_SetData::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_8) == 0x000108, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_9) == 0x000120, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_10) == 0x000138, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_11) == 0x000150, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_12) == 0x000168, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_13) == 0x000180, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, Temp_text_Variable_14) == 0x000198, "Member 'WBP_LootVotePanelItem_C_SetData::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetData, K2Node_Select_Default_2) == 0x0001B0, "Member 'WBP_LootVotePanelItem_C_SetData::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_LootVotePanelItem.WBP_LootVotePanelItem_C.SetDefaultData
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_LootVotePanelItem_C_SetDefaultData final
{
public:
	EDefaultLootAllocationMethod                  From;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDefaultLootAllocationMethod                  To;                                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDefaultLootAllocationMethod                  Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	EDefaultLootAllocationMethod                  Temp_byte_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0070(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0088(0x0018)()
};
static_assert(alignof(WBP_LootVotePanelItem_C_SetDefaultData) == 0x000008, "Wrong alignment on WBP_LootVotePanelItem_C_SetDefaultData");
static_assert(sizeof(WBP_LootVotePanelItem_C_SetDefaultData) == 0x0000A0, "Wrong size on WBP_LootVotePanelItem_C_SetDefaultData");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, From) == 0x000000, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::From' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, To) == 0x000001, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::To' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, Temp_byte_Variable) == 0x000002, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, Temp_text_Variable) == 0x000008, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, Temp_text_Variable_1) == 0x000020, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, Temp_byte_Variable_1) == 0x000038, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, K2Node_Select_Default) == 0x000040, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, Temp_text_Variable_2) == 0x000058, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, Temp_text_Variable_3) == 0x000070, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_LootVotePanelItem_C_SetDefaultData, K2Node_Select_Default_1) == 0x000088, "Member 'WBP_LootVotePanelItem_C_SetDefaultData::K2Node_Select_Default_1' has a wrong offset!");

}

