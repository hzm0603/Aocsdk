#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STC_CircleAOETargetSelector

#include "Basic.hpp"

#include "StateTreeModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass STC_CircleAOETargetSelector.STC_CircleAOETargetSelector_C
// 0x0030 (0x0098 - 0x0068)
class USTC_CircleAOETargetSelector_C final : public UStateTreeConditionBlueprintBase
{
public:
	class ANPCPawn_C*                             Agent;                                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Radius;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinTargetDis;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTargetDis;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SingleTargetMinScore;                              // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BB_Storage;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool ReceiveTestCondition() const;
	void Score_Individual_Target(class ABaseCharacter* TargetToScore, const struct FVector& ImpactLocation, double* Score) const;
	void Score_Target(class ABaseCharacter* Target_To_Score, double* Score) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STC_CircleAOETargetSelector_C">();
	}
	static class USTC_CircleAOETargetSelector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTC_CircleAOETargetSelector_C>();
	}
};
static_assert(alignof(USTC_CircleAOETargetSelector_C) == 0x000008, "Wrong alignment on USTC_CircleAOETargetSelector_C");
static_assert(sizeof(USTC_CircleAOETargetSelector_C) == 0x000098, "Wrong size on USTC_CircleAOETargetSelector_C");
static_assert(offsetof(USTC_CircleAOETargetSelector_C, Agent) == 0x000068, "Member 'USTC_CircleAOETargetSelector_C::Agent' has a wrong offset!");
static_assert(offsetof(USTC_CircleAOETargetSelector_C, Radius) == 0x000070, "Member 'USTC_CircleAOETargetSelector_C::Radius' has a wrong offset!");
static_assert(offsetof(USTC_CircleAOETargetSelector_C, MinTargetDis) == 0x000078, "Member 'USTC_CircleAOETargetSelector_C::MinTargetDis' has a wrong offset!");
static_assert(offsetof(USTC_CircleAOETargetSelector_C, MaxTargetDis) == 0x000080, "Member 'USTC_CircleAOETargetSelector_C::MaxTargetDis' has a wrong offset!");
static_assert(offsetof(USTC_CircleAOETargetSelector_C, SingleTargetMinScore) == 0x000088, "Member 'USTC_CircleAOETargetSelector_C::SingleTargetMinScore' has a wrong offset!");
static_assert(offsetof(USTC_CircleAOETargetSelector_C, BB_Storage) == 0x000090, "Member 'USTC_CircleAOETargetSelector_C::BB_Storage' has a wrong offset!");

}

