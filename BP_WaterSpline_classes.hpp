#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterSpline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GeometryScriptingCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterSpline.BP_WaterSpline_C
// 0x01E8 (0x0530 - 0x0348)
class ABP_WaterSpline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       PaddedSpline;                                      // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Audio_Holder;                                      // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   AKAmbientSource;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DisplayMeshSTATIC;                                 // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  Display_Mesh;                                      // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterLake_C*                        LakeBP;                                            // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_WaterSpline_C*                      SplineBP;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Snap_At_End;                                       // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spline_Width;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        River_Speed;                                       // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Trigger_Depth;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dist_Between_Segments__M_;                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Preview_Mesh_Segments;                             // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Spline_Width_Divisions;                            // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UV_Length_Scale;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Data_Mesh_Padding;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Velocity_Sample_Scatter_Dist;                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      Positions;                                         // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                UVs;                                               // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTransform>                     Frames;                                            // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Frame_Times;                                       // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGeometryScriptColorList               VertColors;                                        // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Water_Sort_Priority;                               // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Water_Display_Material;                            // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshPool*                       Dynamic_Mesh_Pool;                                 // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Snap_Second_Point;                                 // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Start_and_End_Markers_;                       // 0x0459(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45A[0x6];                                      // 0x045A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WaterMeshGenPath;                                  // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMesh*                            StaticDisplayMesh;                                 // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Meshes_Baked_;                                     // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Meshes_BakedPrev;                                  // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Checksum;                                          // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         PrevChecksum;                                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevLength;                                        // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Round_Endpoints;                               // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fade_out_at_Start_;                                // 0x0495(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fade_out_at_End_;                                  // 0x0496(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_UNBAKED_Markers_;                             // 0x0497(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_PPV_Height_Offset;                           // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAkAudioEvent*>                  AKEventEmitters;                                   // 0x04A0(0x0010)(Edit, BlueprintVisible)
	bool                                          Debug_Audio;                                       // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowPlayerElevation;                             // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B2[0x6];                                      // 0x04B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTextRenderComponent*>           BakeMarkers;                                       // 0x04B8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	bool                                          Override_Water_Color_;                             // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Display_MID;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Water_Color;                                       // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scattering_Intensity;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Absorbtion_Intensity;                              // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Water_Minimap_Material;                            // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGatheringInteractionDataId            FishingData;                                       // 0x0500(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Volume_Transforms;                                 // 0x0518(0x0010)(Edit, BlueprintVisible)
	bool                                          BakingMeshes_;                                     // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invalidated;                                       // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Swim_Volumes();
	void Align_Edge_Spline(class USplineComponent* Spline_0);
	void Bake_Mesh(class UDynamicMeshComponent* Dynamic_Mesh, class UMaterialInterface* Material, const class FString& Asset_Tag, class UStaticMesh** Out_SM);
	void Bake_UVs(class UDynamicMeshComponent* DynMesh);
	void Bake_Vertex_Colors(class UDynamicMeshComponent* DynMesh);
	void Bake_Water_Meshes();
	void Build_Display_Mesh(TArray<struct FVector2D>& PolylineVerts, TArray<struct FTransform>& SweepPath, TArray<double>& U, TArray<double>& V);
	void Build_Profile_for_Spline(double Width, int32 Divisions, TArray<struct FVector2D>* Positions_0, TArray<double>* UVs_0);
	void Check_if_Mesh_Asset_Exists(const class FString& Asset_Name, bool* Exists_, class UStaticMesh** Return_Mesh);
	void CheckInvalidateMeshes(bool* Invalidated_0);
	void Decompose_To_Volume_Transforms(double MinimumVolumeLength, double BendTolerance, double PitchTolerance, double RollTolerance);
	void Editor_Water_Tick();
	void Editor_Water_Update();
	void ExecuteUbergraph_BP_WaterSpline(int32 EntryPoint);
	void Fix_Up_Meshes();
	void Get_Current_at_Location(const struct FVector& World_Location, struct FVector2D* Current_Velocity);
	void Get_Samples_From_Spline(const class USplineComponent* Spline_0, double Spacing, TArray<struct FTransform>* Frames_0, TArray<double>* FrameTimes);
	void Get_Spline_Dir_From_Local_Position(class USplineComponent* Spline_0, const struct FVector& LocalPosition, struct FVector* SplineDir);
	void GetControlledPawnLocation(struct FVector* ControlledPawnLocation);
	void GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation);
	class USplineComponent* GetSplineComponent();
	class USceneComponent* GetSplineEmitterComponent();
	void Init_Padded_Spline();
	void Intersect_Lines(const struct FVector2D& P0, const struct FVector2D& P1, const struct FVector2D& P2, const struct FVector2D& P3, struct FVector2D* Intersection_Point, bool* Intersected_);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void Refresh_Water_Info();
	void Refresh_Water_Info_Delayed();
	void Remove_Spline_Loops(class USplineComponent* InSpline);
	void RenderingMinimap(bool Rendering);
	void Setup_StaticMesh(class UStaticMesh* Mesh, class UStaticMeshComponent* Component, class UStaticMesh*& Var);
	void SetupDebug();
	void Snap_Spline_To_Lake_Edge();
	void Snap_Spline_To_Spline();
	void UnwindRadians(double R, double* Out);
	void Update_Dynamic_Meshes();
	void Update_Mesh_Visibility();
	void Update_Static_Meshes();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterSpline_C">();
	}
	static class ABP_WaterSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterSpline_C>();
	}
};
static_assert(alignof(ABP_WaterSpline_C) == 0x000008, "Wrong alignment on ABP_WaterSpline_C");
static_assert(sizeof(ABP_WaterSpline_C) == 0x000530, "Wrong size on ABP_WaterSpline_C");
static_assert(offsetof(ABP_WaterSpline_C, UberGraphFrame) == 0x000348, "Member 'ABP_WaterSpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, PaddedSpline) == 0x000350, "Member 'ABP_WaterSpline_C::PaddedSpline' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Billboard) == 0x000358, "Member 'ABP_WaterSpline_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Audio_Holder) == 0x000360, "Member 'ABP_WaterSpline_C::Audio_Holder' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, AKAmbientSource) == 0x000368, "Member 'ABP_WaterSpline_C::AKAmbientSource' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, DisplayMeshSTATIC) == 0x000370, "Member 'ABP_WaterSpline_C::DisplayMeshSTATIC' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Display_Mesh) == 0x000378, "Member 'ABP_WaterSpline_C::Display_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Spline) == 0x000380, "Member 'ABP_WaterSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, DefaultSceneRoot) == 0x000388, "Member 'ABP_WaterSpline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, LakeBP) == 0x000390, "Member 'ABP_WaterSpline_C::LakeBP' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, SplineBP) == 0x000398, "Member 'ABP_WaterSpline_C::SplineBP' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Snap_At_End) == 0x0003A0, "Member 'ABP_WaterSpline_C::Snap_At_End' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Spline_Width) == 0x0003A8, "Member 'ABP_WaterSpline_C::Spline_Width' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, River_Speed) == 0x0003B0, "Member 'ABP_WaterSpline_C::River_Speed' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Water_Trigger_Depth) == 0x0003B8, "Member 'ABP_WaterSpline_C::Water_Trigger_Depth' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Dist_Between_Segments__M_) == 0x0003C0, "Member 'ABP_WaterSpline_C::Dist_Between_Segments__M_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Preview_Mesh_Segments) == 0x0003C8, "Member 'ABP_WaterSpline_C::Preview_Mesh_Segments' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Spline_Width_Divisions) == 0x0003D0, "Member 'ABP_WaterSpline_C::Spline_Width_Divisions' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, UV_Length_Scale) == 0x0003D8, "Member 'ABP_WaterSpline_C::UV_Length_Scale' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Data_Mesh_Padding) == 0x0003E0, "Member 'ABP_WaterSpline_C::Data_Mesh_Padding' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Velocity_Sample_Scatter_Dist) == 0x0003E8, "Member 'ABP_WaterSpline_C::Velocity_Sample_Scatter_Dist' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Positions) == 0x0003F0, "Member 'ABP_WaterSpline_C::Positions' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, UVs) == 0x000400, "Member 'ABP_WaterSpline_C::UVs' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Frames) == 0x000410, "Member 'ABP_WaterSpline_C::Frames' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Frame_Times) == 0x000420, "Member 'ABP_WaterSpline_C::Frame_Times' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, VertColors) == 0x000430, "Member 'ABP_WaterSpline_C::VertColors' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Water_Sort_Priority) == 0x000440, "Member 'ABP_WaterSpline_C::Water_Sort_Priority' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Water_Display_Material) == 0x000448, "Member 'ABP_WaterSpline_C::Water_Display_Material' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Dynamic_Mesh_Pool) == 0x000450, "Member 'ABP_WaterSpline_C::Dynamic_Mesh_Pool' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Snap_Second_Point) == 0x000458, "Member 'ABP_WaterSpline_C::Snap_Second_Point' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Show_Start_and_End_Markers_) == 0x000459, "Member 'ABP_WaterSpline_C::Show_Start_and_End_Markers_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, WaterMeshGenPath) == 0x000460, "Member 'ABP_WaterSpline_C::WaterMeshGenPath' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, StaticDisplayMesh) == 0x000470, "Member 'ABP_WaterSpline_C::StaticDisplayMesh' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Meshes_Baked_) == 0x000478, "Member 'ABP_WaterSpline_C::Meshes_Baked_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Meshes_BakedPrev) == 0x000479, "Member 'ABP_WaterSpline_C::Meshes_BakedPrev' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Checksum) == 0x000480, "Member 'ABP_WaterSpline_C::Checksum' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, PrevChecksum) == 0x000488, "Member 'ABP_WaterSpline_C::PrevChecksum' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, PrevLength) == 0x000490, "Member 'ABP_WaterSpline_C::PrevLength' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Use_Round_Endpoints) == 0x000494, "Member 'ABP_WaterSpline_C::Use_Round_Endpoints' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Fade_out_at_Start_) == 0x000495, "Member 'ABP_WaterSpline_C::Fade_out_at_Start_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Fade_out_at_End_) == 0x000496, "Member 'ABP_WaterSpline_C::Fade_out_at_End_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Show_UNBAKED_Markers_) == 0x000497, "Member 'ABP_WaterSpline_C::Show_UNBAKED_Markers_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Water_PPV_Height_Offset) == 0x000498, "Member 'ABP_WaterSpline_C::Water_PPV_Height_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, AKEventEmitters) == 0x0004A0, "Member 'ABP_WaterSpline_C::AKEventEmitters' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Debug_Audio) == 0x0004B0, "Member 'ABP_WaterSpline_C::Debug_Audio' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, FollowPlayerElevation) == 0x0004B1, "Member 'ABP_WaterSpline_C::FollowPlayerElevation' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, BakeMarkers) == 0x0004B8, "Member 'ABP_WaterSpline_C::BakeMarkers' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Override_Water_Color_) == 0x0004C8, "Member 'ABP_WaterSpline_C::Override_Water_Color_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Display_MID) == 0x0004D0, "Member 'ABP_WaterSpline_C::Display_MID' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Water_Color) == 0x0004D8, "Member 'ABP_WaterSpline_C::Water_Color' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Scattering_Intensity) == 0x0004E8, "Member 'ABP_WaterSpline_C::Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Absorbtion_Intensity) == 0x0004F0, "Member 'ABP_WaterSpline_C::Absorbtion_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Water_Minimap_Material) == 0x0004F8, "Member 'ABP_WaterSpline_C::Water_Minimap_Material' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, FishingData) == 0x000500, "Member 'ABP_WaterSpline_C::FishingData' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Volume_Transforms) == 0x000518, "Member 'ABP_WaterSpline_C::Volume_Transforms' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, BakingMeshes_) == 0x000528, "Member 'ABP_WaterSpline_C::BakingMeshes_' has a wrong offset!");
static_assert(offsetof(ABP_WaterSpline_C, Invalidated) == 0x000529, "Member 'ABP_WaterSpline_C::Invalidated' has a wrong offset!");

}

