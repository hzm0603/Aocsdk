#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeatherManager

#include "Basic.hpp"

#include "BP_WeatherManager_classes.hpp"
#include "BP_WeatherManager_parameters.hpp"


namespace SDK
{

// Function BP_WeatherManager.BP_WeatherManager_C.Add Global Noise To Climate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSingleDayClimate                Singular_Day_Climate                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  TOD_for_Curves                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  In_TOY_in_hours                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_Temp_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Amount_of_Precipitation                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_Humidity                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::Add_Global_Noise_To_Climate(const struct FSingleDayClimate& Singular_Day_Climate, double TOD_for_Curves, double In_TOY_in_hours, double* Current_Temp_0, double* Amount_of_Precipitation, double* Current_Humidity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Add Global Noise To Climate");

	Params::BP_WeatherManager_C_Add_Global_Noise_To_Climate Parms{};

	Parms.Singular_Day_Climate = std::move(Singular_Day_Climate);
	Parms.TOD_for_Curves = TOD_for_Curves;
	Parms.In_TOY_in_hours = In_TOY_in_hours;

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Temp_0 != nullptr)
		*Current_Temp_0 = Parms.Current_Temp_0;

	if (Amount_of_Precipitation != nullptr)
		*Amount_of_Precipitation = Parms.Amount_of_Precipitation;

	if (Current_Humidity != nullptr)
		*Current_Humidity = Parms.Current_Humidity;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Dew Point
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Current_Temp_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_Humidity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DewPoint                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::Calculate_Dew_Point(double Current_Temp_0, double Current_Humidity, double* DewPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Calculate Dew Point");

	Params::BP_WeatherManager_C_Calculate_Dew_Point Parms{};

	Parms.Current_Temp_0 = Current_Temp_0;
	Parms.Current_Humidity = Current_Humidity;

	UObject::ProcessEvent(Func, &Parms);

	if (DewPoint != nullptr)
		*DewPoint = Parms.DewPoint;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Calculate Weness
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Precipitation_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_WeatherManager_C::Calculate_Weness(double Precipitation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Calculate Weness");

	Params::BP_WeatherManager_C_Calculate_Weness Parms{};

	Parms.Precipitation_0 = Precipitation_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Cloud DA to Struct
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBPDA_CloudPreset_C*              Cloud_DA_in                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          StructOut                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::Cloud_DA_to_Struct(class UBPDA_CloudPreset_C* Cloud_DA_in, struct FSTRUCT_CloudParameters* StructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Cloud DA to Struct");

	Params::BP_WeatherManager_C_Cloud_DA_to_Struct Parms{};

	Parms.Cloud_DA_in = Cloud_DA_in;

	UObject::ProcessEvent(Func, &Parms);

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);
}


// Function BP_WeatherManager.BP_WeatherManager_C.Cloud Logic
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Humidity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Chance_Of_Precipitation                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DEBUG_Alpha_for_Blend                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cloud_Vis_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          StructOut                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVerraGlobalSkyVolumetricCloudSettingsReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor)

struct FVerraGlobalSkyVolumetricCloudSettings ABP_WeatherManager_C::Cloud_Logic(double Humidity, double Chance_Of_Precipitation, double* DEBUG_Alpha_for_Blend, bool* Cloud_Vis_0, struct FSTRUCT_CloudParameters* StructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Cloud Logic");

	Params::BP_WeatherManager_C_Cloud_Logic Parms{};

	Parms.Humidity = Humidity;
	Parms.Chance_Of_Precipitation = Chance_Of_Precipitation;

	UObject::ProcessEvent(Func, &Parms);

	if (DEBUG_Alpha_for_Blend != nullptr)
		*DEBUG_Alpha_for_Blend = Parms.DEBUG_Alpha_for_Blend;

	if (Cloud_Vis_0 != nullptr)
		*Cloud_Vis_0 = Parms.Cloud_Vis_0;

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);

	return Parms.ReturnValue;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Determine Month
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  In_Year                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_WeatherManager_C::Determine_Month(double In_Year)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Determine Month");

	Params::BP_WeatherManager_C_Determine_Month Parms{};

	Parms.In_Year = In_Year;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeatherManager.BP_WeatherManager_C.LERP Clouds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPDA_CloudPreset_C*              Clouds_1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBPDA_CloudPreset_C*              Clouds_2                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ALPHA                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPDA_CloudPreset_C*              Cloud_Blend                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          Cloud_Struct_IN                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    because_im_lazy_and_i_said_so                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPDA_CloudPreset_C*              OutputPin                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          Cloud_Struct_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::LERP_Clouds(class UBPDA_CloudPreset_C* Clouds_1, class UBPDA_CloudPreset_C* Clouds_2, double ALPHA, class UBPDA_CloudPreset_C* Cloud_Blend, const struct FSTRUCT_CloudParameters& Cloud_Struct_IN, bool because_im_lazy_and_i_said_so, class UBPDA_CloudPreset_C** OutputPin, struct FSTRUCT_CloudParameters* Cloud_Struct_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "LERP Clouds");

	Params::BP_WeatherManager_C_LERP_Clouds Parms{};

	Parms.Clouds_1 = Clouds_1;
	Parms.Clouds_2 = Clouds_2;
	Parms.ALPHA = ALPHA;
	Parms.Cloud_Blend = Cloud_Blend;
	Parms.Cloud_Struct_IN = std::move(Cloud_Struct_IN);
	Parms.because_im_lazy_and_i_said_so = because_im_lazy_and_i_said_so;

	UObject::ProcessEvent(Func, &Parms);

	if (OutputPin != nullptr)
		*OutputPin = Parms.OutputPin;

	if (Cloud_Struct_0 != nullptr)
		*Cloud_Struct_0 = std::move(Parms.Cloud_Struct_0);
}


// Function BP_WeatherManager.BP_WeatherManager_C.LERP Clouds2
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ALPHA                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FString, struct FSTRUCT_CloudParameters>CloudPack_0                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Cloud_A_Index                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Cloud_B_Index                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Use_Previous_Struct                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          Previous_Cloud_Blend                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          StructOut                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::LERP_Clouds2(double ALPHA, const TMap<class FString, struct FSTRUCT_CloudParameters>& CloudPack_0, int32 Cloud_A_Index, int32 Cloud_B_Index, bool Use_Previous_Struct, const struct FSTRUCT_CloudParameters& Previous_Cloud_Blend, struct FSTRUCT_CloudParameters* StructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "LERP Clouds2");

	Params::BP_WeatherManager_C_LERP_Clouds2 Parms{};

	Parms.ALPHA = ALPHA;
	Parms.CloudPack_0 = std::move(CloudPack_0);
	Parms.Cloud_A_Index = Cloud_A_Index;
	Parms.Cloud_B_Index = Cloud_B_Index;
	Parms.Use_Previous_Struct = Use_Previous_Struct;
	Parms.Previous_Cloud_Blend = std::move(Previous_Cloud_Blend);

	UObject::ProcessEvent(Func, &Parms);

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);
}


// Function BP_WeatherManager.BP_WeatherManager_C.NatrualLog
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Target_Number                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::NatrualLog(double Target_Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "NatrualLog");

	Params::BP_WeatherManager_C_NatrualLog Parms{};

	Parms.Target_Number = Target_Number;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeatherManager.BP_WeatherManager_C.Precip Logic
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSTRUCT_SingularClimateData      Singular_Biome_Climate_0                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_Temp_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_AMOUNT_of_Precip                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_Humidity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBPDA_CloudPreset_C*              Value                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_SingularClimateData      Singular_Biome_Climate1                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Output_Get                                             (Parm, OutParm)
// bool                                    Should_Precipitate_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::Precip_Logic(const struct FSTRUCT_SingularClimateData& Singular_Biome_Climate_0, double Current_Temp_0, double Current_AMOUNT_of_Precip, double Current_Humidity, class UBPDA_CloudPreset_C** Value, struct FSTRUCT_SingularClimateData* Singular_Biome_Climate1, class FText* Output_Get, bool* Should_Precipitate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Precip Logic");

	Params::BP_WeatherManager_C_Precip_Logic Parms{};

	Parms.Singular_Biome_Climate_0 = std::move(Singular_Biome_Climate_0);
	Parms.Current_Temp_0 = Current_Temp_0;
	Parms.Current_AMOUNT_of_Precip = Current_AMOUNT_of_Precip;
	Parms.Current_Humidity = Current_Humidity;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;

	if (Singular_Biome_Climate1 != nullptr)
		*Singular_Biome_Climate1 = std::move(Parms.Singular_Biome_Climate1);

	if (Output_Get != nullptr)
		*Output_Get = std::move(Parms.Output_Get);

	if (Should_Precipitate_0 != nullptr)
		*Should_Precipitate_0 = Parms.Should_Precipitate_0;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Random Chance Of Precip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  In_Float                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  In_TOY_in_hours                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Post_Noise                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::Random_Chance_Of_Precip(double In_Float, double In_TOY_in_hours, double* Post_Noise)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Random Chance Of Precip");

	Params::BP_WeatherManager_C_Random_Chance_Of_Precip Parms{};

	Parms.In_Float = In_Float;
	Parms.In_TOY_in_hours = In_TOY_in_hours;

	UObject::ProcessEvent(Func, &Parms);

	if (Post_Noise != nullptr)
		*Post_Noise = Parms.Post_Noise;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Reset Temp Test
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::Reset_Temp_Test()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Reset Temp Test");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.Run Weather BP Functions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSingleDayClimate                Singular_Day_Climate                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  TOD_for_Curves                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  In_TOY_in_hours                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OverridePrecip                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OverrideHumidity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NormalizePrecipitation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NormalizedTemperature                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Humidity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DewPoint                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DEBUG_CurrentTemp                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DEBUG_Precipitation_Amount                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DEBUG_CurrentHumidity                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cloud_Vis_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_CloudParameters          StructOut                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVerraGlobalSkyVolumetricCloudSettingsCloudScenarioStructOut                                 (Parm, OutParm, NoDestructor)
// TMap<class FName, float>                ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<class FName, float> ABP_WeatherManager_C::Run_Weather_BP_Functions(const struct FSingleDayClimate& Singular_Day_Climate, double TOD_for_Curves, double In_TOY_in_hours, bool OverridePrecip, bool OverrideHumidity, double* NormalizePrecipitation, double* NormalizedTemperature, double* Humidity, double* DewPoint, double* DEBUG_CurrentTemp, double* DEBUG_Precipitation_Amount, double* DEBUG_CurrentHumidity, bool* Cloud_Vis_0, struct FSTRUCT_CloudParameters* StructOut, struct FVerraGlobalSkyVolumetricCloudSettings* CloudScenarioStructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Run Weather BP Functions");

	Params::BP_WeatherManager_C_Run_Weather_BP_Functions Parms{};

	Parms.Singular_Day_Climate = std::move(Singular_Day_Climate);
	Parms.TOD_for_Curves = TOD_for_Curves;
	Parms.In_TOY_in_hours = In_TOY_in_hours;
	Parms.OverridePrecip = OverridePrecip;
	Parms.OverrideHumidity = OverrideHumidity;

	UObject::ProcessEvent(Func, &Parms);

	if (NormalizePrecipitation != nullptr)
		*NormalizePrecipitation = Parms.NormalizePrecipitation;

	if (NormalizedTemperature != nullptr)
		*NormalizedTemperature = Parms.NormalizedTemperature;

	if (Humidity != nullptr)
		*Humidity = Parms.Humidity;

	if (DewPoint != nullptr)
		*DewPoint = Parms.DewPoint;

	if (DEBUG_CurrentTemp != nullptr)
		*DEBUG_CurrentTemp = Parms.DEBUG_CurrentTemp;

	if (DEBUG_Precipitation_Amount != nullptr)
		*DEBUG_Precipitation_Amount = Parms.DEBUG_Precipitation_Amount;

	if (DEBUG_CurrentHumidity != nullptr)
		*DEBUG_CurrentHumidity = Parms.DEBUG_CurrentHumidity;

	if (Cloud_Vis_0 != nullptr)
		*Cloud_Vis_0 = Parms.Cloud_Vis_0;

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);

	if (CloudScenarioStructOut != nullptr)
		*CloudScenarioStructOut = std::move(Parms.CloudScenarioStructOut);

	return Parms.ReturnValue;
}


// Function BP_WeatherManager.BP_WeatherManager_C.Select Cloud Set
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::Select_Cloud_Set()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Select Cloud Set");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.Set Days Climate Data
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_BiomeClimate             Biome_Data_Struct_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// double                                  Min                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Max                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSTRUCT_SingularClimateData      StructOut                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeatherManager_C::Set_Days_Climate_Data(const struct FStruct_BiomeClimate& Biome_Data_Struct_0, double* Min, double* Max, struct FSTRUCT_SingularClimateData* StructOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "Set Days Climate Data");

	Params::BP_WeatherManager_C_Set_Days_Climate_Data Parms{};

	Parms.Biome_Data_Struct_0 = std::move(Biome_Data_Struct_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Min != nullptr)
		*Min = Parms.Min;

	if (Max != nullptr)
		*Max = Parms.Max;

	if (StructOut != nullptr)
		*StructOut = std::move(Parms.StructOut);
}


// Function BP_WeatherManager.BP_WeatherManager_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeatherManager.BP_WeatherManager_C.WeatherOffsetMap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_WeatherManager_C::WeatherOffsetMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeatherManager_C", "WeatherOffsetMap");

	UObject::ProcessEvent(Func, nullptr);
}

}

