#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Kae_Windmill

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Kae_Windmill.BP_Kae_Windmill_C.ExecuteUbergraph_BP_Kae_Windmill
// 0x0138 (0x0138 - 0x0000)
struct BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEventAndWaitForEnd_ReturnValue;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill) == 0x000008, "Wrong alignment on BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill");
static_assert(sizeof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill) == 0x000138, "Wrong size on BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, EntryPoint) == 0x000000, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_PostAkEventAndWaitForEnd_ReturnValue) == 0x000004, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_PostAkEventAndWaitForEnd_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_IsServer_ReturnValue) == 0x00000C, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000040, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000128, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000130, "Member 'BP_Kae_Windmill_C_ExecuteUbergraph_BP_Kae_Windmill::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_Kae_Windmill.BP_Kae_Windmill_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Kae_Windmill_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Kae_Windmill_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Kae_Windmill_C_ReceiveTick");
static_assert(sizeof(BP_Kae_Windmill_C_ReceiveTick) == 0x000004, "Wrong size on BP_Kae_Windmill_C_ReceiveTick");
static_assert(offsetof(BP_Kae_Windmill_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Kae_Windmill_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

