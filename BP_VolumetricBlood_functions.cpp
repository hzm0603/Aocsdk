#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricBlood

#include "Basic.hpp"

#include "BP_VolumetricBlood_classes.hpp"
#include "BP_VolumetricBlood_parameters.hpp"


namespace SDK
{

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.CalculateFalloff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_VolumetricBlood_C::CalculateFalloff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "CalculateFalloff");

	Params::BP_VolumetricBlood_C_CalculateFalloff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.CheckForWindActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   WindActorExists                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AWindDirectionalSource**          WindActor                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_VolumetricBlood_C::CheckForWindActor(bool* WindActorExists, class AWindDirectionalSource** WindActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "CheckForWindActor");

	Params::BP_VolumetricBlood_C_CheckForWindActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WindActorExists != nullptr)
		*WindActorExists = Parms.WindActorExists;

	if (WindActor != nullptr)
		*WindActor = Parms.WindActor;
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ControlWindArrow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::ControlWindArrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "ControlWindArrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.CreateMID
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::CreateMID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "CreateMID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ExecuteUbergraph_BP_VolumetricBlood
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VolumetricBlood_C::ExecuteUbergraph_BP_VolumetricBlood(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "ExecuteUbergraph_BP_VolumetricBlood");

	Params::BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.GatherConfigVariables
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::GatherConfigVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "GatherConfigVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.GetWindDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         WindDirection                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Changed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_VolumetricBlood_C::GetWindDirection(struct FVector* WindDirection, bool* Changed, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "GetWindDirection");

	Params::BP_VolumetricBlood_C_GetWindDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WindDirection != nullptr)
		*WindDirection = std::move(Parms.WindDirection);

	if (Changed != nullptr)
		*Changed = Parms.Changed;

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.OneTimeAreaScaleFix
// (BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::OneTimeAreaScaleFix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "OneTimeAreaScaleFix");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_VolumetricBlood_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VolumetricBlood_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "ReceiveTick");

	Params::BP_VolumetricBlood_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.Refresh
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.RefreshAnimatedParameters
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::RefreshAnimatedParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "RefreshAnimatedParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.SetAnimPosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AnimPosition_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VolumetricBlood_C::SetAnimPosition(double AnimPosition_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "SetAnimPosition");

	Params::BP_VolumetricBlood_C_SetAnimPosition Parms{};

	Parms.AnimPosition_0 = AnimPosition_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.SetAreaScale
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::SetAreaScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "SetAreaScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.SetRenderingLimits
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::SetRenderingLimits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "SetRenderingLimits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.TestAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::TestAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "TestAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.Timeline_TestAnimateIn__FinishedFunc
// (BlueprintEvent)

void ABP_VolumetricBlood_C::Timeline_TestAnimateIn__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "Timeline_TestAnimateIn__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.Timeline_TestAnimateIn__UpdateFunc
// (BlueprintEvent)

void ABP_VolumetricBlood_C::Timeline_TestAnimateIn__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "Timeline_TestAnimateIn__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.UpdateAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AnimPosition_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VolumetricBlood_C::UpdateAnimation(double AnimPosition_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "UpdateAnimation");

	Params::BP_VolumetricBlood_C_UpdateAnimation Parms{};

	Parms.AnimPosition_0 = AnimPosition_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.UpdateMID
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::UpdateMID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "UpdateMID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VolumetricBlood.BP_VolumetricBlood_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_VolumetricBlood_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VolumetricBlood_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

