#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DesignDataPlugin

#include "Basic.hpp"


namespace SDK
{

// Enum DesignDataPlugin.EExpressionResultType
// NumValues: 0x000B
enum class EExpressionResultType : uint8
{
	Unknown                                  = 0,
	Boolean                                  = 1,
	Integer                                  = 2,
	Float                                    = 3,
	Vector                                   = 4,
	VectorArray                              = 5,
	String                                   = 6,
	StringArray                              = 7,
	Guid                                     = 8,
	GuidArray                                = 9,
	EExpressionResultType_MAX                = 10,
};

// Enum DesignDataPlugin.EExpressionContextIdentifier
// NumValues: 0x0053
enum class EExpressionContextIdentifier : uint8
{
	PlayerGuid                               = 0,
	SourceLocation                           = 1,
	TargetLocation                           = 2,
	InteractionTargetGuid                    = 3,
	TargetGuid                               = 4,
	IterationGuid                            = 5,
	StartTemporaryWeakPointerIds             = 6,
	EventInstanceGuid                        = 7,
	EventStageRecordGuid                     = 8,
	EventObjectiveRecordGuid                 = 9,
	EventRecordGuid                          = 10,
	EventChallengeRating                     = 11,
	NarrativeContentGuid                     = 12,
	Source                                   = 13,
	Target                                   = 14,
	Owner                                    = 15,
	Instigator                               = 16,
	AbilityGuid                              = 17,
	ConsumedAbilityGuid                      = 18,
	EffectGuid                               = 19,
	EffectInstigator                         = 20,
	TickCount                                = 21,
	HitEvent                                 = 22,
	HitInProgress                            = 23,
	EffectInProgressRecordGuid               = 24,
	AbilityInstanceId                        = 25,
	NodeInstance                             = 26,
	PropertyOwnershipStatus                  = 27,
	FreeholdEstate                           = 28,
	VoteRatio                                = 29,
	CombatRegister1                          = 30,
	CombatRegister2                          = 31,
	CombatRegister3                          = 32,
	CombatRegister4                          = 33,
	CombatRegister5                          = 34,
	CombatRegister6                          = 35,
	CombatRegister7                          = 36,
	CombatRegister8                          = 37,
	CombatRegister9                          = 38,
	CombatRegister10                         = 39,
	StatRunningTotal                         = 40,
	AIIntelligenceComponent                  = 41,
	OwnerBeginPlayTime                       = 42,
	BehaviorRootStartTime                    = 43,
	BehaviorNodeStartTime                    = 44,
	BehaviorNodeCompletionTime               = 45,
	BehaviorNodeAbortionTime                 = 46,
	BehaviorNodeFinishedTime                 = 47,
	ItemRecordGuid                           = 48,
	CurrencyTierRecordGuid                   = 49,
	StorageMaxStackSizeStat                  = 50,
	GatheringBaseDuration                    = 51,
	RecipeBaseDuration                       = 52,
	RecipeQuality                            = 53,
	RecipeBaseCost                           = 54,
	ItemQuality                              = 55,
	ItemRarity                               = 56,
	CraftedItemRarity                        = 57,
	GatherableRarity                         = 58,
	ActivatedItemRarity                      = 59,
	ActivatedItemQuality                     = 60,
	ActivatedItemGuid                        = 61,
	CertificationTier                        = 62,
	MaxDurability                            = 63,
	ItemGrade                                = 64,
	EnchantmentBaseCost                      = 65,
	RawAdventuringExperience                 = 66,
	AdjustedAdventuringExperience            = 67,
	RandomSeed                               = 68,
	RecordGuid                               = 69,
	RecordTypeId                             = 70,
	NPCLevel                                 = 71,
	PlayerLevel                              = 72,
	RewardQuantity                           = 73,
	OwnerPointer                             = 74,
	IntrepidAuthority                        = 75,
	LootMaxPlayerLevel                       = 76,
	LootAverageLuckPlayerStat                = 77,
	ElapsedTime                              = 78,
	DeclaringOrgPhasePoints                  = 79,
	TargetOrgPhasePoints                     = 80,
	CityNodeProvider                         = 81,
	EExpressionContextIdentifier_MAX         = 82,
};

// ScriptStruct DesignDataPlugin.DesignDataObjectId
// 0x0018 (0x0018 - 0x0000)
struct FDesignDataObjectId
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TypeId;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDesignDataObjectId) == 0x000008, "Wrong alignment on FDesignDataObjectId");
static_assert(sizeof(FDesignDataObjectId) == 0x000018, "Wrong size on FDesignDataObjectId");
static_assert(offsetof(FDesignDataObjectId, Guid) == 0x000000, "Member 'FDesignDataObjectId::Guid' has a wrong offset!");
static_assert(offsetof(FDesignDataObjectId, TypeId) == 0x000008, "Member 'FDesignDataObjectId::TypeId' has a wrong offset!");
static_assert(offsetof(FDesignDataObjectId, Name) == 0x000010, "Member 'FDesignDataObjectId::Name' has a wrong offset!");

// ScriptStruct DesignDataPlugin.DesignDataTypeDef
// 0x0030 (0x0030 - 0x0000)
struct FDesignDataTypeDef final
{
public:
	int64                                         TypeId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToolDisplayOrder;                                  // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDesignDataTypeDef) == 0x000008, "Wrong alignment on FDesignDataTypeDef");
static_assert(sizeof(FDesignDataTypeDef) == 0x000030, "Wrong size on FDesignDataTypeDef");
static_assert(offsetof(FDesignDataTypeDef, TypeId) == 0x000000, "Member 'FDesignDataTypeDef::TypeId' has a wrong offset!");
static_assert(offsetof(FDesignDataTypeDef, Name) == 0x000008, "Member 'FDesignDataTypeDef::Name' has a wrong offset!");
static_assert(offsetof(FDesignDataTypeDef, Category) == 0x000018, "Member 'FDesignDataTypeDef::Category' has a wrong offset!");
static_assert(offsetof(FDesignDataTypeDef, ToolDisplayOrder) == 0x000028, "Member 'FDesignDataTypeDef::ToolDisplayOrder' has a wrong offset!");

// ScriptStruct DesignDataPlugin.DesignDataRecordBase
// 0x0030 (0x0030 - 0x0000)
struct FDesignDataRecordBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Guid;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordFilename;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDirty;                                          // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDesignDataRecordBase) == 0x000008, "Wrong alignment on FDesignDataRecordBase");
static_assert(sizeof(FDesignDataRecordBase) == 0x000030, "Wrong size on FDesignDataRecordBase");
static_assert(offsetof(FDesignDataRecordBase, Guid) == 0x000008, "Member 'FDesignDataRecordBase::Guid' has a wrong offset!");
static_assert(offsetof(FDesignDataRecordBase, Name) == 0x000010, "Member 'FDesignDataRecordBase::Name' has a wrong offset!");
static_assert(offsetof(FDesignDataRecordBase, RecordFilename) == 0x000018, "Member 'FDesignDataRecordBase::RecordFilename' has a wrong offset!");
static_assert(offsetof(FDesignDataRecordBase, bIsDirty) == 0x000028, "Member 'FDesignDataRecordBase::bIsDirty' has a wrong offset!");

// ScriptStruct DesignDataPlugin.DesignDataRecord
// 0x0040 (0x0040 - 0x0000)
struct FDesignDataRecord final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Guid;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Parent;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecordFilename;                                    // 0x0028(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDirty;                                          // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDesignDataRecord) == 0x000008, "Wrong alignment on FDesignDataRecord");
static_assert(sizeof(FDesignDataRecord) == 0x000040, "Wrong size on FDesignDataRecord");
static_assert(offsetof(FDesignDataRecord, Guid) == 0x000008, "Member 'FDesignDataRecord::Guid' has a wrong offset!");
static_assert(offsetof(FDesignDataRecord, Name) == 0x000010, "Member 'FDesignDataRecord::Name' has a wrong offset!");
static_assert(offsetof(FDesignDataRecord, Parent) == 0x000020, "Member 'FDesignDataRecord::Parent' has a wrong offset!");
static_assert(offsetof(FDesignDataRecord, RecordFilename) == 0x000028, "Member 'FDesignDataRecord::RecordFilename' has a wrong offset!");
static_assert(offsetof(FDesignDataRecord, bIsDirty) == 0x000038, "Member 'FDesignDataRecord::bIsDirty' has a wrong offset!");

// ScriptStruct DesignDataPlugin.AoCExpression
// 0x0050 (0x0050 - 0x0000)
struct FAoCExpression final
{
public:
	class FString                                 Expression;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x40];                                      // 0x0010(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAoCExpression) == 0x000008, "Wrong alignment on FAoCExpression");
static_assert(sizeof(FAoCExpression) == 0x000050, "Wrong size on FAoCExpression");
static_assert(offsetof(FAoCExpression, Expression) == 0x000000, "Member 'FAoCExpression::Expression' has a wrong offset!");

// ScriptStruct DesignDataPlugin.RecordStructDef
// 0x0010 (0x0010 - 0x0000)
struct FRecordStructDef final
{
public:
	class UScriptStruct*                          DataStruct;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScriptStruct*                          RecordStruct;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecordStructDef) == 0x000008, "Wrong alignment on FRecordStructDef");
static_assert(sizeof(FRecordStructDef) == 0x000010, "Wrong size on FRecordStructDef");
static_assert(offsetof(FRecordStructDef, DataStruct) == 0x000000, "Member 'FRecordStructDef::DataStruct' has a wrong offset!");
static_assert(offsetof(FRecordStructDef, RecordStruct) == 0x000008, "Member 'FRecordStructDef::RecordStruct' has a wrong offset!");

// ScriptStruct DesignDataPlugin.DesignDataObjectData
// 0x0018 (0x0018 - 0x0000)
struct FDesignDataObjectData
{
public:
	int64                                         Guid;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TypeId;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDesignDataObjectData) == 0x000008, "Wrong alignment on FDesignDataObjectData");
static_assert(sizeof(FDesignDataObjectData) == 0x000018, "Wrong size on FDesignDataObjectData");
static_assert(offsetof(FDesignDataObjectData, Guid) == 0x000000, "Member 'FDesignDataObjectData::Guid' has a wrong offset!");
static_assert(offsetof(FDesignDataObjectData, Name) == 0x000008, "Member 'FDesignDataObjectData::Name' has a wrong offset!");
static_assert(offsetof(FDesignDataObjectData, TypeId) == 0x000010, "Member 'FDesignDataObjectData::TypeId' has a wrong offset!");

// ScriptStruct DesignDataPlugin.DesignDataRecordId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDesignDataRecordId final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDesignDataRecordId) == 0x000008, "Wrong alignment on FDesignDataRecordId");
static_assert(sizeof(FDesignDataRecordId) == 0x000010, "Wrong size on FDesignDataRecordId");

// ScriptStruct DesignDataPlugin.IntrepidDuration
// 0x0008 (0x0008 - 0x0000)
struct FIntrepidDuration final
{
public:
	int64                                         Duration;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidDuration) == 0x000008, "Wrong alignment on FIntrepidDuration");
static_assert(sizeof(FIntrepidDuration) == 0x000008, "Wrong size on FIntrepidDuration");
static_assert(offsetof(FIntrepidDuration, Duration) == 0x000000, "Member 'FIntrepidDuration::Duration' has a wrong offset!");

// ScriptStruct DesignDataPlugin.StatValue
// 0x0004 (0x0004 - 0x0000)
struct FStatValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatValue) == 0x000004, "Wrong alignment on FStatValue");
static_assert(sizeof(FStatValue) == 0x000004, "Wrong size on FStatValue");
static_assert(offsetof(FStatValue, Value) == 0x000000, "Member 'FStatValue::Value' has a wrong offset!");

}

