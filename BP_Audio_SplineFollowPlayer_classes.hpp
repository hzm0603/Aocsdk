#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_SplineFollowPlayer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C
// 0x0078 (0x03C0 - 0x0348)
class ABP_Audio_SplineFollowPlayer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UIntrepidAkComponent*                   IntrepidAK;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AK_Event_Emitter;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowPlayerElevation;                             // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HiddenInGame;                                      // 0x0372(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_373[0x5];                                      // 0x0373(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AkEmitterLocation;                                 // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineCurveLocationClosertToPlayer;                // 0x0390(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerLazy;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLazy;                                            // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Range_Fade_Distance;                           // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Audio_SplineFollowPlayer(int32 EntryPoint);
	void GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation);
	void GetDistanceToPlayerFromClosestSplinePoint(double* DistanceToPlayerFromClosestSplinePoint);
	void GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation);
	class USplineComponent* GetSplineComponent();
	class USceneComponent* GetSplineEmitterComponent();
	void PostNodeInit();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateEmitterLocationProxy();
	void UpdateEmitterSlowly();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Audio_SplineFollowPlayer_C">();
	}
	static class ABP_Audio_SplineFollowPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Audio_SplineFollowPlayer_C>();
	}
};
static_assert(alignof(ABP_Audio_SplineFollowPlayer_C) == 0x000008, "Wrong alignment on ABP_Audio_SplineFollowPlayer_C");
static_assert(sizeof(ABP_Audio_SplineFollowPlayer_C) == 0x0003C0, "Wrong size on ABP_Audio_SplineFollowPlayer_C");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, UberGraphFrame) == 0x000348, "Member 'ABP_Audio_SplineFollowPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, IntrepidAK) == 0x000350, "Member 'ABP_Audio_SplineFollowPlayer_C::IntrepidAK' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, Spline) == 0x000358, "Member 'ABP_Audio_SplineFollowPlayer_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, DefaultSceneRoot) == 0x000360, "Member 'ABP_Audio_SplineFollowPlayer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, AK_Event_Emitter) == 0x000368, "Member 'ABP_Audio_SplineFollowPlayer_C::AK_Event_Emitter' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, Debug) == 0x000370, "Member 'ABP_Audio_SplineFollowPlayer_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, FollowPlayerElevation) == 0x000371, "Member 'ABP_Audio_SplineFollowPlayer_C::FollowPlayerElevation' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, HiddenInGame) == 0x000372, "Member 'ABP_Audio_SplineFollowPlayer_C::HiddenInGame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, AkEmitterLocation) == 0x000378, "Member 'ABP_Audio_SplineFollowPlayer_C::AkEmitterLocation' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, SplineCurveLocationClosertToPlayer) == 0x000390, "Member 'ABP_Audio_SplineFollowPlayer_C::SplineCurveLocationClosertToPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, TimerLazy) == 0x0003A8, "Member 'ABP_Audio_SplineFollowPlayer_C::TimerLazy' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, IsLazy) == 0x0003B0, "Member 'ABP_Audio_SplineFollowPlayer_C::IsLazy' has a wrong offset!");
static_assert(offsetof(ABP_Audio_SplineFollowPlayer_C, Max_Range_Fade_Distance) == 0x0003B8, "Member 'ABP_Audio_SplineFollowPlayer_C::Max_Range_Fade_Distance' has a wrong offset!");

}

