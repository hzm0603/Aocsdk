#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_OnPawnOverlap

#include "Basic.hpp"

#include "STT_Base_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_OnPawnOverlap.STT_OnPawnOverlap_C
// 0x0038 (0x00B0 - 0x0078)
class USTT_OnPawnOverlap_C final : public USTT_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          HasOverlappedPawn;                                 // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseCharacter*                         Agent;                                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OverlappedCharacters;                              // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        DistanceThreshold;                                 // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreDeadPawns;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_STT_OnPawnOverlap(int32 EntryPoint);
	void OnCapsuleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnCapsuleOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveLatentEnterState(const struct FStateTreeTransitionResult& Transition);
	void ReceiveLatentTick(const float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_OnPawnOverlap_C">();
	}
	static class USTT_OnPawnOverlap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_OnPawnOverlap_C>();
	}
};
static_assert(alignof(USTT_OnPawnOverlap_C) == 0x000008, "Wrong alignment on USTT_OnPawnOverlap_C");
static_assert(sizeof(USTT_OnPawnOverlap_C) == 0x0000B0, "Wrong size on USTT_OnPawnOverlap_C");
static_assert(offsetof(USTT_OnPawnOverlap_C, UberGraphFrame) == 0x000078, "Member 'USTT_OnPawnOverlap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USTT_OnPawnOverlap_C, HasOverlappedPawn) == 0x000080, "Member 'USTT_OnPawnOverlap_C::HasOverlappedPawn' has a wrong offset!");
static_assert(offsetof(USTT_OnPawnOverlap_C, Agent) == 0x000088, "Member 'USTT_OnPawnOverlap_C::Agent' has a wrong offset!");
static_assert(offsetof(USTT_OnPawnOverlap_C, OverlappedCharacters) == 0x000090, "Member 'USTT_OnPawnOverlap_C::OverlappedCharacters' has a wrong offset!");
static_assert(offsetof(USTT_OnPawnOverlap_C, DistanceThreshold) == 0x0000A0, "Member 'USTT_OnPawnOverlap_C::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(USTT_OnPawnOverlap_C, IgnoreDeadPawns) == 0x0000A8, "Member 'USTT_OnPawnOverlap_C::IgnoreDeadPawns' has a wrong offset!");

}

