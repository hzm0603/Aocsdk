#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VolumetricBlood

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.CalculateFalloff
// 0x0018 (0x0018 - 0x0000)
struct BP_VolumetricBlood_C_CalculateFalloff final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_CalculateFalloff) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_CalculateFalloff");
static_assert(sizeof(BP_VolumetricBlood_C_CalculateFalloff) == 0x000018, "Wrong size on BP_VolumetricBlood_C_CalculateFalloff");
static_assert(offsetof(BP_VolumetricBlood_C_CalculateFalloff, ReturnValue) == 0x000000, "Member 'BP_VolumetricBlood_C_CalculateFalloff::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CalculateFalloff, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'BP_VolumetricBlood_C_CalculateFalloff::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CalculateFalloff, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000010, "Member 'BP_VolumetricBlood_C_CalculateFalloff::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.CheckForWindActor
// 0x0060 (0x0060 - 0x0000)
struct BP_VolumetricBlood_C_CheckForWindActor final
{
public:
	bool                                          WindActorExists;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 WindActor;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          WindExists;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 MyWindActor;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWindDirectionalSource*>         CallFunc_GetAllActorsOfClass_OutActors;            // 0x0038(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_CheckForWindActor) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_CheckForWindActor");
static_assert(sizeof(BP_VolumetricBlood_C_CheckForWindActor) == 0x000060, "Wrong size on BP_VolumetricBlood_C_CheckForWindActor");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, WindActorExists) == 0x000000, "Member 'BP_VolumetricBlood_C_CheckForWindActor::WindActorExists' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, WindActor) == 0x000008, "Member 'BP_VolumetricBlood_C_CheckForWindActor::WindActor' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, WindExists) == 0x000010, "Member 'BP_VolumetricBlood_C_CheckForWindActor::WindExists' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, MyWindActor) == 0x000018, "Member 'BP_VolumetricBlood_C_CheckForWindActor::MyWindActor' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'BP_VolumetricBlood_C_CheckForWindActor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_VolumetricBlood_C_CheckForWindActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_VolumetricBlood_C_CheckForWindActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_GetAllActorsOfClass_OutActors) == 0x000038, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_CheckForWindActor, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'BP_VolumetricBlood_C_CheckForWindActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ControlWindArrow
// 0x0178 (0x0178 - 0x0000)
struct BP_VolumetricBlood_C_ControlWindArrow final
{
public:
	struct FVector                                CallFunc_GetWindDirection_WindDirection;           // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWindDirection_Changed;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetWindDirection_Rotation;                // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0080(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_ControlWindArrow) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_ControlWindArrow");
static_assert(sizeof(BP_VolumetricBlood_C_ControlWindArrow) == 0x000178, "Wrong size on BP_VolumetricBlood_C_ControlWindArrow");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_GetWindDirection_WindDirection) == 0x000000, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_GetWindDirection_WindDirection' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_GetWindDirection_Changed) == 0x000018, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_GetWindDirection_Changed' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_GetWindDirection_Rotation) == 0x000020, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_GetWindDirection_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000038, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_MakeRotator_ReturnValue) == 0x000068, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000080, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000168, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ControlWindArrow, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000170, "Member 'BP_VolumetricBlood_C_ControlWindArrow::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.CreateMID
// 0x0008 (0x0008 - 0x0000)
struct BP_VolumetricBlood_C_CreateMID final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_CreateMID) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_CreateMID");
static_assert(sizeof(BP_VolumetricBlood_C_CreateMID) == 0x000008, "Wrong size on BP_VolumetricBlood_C_CreateMID");
static_assert(offsetof(BP_VolumetricBlood_C_CreateMID, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_VolumetricBlood_C_CreateMID::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ExecuteUbergraph_BP_VolumetricBlood
// 0x0060 (0x0060 - 0x0000)
struct BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood");
static_assert(sizeof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood) == 0x000060, "Wrong size on BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, EntryPoint) == 0x000000, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000008, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, CallFunc_Lerp_ReturnValue_1) == 0x000028, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, K2Node_Event_DeltaSeconds) == 0x000030, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, CallFunc_Divide_VectorVector_ReturnValue) == 0x000038, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000050, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x000058, "Member 'BP_VolumetricBlood_C_ExecuteUbergraph_BP_VolumetricBlood::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.GatherConfigVariables
// 0x0038 (0x0038 - 0x0000)
struct BP_VolumetricBlood_C_GatherConfigVariables final
{
public:
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateFalloff_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_defaultFalloff_ImplicitCast;    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_GatherConfigVariables) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_GatherConfigVariables");
static_assert(sizeof(BP_VolumetricBlood_C_GatherConfigVariables) == 0x000038, "Wrong size on BP_VolumetricBlood_C_GatherConfigVariables");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, CallFunc_CalculateFalloff_ReturnValue) == 0x000008, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::CallFunc_CalculateFalloff_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000010, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000018, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000028, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GatherConfigVariables, K2Node_VariableSet_defaultFalloff_ImplicitCast) == 0x000030, "Member 'BP_VolumetricBlood_C_GatherConfigVariables::K2Node_VariableSet_defaultFalloff_ImplicitCast' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.GetWindDirection
// 0x00B0 (0x00B0 - 0x0000)
struct BP_VolumetricBlood_C_GetWindDirection final
{
public:
	struct FVector                                WindDirection;                                     // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Changed_;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindDirectionalSource*                 MyWindActor;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_GetWindDirection) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_GetWindDirection");
static_assert(sizeof(BP_VolumetricBlood_C_GetWindDirection) == 0x0000B0, "Wrong size on BP_VolumetricBlood_C_GetWindDirection");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, WindDirection) == 0x000000, "Member 'BP_VolumetricBlood_C_GetWindDirection::WindDirection' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, Changed) == 0x000018, "Member 'BP_VolumetricBlood_C_GetWindDirection::Changed' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, Rotation) == 0x000020, "Member 'BP_VolumetricBlood_C_GetWindDirection::Rotation' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, Changed_) == 0x000038, "Member 'BP_VolumetricBlood_C_GetWindDirection::Changed_' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, MyWindActor) == 0x000040, "Member 'BP_VolumetricBlood_C_GetWindDirection::MyWindActor' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000048, "Member 'BP_VolumetricBlood_C_GetWindDirection::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, CallFunc_MakeRotator_ReturnValue) == 0x000060, "Member 'BP_VolumetricBlood_C_GetWindDirection::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, CallFunc_GetForwardVector_ReturnValue) == 0x000078, "Member 'BP_VolumetricBlood_C_GetWindDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000090, "Member 'BP_VolumetricBlood_C_GetWindDirection::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_GetWindDirection, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000A8, "Member 'BP_VolumetricBlood_C_GetWindDirection::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_VolumetricBlood_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_VolumetricBlood_C_ReceiveTick");
static_assert(sizeof(BP_VolumetricBlood_C_ReceiveTick) == 0x000004, "Wrong size on BP_VolumetricBlood_C_ReceiveTick");
static_assert(offsetof(BP_VolumetricBlood_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_VolumetricBlood_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.RefreshAnimatedParameters
// 0x0010 (0x0010 - 0x0000)
struct BP_VolumetricBlood_C_RefreshAnimatedParameters final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_RefreshAnimatedParameters) == 0x000004, "Wrong alignment on BP_VolumetricBlood_C_RefreshAnimatedParameters");
static_assert(sizeof(BP_VolumetricBlood_C_RefreshAnimatedParameters) == 0x000010, "Wrong size on BP_VolumetricBlood_C_RefreshAnimatedParameters");
static_assert(offsetof(BP_VolumetricBlood_C_RefreshAnimatedParameters, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_VolumetricBlood_C_RefreshAnimatedParameters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_RefreshAnimatedParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000004, "Member 'BP_VolumetricBlood_C_RefreshAnimatedParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_RefreshAnimatedParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000008, "Member 'BP_VolumetricBlood_C_RefreshAnimatedParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_RefreshAnimatedParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x00000C, "Member 'BP_VolumetricBlood_C_RefreshAnimatedParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.SetAnimPosition
// 0x0008 (0x0008 - 0x0000)
struct BP_VolumetricBlood_C_SetAnimPosition final
{
public:
	double                                        AnimPosition_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_SetAnimPosition) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_SetAnimPosition");
static_assert(sizeof(BP_VolumetricBlood_C_SetAnimPosition) == 0x000008, "Wrong size on BP_VolumetricBlood_C_SetAnimPosition");
static_assert(offsetof(BP_VolumetricBlood_C_SetAnimPosition, AnimPosition_0) == 0x000000, "Member 'BP_VolumetricBlood_C_SetAnimPosition::AnimPosition_0' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.SetAreaScale
// 0x0030 (0x0030 - 0x0000)
struct BP_VolumetricBlood_C_SetAreaScale final
{
public:
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_SetAreaScale) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_SetAreaScale");
static_assert(sizeof(BP_VolumetricBlood_C_SetAreaScale) == 0x000030, "Wrong size on BP_VolumetricBlood_C_SetAreaScale");
static_assert(offsetof(BP_VolumetricBlood_C_SetAreaScale, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000000, "Member 'BP_VolumetricBlood_C_SetAreaScale::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetAreaScale, CallFunc_Divide_VectorVector_ReturnValue) == 0x000018, "Member 'BP_VolumetricBlood_C_SetAreaScale::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.SetRenderingLimits
// 0x0058 (0x0058 - 0x0000)
struct BP_VolumetricBlood_C_SetRenderingLimits final
{
public:
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue_1;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCullDistance_NewCullDistance_ImplicitCast; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_SetRenderingLimits) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_SetRenderingLimits");
static_assert(sizeof(BP_VolumetricBlood_C_SetRenderingLimits) == 0x000058, "Wrong size on BP_VolumetricBlood_C_SetRenderingLimits");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000000, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_BreakVector_X) == 0x000018, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_BreakVector_Y) == 0x000020, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_BreakVector_Z) == 0x000028, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_FMax_ReturnValue) == 0x000030, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_FMax_ReturnValue_1) == 0x000038, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_SetRenderingLimits, CallFunc_SetCullDistance_NewCullDistance_ImplicitCast) == 0x000050, "Member 'BP_VolumetricBlood_C_SetRenderingLimits::CallFunc_SetCullDistance_NewCullDistance_ImplicitCast' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.UpdateAnimation
// 0x0058 (0x0058 - 0x0000)
struct BP_VolumetricBlood_C_UpdateAnimation final
{
public:
	double                                        AnimPosition_0;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MyAnimPos;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast;                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_calculatedFalloff_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_UpdateAnimation) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_UpdateAnimation");
static_assert(sizeof(BP_VolumetricBlood_C_UpdateAnimation) == 0x000058, "Wrong size on BP_VolumetricBlood_C_UpdateAnimation");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, AnimPosition_0) == 0x000000, "Member 'BP_VolumetricBlood_C_UpdateAnimation::AnimPosition_0' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, MyAnimPos) == 0x000008, "Member 'BP_VolumetricBlood_C_UpdateAnimation::MyAnimPos' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000030, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Lerp_B_ImplicitCast) == 0x000038, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Lerp_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, K2Node_VariableSet_calculatedFalloff_ImplicitCast) == 0x000048, "Member 'BP_VolumetricBlood_C_UpdateAnimation::K2Node_VariableSet_calculatedFalloff_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000050, "Member 'BP_VolumetricBlood_C_UpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function BP_VolumetricBlood.BP_VolumetricBlood_C.UpdateMID
// 0x0070 (0x0070 - 0x0000)
struct BP_VolumetricBlood_C_UpdateMID final
{
public:
	struct FVector                                CallFunc_GetWindDirection_WindDirection;           // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWindDirection_Changed;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetWindDirection_Rotation;                // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VolumetricBlood_C_UpdateMID) == 0x000008, "Wrong alignment on BP_VolumetricBlood_C_UpdateMID");
static_assert(sizeof(BP_VolumetricBlood_C_UpdateMID) == 0x000070, "Wrong size on BP_VolumetricBlood_C_UpdateMID");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_GetWindDirection_WindDirection) == 0x000000, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_GetWindDirection_WindDirection' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_GetWindDirection_Changed) == 0x000018, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_GetWindDirection_Changed' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_GetWindDirection_Rotation) == 0x000020, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_GetWindDirection_Rotation' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000038, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_Lerp_ReturnValue) == 0x000048, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000058, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000060, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000068, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_VolumetricBlood_C_UpdateMID, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x00006C, "Member 'BP_VolumetricBlood_C_UpdateMID::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");

}

