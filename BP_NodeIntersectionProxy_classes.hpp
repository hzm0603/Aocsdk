#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NodeIntersectionProxy

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_IntersectionSetDressingData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NodeIntersectionProxy.BP_NodeIntersectionProxy_C
// 0x0090 (0x03D8 - 0x0348)
class ABP_NodeIntersectionProxy_C final : public AActor
{
public:
	class UBillboardComponent*                    Billboard;                                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline5;                                           // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline4;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline3;                                           // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline2;                                           // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline1;                                           // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline0;                                           // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObject*                                NodeLayoutToolManagerInterface;                    // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPCGComponent*                          Active_PCG_Comp;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPCGGraphInstance*                      Graph;                                             // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ESplineCoordinateSpace                        Coordinate_Space;                                  // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPCGComponent*>                  Active_PCG_Comps;                                  // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FS_IntersectionSetDressingData         Intersection_SD_Data;                              // 0x03B8(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class USplineComponent*>               Saved_Splines;                                     // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Apply_PCG_Data();
	void Clear_All_PCG_Data();
	void Create_Splines(TArray<class USplineComponent*>& In_Splines);
	void Update_PCG_Data();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NodeIntersectionProxy_C">();
	}
	static class ABP_NodeIntersectionProxy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NodeIntersectionProxy_C>();
	}
};
static_assert(alignof(ABP_NodeIntersectionProxy_C) == 0x000008, "Wrong alignment on ABP_NodeIntersectionProxy_C");
static_assert(sizeof(ABP_NodeIntersectionProxy_C) == 0x0003D8, "Wrong size on ABP_NodeIntersectionProxy_C");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Billboard) == 0x000348, "Member 'ABP_NodeIntersectionProxy_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Spline5) == 0x000350, "Member 'ABP_NodeIntersectionProxy_C::Spline5' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Spline4) == 0x000358, "Member 'ABP_NodeIntersectionProxy_C::Spline4' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Spline3) == 0x000360, "Member 'ABP_NodeIntersectionProxy_C::Spline3' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Spline2) == 0x000368, "Member 'ABP_NodeIntersectionProxy_C::Spline2' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Spline1) == 0x000370, "Member 'ABP_NodeIntersectionProxy_C::Spline1' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Spline0) == 0x000378, "Member 'ABP_NodeIntersectionProxy_C::Spline0' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, NodeLayoutToolManagerInterface) == 0x000380, "Member 'ABP_NodeIntersectionProxy_C::NodeLayoutToolManagerInterface' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, DefaultSceneRoot) == 0x000388, "Member 'ABP_NodeIntersectionProxy_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Active_PCG_Comp) == 0x000390, "Member 'ABP_NodeIntersectionProxy_C::Active_PCG_Comp' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Graph) == 0x000398, "Member 'ABP_NodeIntersectionProxy_C::Graph' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Coordinate_Space) == 0x0003A0, "Member 'ABP_NodeIntersectionProxy_C::Coordinate_Space' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Active_PCG_Comps) == 0x0003A8, "Member 'ABP_NodeIntersectionProxy_C::Active_PCG_Comps' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Intersection_SD_Data) == 0x0003B8, "Member 'ABP_NodeIntersectionProxy_C::Intersection_SD_Data' has a wrong offset!");
static_assert(offsetof(ABP_NodeIntersectionProxy_C, Saved_Splines) == 0x0003C8, "Member 'ABP_NodeIntersectionProxy_C::Saved_Splines' has a wrong offset!");

}

