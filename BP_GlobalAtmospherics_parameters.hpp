#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalAtmospherics

#include "Basic.hpp"

#include "STRUCT_CloudParameters_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_ExponentialHeightFog_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Sun_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Skylight_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_SkyAtmosphere_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Moon_structs.hpp"


namespace SDK::Params
{

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Directional ROTs
// 0x00B8 (0x00B8 - 0x0000)
struct BP_GlobalAtmospherics_C_Directional_ROTs final
{
public:
	double                                        Time_of_Game_Year_Normalized_input;                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Equator_Rotation;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_Of_Game_Day_24h;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Of_Game_Year_Hours_0;                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SunROTin;                                          // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Moon1ROT;                                          // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Moon2ROT;                                          // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Moon3ROT;                                          // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               ArbitSunROT;                                       // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SunROT;                                            // 0x00A0(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Directional_ROTs) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Directional_ROTs");
static_assert(sizeof(BP_GlobalAtmospherics_C_Directional_ROTs) == 0x0000B8, "Wrong size on BP_GlobalAtmospherics_C_Directional_ROTs");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Time_of_Game_Year_Normalized_input) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Time_of_Game_Year_Normalized_input' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Equator_Rotation) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Equator_Rotation' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Time_Of_Game_Day_24h) == 0x000010, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Time_Of_Game_Day_24h' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Time_Of_Game_Year_Hours_0) == 0x000018, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Time_Of_Game_Year_Hours_0' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, SunROTin) == 0x000020, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::SunROTin' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Moon1ROT) == 0x000038, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Moon1ROT' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Moon2ROT) == 0x000050, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Moon2ROT' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, Moon3ROT) == 0x000068, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::Moon3ROT' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, ArbitSunROT) == 0x000080, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::ArbitSunROT' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, ReturnValue) == 0x000098, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Directional_ROTs, SunROT) == 0x0000A0, "Member 'BP_GlobalAtmospherics_C_Directional_ROTs::SunROT' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.ExecuteUbergraph_BP_GlobalAtmospherics
// 0x0008 (0x0008 - 0x0000)
struct BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics) == 0x000004, "Wrong alignment on BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics");
static_assert(sizeof(BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics) == 0x000008, "Wrong size on BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics");
static_assert(offsetof(BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics, EntryPoint) == 0x000000, "Member 'BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_GlobalAtmospherics_C_ExecuteUbergraph_BP_GlobalAtmospherics::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Exp Height Fog Param Config
// 0x0100 (0x0100 - 0x0000)
struct BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config final
{
public:
	double                                        In_Time;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFog Exp_Fog_Struct;                       // 0x0008(0x00F8)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config");
static_assert(sizeof(BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config) == 0x000100, "Wrong size on BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config");
static_assert(offsetof(BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config, In_Time) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config::In_Time' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config, Exp_Fog_Struct) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Exp_Height_Fog_Param_Config::Exp_Fog_Struct' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Get Sun Dot
// 0x0010 (0x0010 - 0x0000)
struct BP_GlobalAtmospherics_C_Get_Sun_Dot final
{
public:
	double                                        Sun_Dot_Up_0;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Get_Sun_Dot) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Get_Sun_Dot");
static_assert(sizeof(BP_GlobalAtmospherics_C_Get_Sun_Dot) == 0x000010, "Wrong size on BP_GlobalAtmospherics_C_Get_Sun_Dot");
static_assert(offsetof(BP_GlobalAtmospherics_C_Get_Sun_Dot, Sun_Dot_Up_0) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Get_Sun_Dot::Sun_Dot_Up_0' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Get_Sun_Dot, CallFunc_Dot_VectorVector_ReturnValue) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Get_Sun_Dot::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Is Valid Curve (Color)
// 0x0058 (0x0058 - 0x0000)
struct BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_ final
{
public:
	class UCurveLinearColor*                      Color_Curve;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Default_Color;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Input;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Return_Color;                                      // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Valid_Color;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue;          // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetLinearColorValue_InTime_ImplicitCast;  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_");
static_assert(sizeof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_) == 0x000058, "Wrong size on BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, Color_Curve) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::Color_Curve' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, Default_Color) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::Default_Color' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, Time_Input) == 0x000018, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::Time_Input' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, Return_Color) == 0x000020, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::Return_Color' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, Valid_Color) == 0x000030, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::Valid_Color' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, CallFunc_GetLinearColorValue_ReturnValue) == 0x000040, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::CallFunc_GetLinearColorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_, CallFunc_GetLinearColorValue_InTime_ImplicitCast) == 0x000054, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Color_::CallFunc_GetLinearColorValue_InTime_ImplicitCast' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Is Valid Curve (Float)
// 0x0040 (0x0040 - 0x0000)
struct BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_ final
{
public:
	class UCurveFloat*                            Float_Curve;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Float;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Input;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Return_Float;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Valid_Float;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_Valid_Float_ImplicitCast;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_Return_Float_ImplicitCast;   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_");
static_assert(sizeof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_) == 0x000040, "Wrong size on BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, Float_Curve) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::Float_Curve' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, Default_Float) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::Default_Float' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, Time_Input) == 0x000010, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::Time_Input' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, Return_Float) == 0x000018, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::Return_Float' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, Valid_Float) == 0x000020, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::Valid_Float' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, CallFunc_GetFloatValue_ReturnValue) == 0x000024, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, K2Node_VariableSet_Valid_Float_ImplicitCast) == 0x00002C, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::K2Node_VariableSet_Valid_Float_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000030, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_, K2Node_FunctionResult_Return_Float_ImplicitCast) == 0x000038, "Member 'BP_GlobalAtmospherics_C_Is_Valid_Curve__Float_::K2Node_FunctionResult_Return_Float_ImplicitCast' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Moon Param Config
// 0x0090 (0x0090 - 0x0000)
struct BP_GlobalAtmospherics_C_Moon_Param_Config final
{
public:
	float                                         Time_Of_Game_Day_24h;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput_Moon    Moon_Struct_0;                                     // 0x0008(0x0088)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Moon_Param_Config) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Moon_Param_Config");
static_assert(sizeof(BP_GlobalAtmospherics_C_Moon_Param_Config) == 0x000090, "Wrong size on BP_GlobalAtmospherics_C_Moon_Param_Config");
static_assert(offsetof(BP_GlobalAtmospherics_C_Moon_Param_Config, Time_Of_Game_Day_24h) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Moon_Param_Config::Time_Of_Game_Day_24h' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Moon_Param_Config, Moon_Struct_0) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Moon_Param_Config::Moon_Struct_0' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_GlobalAtmospherics_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_GlobalAtmospherics_C_ReceiveTick");
static_assert(sizeof(BP_GlobalAtmospherics_C_ReceiveTick) == 0x000004, "Wrong size on BP_GlobalAtmospherics_C_ReceiveTick");
static_assert(offsetof(BP_GlobalAtmospherics_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_GlobalAtmospherics_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Expo Height Fog Params
// 0x0300 (0x0300 - 0x0000)
struct BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params final
{
public:
	bool                                          Use_Override;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         STRUCT_GlobalAtmosphereOutput;                     // 0x0008(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	double                                        Player_Position_Z;                                 // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Height;                                        // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LV_Player_Height;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params");
static_assert(sizeof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params) == 0x000300, "Wrong size on BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params, Use_Override) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params::Use_Override' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params, STRUCT_GlobalAtmosphereOutput) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params::STRUCT_GlobalAtmosphereOutput' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params, Player_Position_Z) == 0x0002E8, "Member 'BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params::Player_Position_Z' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params, Fog_Height) == 0x0002F0, "Member 'BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params::Fog_Height' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params, LV_Player_Height) == 0x0002F8, "Member 'BP_GlobalAtmospherics_C_Run_Expo_Height_Fog_Params::LV_Player_Height' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Moon Params
// 0x02E8 (0x02E8 - 0x0000)
struct BP_GlobalAtmospherics_C_Run_Moon_Params final
{
public:
	bool                                          Use_Override;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         STRUCT_GlobalAtmosphereOutput;                     // 0x0008(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Run_Moon_Params) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Run_Moon_Params");
static_assert(sizeof(BP_GlobalAtmospherics_C_Run_Moon_Params) == 0x0002E8, "Wrong size on BP_GlobalAtmospherics_C_Run_Moon_Params");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Moon_Params, Use_Override) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Run_Moon_Params::Use_Override' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Moon_Params, STRUCT_GlobalAtmosphereOutput) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Run_Moon_Params::STRUCT_GlobalAtmosphereOutput' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Sky Atmosphere Params
// 0x02E8 (0x02E8 - 0x0000)
struct BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params final
{
public:
	bool                                          Use_Override;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         STRUCT_GlobalAtmosphereOutput;                     // 0x0008(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params");
static_assert(sizeof(BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params) == 0x0002E8, "Wrong size on BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params, Use_Override) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params::Use_Override' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params, STRUCT_GlobalAtmosphereOutput) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Run_Sky_Atmosphere_Params::STRUCT_GlobalAtmosphereOutput' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Skylight Parameters
// 0x02E8 (0x02E8 - 0x0000)
struct BP_GlobalAtmospherics_C_Run_Skylight_Parameters final
{
public:
	bool                                          Use_Override;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         STRUCT_GlobalAtmosphereOutput;                     // 0x0008(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Run_Skylight_Parameters) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Run_Skylight_Parameters");
static_assert(sizeof(BP_GlobalAtmospherics_C_Run_Skylight_Parameters) == 0x0002E8, "Wrong size on BP_GlobalAtmospherics_C_Run_Skylight_Parameters");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Skylight_Parameters, Use_Override) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Run_Skylight_Parameters::Use_Override' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Skylight_Parameters, STRUCT_GlobalAtmosphereOutput) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Run_Skylight_Parameters::STRUCT_GlobalAtmosphereOutput' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Run Sun Params
// 0x02E8 (0x02E8 - 0x0000)
struct BP_GlobalAtmospherics_C_Run_Sun_Params final
{
public:
	bool                                          Use_Override;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         STRUCT_GlobalAtmosphereOutput;                     // 0x0008(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Run_Sun_Params) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Run_Sun_Params");
static_assert(sizeof(BP_GlobalAtmospherics_C_Run_Sun_Params) == 0x0002E8, "Wrong size on BP_GlobalAtmospherics_C_Run_Sun_Params");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Sun_Params, Use_Override) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Run_Sun_Params::Use_Override' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Run_Sun_Params, STRUCT_GlobalAtmosphereOutput) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Run_Sun_Params::STRUCT_GlobalAtmosphereOutput' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.RunIt
// 0x04A0 (0x04A0 - 0x0000)
struct BP_GlobalAtmospherics_C_RunIt final
{
public:
	struct FSTRUCT_GlobalAtmosphereOutput         Final_Struct_Input;                                // 0x0000(0x02E0)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBPDA_CloudPreset_C*                    Cloud_DA_for_testing;                              // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Cloud_Testing;                                     // 0x02E8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewVisibility;                                    // 0x02E9(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPDA_CloudPreset_C*                    CloudInput;                                        // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_CloudParameters                Cloud_Stuct;                                       // 0x02F8(0x0190)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Player_Position_Z;                                 // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TOD_24hr;                                          // 0x0490(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Height;                                        // 0x0498(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_RunIt) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_RunIt");
static_assert(sizeof(BP_GlobalAtmospherics_C_RunIt) == 0x0004A0, "Wrong size on BP_GlobalAtmospherics_C_RunIt");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, Final_Struct_Input) == 0x000000, "Member 'BP_GlobalAtmospherics_C_RunIt::Final_Struct_Input' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, Cloud_DA_for_testing) == 0x0002E0, "Member 'BP_GlobalAtmospherics_C_RunIt::Cloud_DA_for_testing' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, Cloud_Testing) == 0x0002E8, "Member 'BP_GlobalAtmospherics_C_RunIt::Cloud_Testing' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, bNewVisibility) == 0x0002E9, "Member 'BP_GlobalAtmospherics_C_RunIt::bNewVisibility' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, CloudInput) == 0x0002F0, "Member 'BP_GlobalAtmospherics_C_RunIt::CloudInput' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, Cloud_Stuct) == 0x0002F8, "Member 'BP_GlobalAtmospherics_C_RunIt::Cloud_Stuct' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, Player_Position_Z) == 0x000488, "Member 'BP_GlobalAtmospherics_C_RunIt::Player_Position_Z' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, TOD_24hr) == 0x000490, "Member 'BP_GlobalAtmospherics_C_RunIt::TOD_24hr' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_RunIt, Fog_Height) == 0x000498, "Member 'BP_GlobalAtmospherics_C_RunIt::Fog_Height' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Sky Atmosphere Param Config
// 0x0098 (0x0098 - 0x0000)
struct BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config final
{
public:
	float                                         Tine_of_Game_Day_24h;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphere StructOut;                                   // 0x0008(0x0090)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config");
static_assert(sizeof(BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config) == 0x000098, "Wrong size on BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config");
static_assert(offsetof(BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config, Tine_of_Game_Day_24h) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config::Tine_of_Game_Day_24h' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config, StructOut) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Sky_Atmosphere_Param_Config::StructOut' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Skylight Param Config
// 0x0050 (0x0050 - 0x0000)
struct BP_GlobalAtmospherics_C_Skylight_Param_Config final
{
public:
	double                                        In_Time;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Skylight Skylight_Struct_0;                                // 0x0008(0x0048)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Skylight_Param_Config) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Skylight_Param_Config");
static_assert(sizeof(BP_GlobalAtmospherics_C_Skylight_Param_Config) == 0x000050, "Wrong size on BP_GlobalAtmospherics_C_Skylight_Param_Config");
static_assert(offsetof(BP_GlobalAtmospherics_C_Skylight_Param_Config, In_Time) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Skylight_Param_Config::In_Time' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Skylight_Param_Config, Skylight_Struct_0) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Skylight_Param_Config::Skylight_Struct_0' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Sun Param Config
// 0x0090 (0x0090 - 0x0000)
struct BP_GlobalAtmospherics_C_Sun_Param_Config final
{
public:
	float                                         Tine_of_Game_Day_24h;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput_Sun     Sun_Struct_0;                                      // 0x0008(0x0088)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Sun_Param_Config) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Sun_Param_Config");
static_assert(sizeof(BP_GlobalAtmospherics_C_Sun_Param_Config) == 0x000090, "Wrong size on BP_GlobalAtmospherics_C_Sun_Param_Config");
static_assert(offsetof(BP_GlobalAtmospherics_C_Sun_Param_Config, Tine_of_Game_Day_24h) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Sun_Param_Config::Tine_of_Game_Day_24h' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Sun_Param_Config, Sun_Struct_0) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Sun_Param_Config::Sun_Struct_0' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Volumetric Cloud Config
// 0x0238 (0x0238 - 0x0000)
struct BP_GlobalAtmospherics_C_Volumetric_Cloud_Config final
{
public:
	struct FSTRUCT_CloudParameters                STRUCT_CloudParameters;                            // 0x0000(0x0190)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast; // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_2; // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_3; // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_4; // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_5; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_6; // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_7; // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_8; // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_9; // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_10; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_11; // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_12; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_13; // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_14; // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_15; // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_16; // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_17; // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_18; // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_19; // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_20; // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_21; // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_22; // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_23; // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_24; // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_25; // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_26; // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_27; // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_28; // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_29; // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_30; // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_31; // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_32; // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_33; // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_34; // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_35; // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_36; // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Volumetric_Cloud_Config");
static_assert(sizeof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config) == 0x000238, "Wrong size on BP_GlobalAtmospherics_C_Volumetric_Cloud_Config");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, STRUCT_CloudParameters) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::STRUCT_CloudParameters' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000190, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast) == 0x0001A0, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1) == 0x0001A4, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_2) == 0x0001A8, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_3) == 0x0001AC, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_4) == 0x0001B0, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_5) == 0x0001B4, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_6) == 0x0001B8, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_7) == 0x0001BC, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_7' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_8) == 0x0001C0, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_8' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_9) == 0x0001C4, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_9' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_10) == 0x0001C8, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_10' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_11) == 0x0001CC, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_11' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_12) == 0x0001D0, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_12' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_13) == 0x0001D4, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_13' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_14) == 0x0001D8, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_14' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_15) == 0x0001DC, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_15' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_16) == 0x0001E0, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_16' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_17) == 0x0001E4, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_17' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_18) == 0x0001E8, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_18' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_19) == 0x0001EC, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_19' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_20) == 0x0001F0, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_20' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_21) == 0x0001F4, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_21' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_22) == 0x0001F8, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_22' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_23) == 0x0001FC, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_23' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_24) == 0x000200, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_24' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_25) == 0x000204, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_25' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_26) == 0x000208, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_26' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_27) == 0x00020C, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_27' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_28) == 0x000210, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_28' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_29) == 0x000214, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_29' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_30) == 0x000218, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_30' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_31) == 0x00021C, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_31' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_32) == 0x000220, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_32' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_33) == 0x000224, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_33' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_34) == 0x000228, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_34' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_35) == 0x00022C, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_35' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_Config, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_36) == 0x000230, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_Config::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_36' has a wrong offset!");

// Function BP_GlobalAtmospherics.BP_GlobalAtmospherics_C.Volumetric Cloud MID-Not Necessary?
// 0x0030 (0x0030 - 0x0000)
struct BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_ final
{
public:
	bool                                          Use_New_Clouds_;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_) == 0x000008, "Wrong alignment on BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_");
static_assert(sizeof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_) == 0x000030, "Wrong size on BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_, Use_New_Clouds_) == 0x000000, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_::Use_New_Clouds_' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_, Temp_object_Variable) == 0x000008, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_, Temp_object_Variable_1) == 0x000010, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_, Temp_bool_Variable) == 0x000018, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_, K2Node_Select_Default) == 0x000020, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000028, "Member 'BP_GlobalAtmospherics_C_Volumetric_Cloud_MID_Not_Necessary_::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

