#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BiomeManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Struct_BiomeClimate_structs.hpp"
#include "EBiomes_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_ExponentialHeightFog_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_structs.hpp"
#include "STRUCT_SingularClimateData_structs.hpp"
#include "STRUCT_GlobalOverrideAndBool_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Skylight_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_SkyAtmosphere_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Sun_structs.hpp"
#include "STRUCT_GlobalAtmosphereOutput_Moon_structs.hpp"
#include "STRUCT_BiomeSwitch_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK::Params
{

// Function BP_BiomeManager.BP_BiomeManager_C.Adds Random to Todays Climate
// 0x01D0 (0x01D0 - 0x0000)
struct BP_BiomeManager_C_Adds_Random_to_Todays_Climate final
{
public:
	double                                        Degrees_High;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Degrees_Low;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Precipitation_Amount;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Sunshine_Hours;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rain_Days;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Chance_Of_Rain;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            StructOut;                                         // 0x0030(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Singular_Biome_Climate;                            // 0x0060(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            NewLocalVar;                                       // 0x0090(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue; // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x0108(0x0008)(ZeroConstructor, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRangeFromStream_ReturnValue_1; // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_1; // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_2; // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_3; // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue_4; // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast; // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast; // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_SetFieldsInStruct_Humidity_18_236CE0E74D8A0EBFA1315C9DCDC32556_ImplicitCast; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_1; // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_1; // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_SetFieldsInStruct_ChanceOfRain_15_AE3F9A3A4C46C605CC6F63B592EE2600_ImplicitCast; // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_2; // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_3; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_2; // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_4; // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_SetFieldsInStruct_DegreesLow_5_B7EEB5D14AC145EA04E4EBA518410B98_ImplicitCast; // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_3; // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_4; // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_SetFieldsInStruct_DegreesHigh_4_7F6758CA46FA570E1B9659B2F4991825_ImplicitCast; // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_SetFieldsInStruct_Precipitation_7_F8324633470113F78AD6A89BEED4BA28_ImplicitCast; // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Adds_Random_to_Todays_Climate");
static_assert(sizeof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate) == 0x0001D0, "Wrong size on BP_BiomeManager_C_Adds_Random_to_Todays_Climate");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Degrees_High) == 0x000000, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Degrees_High' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Degrees_Low) == 0x000008, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Degrees_Low' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Precipitation_Amount) == 0x000010, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Precipitation_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Sunshine_Hours) == 0x000018, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Sunshine_Hours' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Rain_Days) == 0x00001C, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Rain_Days' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Chance_Of_Rain) == 0x000020, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Chance_Of_Rain' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Humidity) == 0x000028, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Humidity' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, StructOut) == 0x000030, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::StructOut' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, Singular_Biome_Climate) == 0x000060, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::Singular_Biome_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, NewLocalVar) == 0x000090, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000C0, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomIntegerInRangeFromStream_ReturnValue) == 0x0000D8, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomIntegerInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_BreakVector_X) == 0x0000E0, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_BreakVector_Y) == 0x0000E8, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_BreakVector_Z) == 0x0000F0, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_FTrunc_ReturnValue) == 0x0000F8, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000100, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_MakeRandomStream_ReturnValue) == 0x000108, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000110, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x000118, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000120, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Subtract_IntInt_ReturnValue) == 0x000128, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Add_IntInt_ReturnValue) == 0x00012C, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000130, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomIntegerInRangeFromStream_ReturnValue_1) == 0x000138, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomIntegerInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_ReturnValue_1) == 0x00013C, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000140, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000148, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000150, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x000158, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_ReturnValue_2) == 0x000160, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000168, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000170, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_ReturnValue_3) == 0x000178, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_ReturnValue_4) == 0x00017C, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast) == 0x000180, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast) == 0x000184, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, K2Node_SetFieldsInStruct_Humidity_18_236CE0E74D8A0EBFA1315C9DCDC32556_ImplicitCast) == 0x000188, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::K2Node_SetFieldsInStruct_Humidity_18_236CE0E74D8A0EBFA1315C9DCDC32556_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_1) == 0x000190, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_1) == 0x000194, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, K2Node_SetFieldsInStruct_ChanceOfRain_15_AE3F9A3A4C46C605CC6F63B592EE2600_ImplicitCast) == 0x000198, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::K2Node_SetFieldsInStruct_ChanceOfRain_15_AE3F9A3A4C46C605CC6F63B592EE2600_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_2) == 0x0001A0, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_3) == 0x0001A4, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_2) == 0x0001A8, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_4) == 0x0001AC, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, K2Node_SetFieldsInStruct_DegreesLow_5_B7EEB5D14AC145EA04E4EBA518410B98_ImplicitCast) == 0x0001B0, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::K2Node_SetFieldsInStruct_DegreesLow_5_B7EEB5D14AC145EA04E4EBA518410B98_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_3) == 0x0001B8, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_4) == 0x0001BC, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, K2Node_SetFieldsInStruct_DegreesHigh_4_7F6758CA46FA570E1B9659B2F4991825_ImplicitCast) == 0x0001C0, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::K2Node_SetFieldsInStruct_DegreesHigh_4_7F6758CA46FA570E1B9659B2F4991825_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Adds_Random_to_Todays_Climate, K2Node_SetFieldsInStruct_Precipitation_7_F8324633470113F78AD6A89BEED4BA28_ImplicitCast) == 0x0001C8, "Member 'BP_BiomeManager_C_Adds_Random_to_Todays_Climate::K2Node_SetFieldsInStruct_Precipitation_7_F8324633470113F78AD6A89BEED4BA28_ImplicitCast' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Biome to Row Name
// 0x0020 (0x0020 - 0x0000)
struct BP_BiomeManager_C_Biome_to_Row_Name final
{
public:
	EBiomes                                       Biome_In;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Row_Name_0;                                        // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Biome_to_Row_Name) == 0x000004, "Wrong alignment on BP_BiomeManager_C_Biome_to_Row_Name");
static_assert(sizeof(BP_BiomeManager_C_Biome_to_Row_Name) == 0x000020, "Wrong size on BP_BiomeManager_C_Biome_to_Row_Name");
static_assert(offsetof(BP_BiomeManager_C_Biome_to_Row_Name, Biome_In) == 0x000000, "Member 'BP_BiomeManager_C_Biome_to_Row_Name::Biome_In' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Biome_to_Row_Name, Row_Name_0) == 0x000004, "Member 'BP_BiomeManager_C_Biome_to_Row_Name::Row_Name_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Biome_to_Row_Name, Temp_byte_Variable) == 0x00000C, "Member 'BP_BiomeManager_C_Biome_to_Row_Name::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Biome_to_Row_Name, Temp_name_Variable) == 0x000010, "Member 'BP_BiomeManager_C_Biome_to_Row_Name::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Biome_to_Row_Name, K2Node_Select_Default) == 0x000018, "Member 'BP_BiomeManager_C_Biome_to_Row_Name::K2Node_Select_Default' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Blend Biome Data
// 0x21A0 (0x21A0 - 0x0000)
struct BP_BiomeManager_C_Blend_Biome_Data final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Input;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CURRENT_Global_Struct_0;                           // 0x0018(0x02E0)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Year_In;                                // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FSTRUCT_SingularClimateData> Biome_Climate_Map;                         // 0x0300(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSTRUCT_SingularClimateData            Current_Biome_Climate;                             // 0x0350(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         Global;                                            // 0x0380(0x02E0)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Current_Biome_0;                                   // 0x0660(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            Current_Biome_Climate_Out;                         // 0x0668(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            LV_Climate;                                        // 0x0698(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FSTRUCT_SingularClimateData> NewLocalVar_0;                             // 0x06C8(0x0050)(Edit, BlueprintVisible)
	TMap<double, bool>                            LV_Blend_Biome_Bool;                               // 0x0718(0x0050)(Edit, BlueprintVisible)
	int32                                         LV_Month;                                          // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Determine_Month_ReturnValue;              // 0x076C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    CallFunc_Get_Biomes_From_Location_Red_Category_Name; // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Get_Biomes_From_Location_Red_Category_Amount; // 0x0771(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    CallFunc_Get_Biomes_From_Location_Green_Category_Name; // 0x0772(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Get_Biomes_From_Location_Green_Category_Amount; // 0x0773(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    CallFunc_Get_Biomes_From_Location_Blue_Category_Name; // 0x0774(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Get_Biomes_From_Location_Blue_Category_Amount; // 0x0775(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomeType                                    CallFunc_Get_Biomes_From_Location_Alpha_Category_Name; // 0x0776(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Get_Biomes_From_Location_Alpha_Category_Amount; // 0x0777(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue;            // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue_1;          // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue_2;          // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue_3;          // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x07A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x07B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x07B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x07BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_3;    // 0x07BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x07BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x07BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BE[0x2];                                      // 0x07BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate; // 0x07C0(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_1; // 0x07F0(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_2;              // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_3;              // 0x0821(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_822[0x6];                                      // 0x0822(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_2; // 0x0828(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_3; // 0x0858(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_4;              // 0x0888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_5;              // 0x0889(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_6;              // 0x088A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_7;              // 0x088B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_8;              // 0x088C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       CallFunc_Get_Current_Biome_Current_Biome;          // 0x088D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88E[0x2];                                      // 0x088E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Get_Current_Biome_Amount;                 // 0x0890(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_Get_Override_For_Biome_Override_Global_Struct; // 0x0898(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL; // 0x0B78(0x0047)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_9;              // 0x0BBF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_10;             // 0x0BC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC1[0x7];                                      // 0x0BC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_Get_Override_For_Biome_Override_Global_Struct_1; // 0x0BC8(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_1; // 0x0EA8(0x0047)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EEF[0x1];                                      // 0x0EEF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_Get_Override_For_Biome_Override_Global_Struct_2; // 0x0EF0(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_2; // 0x11D0(0x0047)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_11;             // 0x1217(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_12;             // 0x1218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1219[0x7];                                     // 0x1219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_Get_Override_For_Biome_Override_Global_Struct_3; // 0x1220(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_3; // 0x1500(0x0047)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_13;             // 0x1547(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_14;             // 0x1548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_15;             // 0x1549(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154A[0x6];                                     // 0x154A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_LERP_Structs__F__Current_Global_Struct;   // 0x1550(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out; // 0x1830(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_LERP_Structs__F__Current_Global_Struct_1; // 0x1860(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_LERP_Structs__F__Current_Global_Struct_2; // 0x1B40(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_1; // 0x1E20(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_LERP_Structs__F__Current_Global_Struct_3; // 0x1E50(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_2; // 0x2130(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_3; // 0x2160(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LERP_Structs__F__Alpha_ImplicitCast;      // 0x2190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LERP_Structs__F__Alpha_ImplicitCast_1;    // 0x2194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LERP_Structs__F__Alpha_ImplicitCast_2;    // 0x2198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LERP_Structs__F__Alpha_ImplicitCast_3;    // 0x219C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Blend_Biome_Data) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Blend_Biome_Data");
static_assert(sizeof(BP_BiomeManager_C_Blend_Biome_Data) == 0x0021A0, "Wrong size on BP_BiomeManager_C_Blend_Biome_Data");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Location) == 0x000000, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Location' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Time_Input) == 0x000010, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Time_Input' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CURRENT_Global_Struct_0) == 0x000018, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CURRENT_Global_Struct_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Normalized_Year_In) == 0x0002F8, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Normalized_Year_In' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Biome_Climate_Map) == 0x000300, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Biome_Climate_Map' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Current_Biome_Climate) == 0x000350, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Current_Biome_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Global) == 0x000380, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Global' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Current_Biome_0) == 0x000660, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Current_Biome_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, Current_Biome_Climate_Out) == 0x000668, "Member 'BP_BiomeManager_C_Blend_Biome_Data::Current_Biome_Climate_Out' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, LV_Climate) == 0x000698, "Member 'BP_BiomeManager_C_Blend_Biome_Data::LV_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, NewLocalVar_0) == 0x0006C8, "Member 'BP_BiomeManager_C_Blend_Biome_Data::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, LV_Blend_Biome_Bool) == 0x000718, "Member 'BP_BiomeManager_C_Blend_Biome_Data::LV_Blend_Biome_Bool' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, LV_Month) == 0x000768, "Member 'BP_BiomeManager_C_Blend_Biome_Data::LV_Month' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Determine_Month_ReturnValue) == 0x00076C, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Determine_Month_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Red_Category_Name) == 0x000770, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Red_Category_Name' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Red_Category_Amount) == 0x000771, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Red_Category_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Green_Category_Name) == 0x000772, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Green_Category_Name' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Green_Category_Amount) == 0x000773, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Green_Category_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Blue_Category_Name) == 0x000774, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Blue_Category_Name' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Blue_Category_Amount) == 0x000775, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Blue_Category_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Alpha_Category_Name) == 0x000776, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Alpha_Category_Name' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Biomes_From_Location_Alpha_Category_Amount) == 0x000777, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Biomes_From_Location_Alpha_Category_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Conv_ByteToDouble_ReturnValue) == 0x000778, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Conv_ByteToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Conv_ByteToDouble_ReturnValue_1) == 0x000780, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Conv_ByteToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000788, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000790, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Conv_ByteToDouble_ReturnValue_2) == 0x000798, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Conv_ByteToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Conv_ByteToDouble_ReturnValue_3) == 0x0007A0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Conv_ByteToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x0007A8, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x0007B0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0007B8, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x0007B9, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x0007BA, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_EqualEqual_DoubleDouble_ReturnValue_3) == 0x0007BB, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_EqualEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue) == 0x0007BC, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_1) == 0x0007BD, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate) == 0x0007C0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_1) == 0x0007F0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_2) == 0x000820, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_3) == 0x000821, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_2) == 0x000828, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_3) == 0x000858, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Climate_For_Biome_OVERRIDE_Singular_Day_Climate_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_4) == 0x000888, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_5) == 0x000889, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_6) == 0x00088A, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_7) == 0x00088B, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_8) == 0x00088C, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Current_Biome_Current_Biome) == 0x00088D, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Current_Biome_Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Current_Biome_Amount) == 0x000890, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Current_Biome_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_Override_Global_Struct) == 0x000898, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_Override_Global_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL) == 0x000B78, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_9) == 0x000BBF, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_10) == 0x000BC0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_Override_Global_Struct_1) == 0x000BC8, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_Override_Global_Struct_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_1) == 0x000EA8, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_Override_Global_Struct_2) == 0x000EF0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_Override_Global_Struct_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_2) == 0x0011D0, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_11) == 0x001217, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_12) == 0x001218, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_Override_Global_Struct_3) == 0x001220, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_Override_Global_Struct_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_3) == 0x001500, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_Get_Override_For_Biome_OVERRIDE_Global_Struct_BOOL_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_13) == 0x001547, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_14) == 0x001548, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_GetValidValue_ReturnValue_15) == 0x001549, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_GetValidValue_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Current_Global_Struct) == 0x001550, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Current_Global_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out) == 0x001830, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Current_Global_Struct_1) == 0x001860, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Current_Global_Struct_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Current_Global_Struct_2) == 0x001B40, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Current_Global_Struct_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_1) == 0x001E20, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Current_Global_Struct_3) == 0x001E50, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Current_Global_Struct_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_2) == 0x002130, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_3) == 0x002160, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Climate_Data_Current_Biome_Climate_Out_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Alpha_ImplicitCast) == 0x002190, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Alpha_ImplicitCast_1) == 0x002194, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Alpha_ImplicitCast_2) == 0x002198, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Blend_Biome_Data, CallFunc_LERP_Structs__F__Alpha_ImplicitCast_3) == 0x00219C, "Member 'BP_BiomeManager_C_Blend_Biome_Data::CallFunc_LERP_Structs__F__Alpha_ImplicitCast_3' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Color Lerp Bool
// 0x0058 (0x0058 - 0x0000)
struct BP_BiomeManager_C_Color_Lerp_Bool final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           A;                                                 // 0x0004(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           B;                                                 // 0x0014(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ALPHA;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Color_Lerp_Bool) == 0x000004, "Wrong alignment on BP_BiomeManager_C_Color_Lerp_Bool");
static_assert(sizeof(BP_BiomeManager_C_Color_Lerp_Bool) == 0x000058, "Wrong size on BP_BiomeManager_C_Color_Lerp_Bool");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, Condition) == 0x000000, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::Condition' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, A) == 0x000004, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::A' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, B) == 0x000014, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::B' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, ALPHA) == 0x000024, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::ALPHA' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, ReturnValue) == 0x000028, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, CallFunc_LinearColorLerp_ReturnValue) == 0x000038, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Color_Lerp_Bool, CallFunc_SelectColor_ReturnValue) == 0x000048, "Member 'BP_BiomeManager_C_Color_Lerp_Bool::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Determine Month
// 0x0020 (0x0020 - 0x0000)
struct BP_BiomeManager_C_Determine_Month final
{
public:
	double                                        In_Year;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Determine_Month) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Determine_Month");
static_assert(sizeof(BP_BiomeManager_C_Determine_Month) == 0x000020, "Wrong size on BP_BiomeManager_C_Determine_Month");
static_assert(offsetof(BP_BiomeManager_C_Determine_Month, In_Year) == 0x000000, "Member 'BP_BiomeManager_C_Determine_Month::In_Year' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Determine_Month, ReturnValue) == 0x000008, "Member 'BP_BiomeManager_C_Determine_Month::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Determine_Month, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_BiomeManager_C_Determine_Month::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Determine_Month, CallFunc_FTrunc_ReturnValue) == 0x000018, "Member 'BP_BiomeManager_C_Determine_Month::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Do Math - Color
// 0x0120 (0x0120 - 0x0000)
struct BP_BiomeManager_C_Do_Math___Color final
{
public:
	struct FLinearColor                           Default__C_;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<uint8, struct FLinearColor>              Colors;                                            // 0x0010(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FLinearColor                           Return__C_;                                        // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           In_Default__LC_;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           In_Override__LC_;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Default__F_;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Override__F_;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_IsNotEmpty_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   CallFunc_Map_Values_Values;                        // 0x00A8(0x0010)(ReferenceParm)
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x00B8(0x0010)(ReferenceParm)
	struct FLinearColor                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Divide_LinearColorLinearColor_ReturnValue; // 0x00DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorLinearColor_ReturnValue; // 0x00EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Subtract_LinearColorLinearColor_ReturnValue; // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Add_LinearColorLinearColor_ReturnValue;   // 0x010C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Do_Math___Color) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Do_Math___Color");
static_assert(sizeof(BP_BiomeManager_C_Do_Math___Color) == 0x000120, "Wrong size on BP_BiomeManager_C_Do_Math___Color");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, Default__C_) == 0x000000, "Member 'BP_BiomeManager_C_Do_Math___Color::Default__C_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, Colors) == 0x000010, "Member 'BP_BiomeManager_C_Do_Math___Color::Colors' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, Return__C_) == 0x000060, "Member 'BP_BiomeManager_C_Do_Math___Color::Return__C_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, In_Default__LC_) == 0x000070, "Member 'BP_BiomeManager_C_Do_Math___Color::In_Default__LC_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, In_Override__LC_) == 0x000080, "Member 'BP_BiomeManager_C_Do_Math___Color::In_Override__LC_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, In_Default__F_) == 0x000090, "Member 'BP_BiomeManager_C_Do_Math___Color::In_Default__F_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, In_Override__F_) == 0x000098, "Member 'BP_BiomeManager_C_Do_Math___Color::In_Override__F_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Map_IsNotEmpty_ReturnValue) == 0x0000A0, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Map_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Map_Values_Values) == 0x0000A8, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Map_Keys_Keys) == 0x0000B8, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, K2Node_SwitchEnum_CmpSuccess) == 0x0000D9, "Member 'BP_BiomeManager_C_Do_Math___Color::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Divide_LinearColorLinearColor_ReturnValue) == 0x0000DC, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Divide_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Multiply_LinearColorLinearColor_ReturnValue) == 0x0000EC, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Multiply_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Subtract_LinearColorLinearColor_ReturnValue) == 0x0000FC, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Subtract_LinearColorLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Color, CallFunc_Add_LinearColorLinearColor_ReturnValue) == 0x00010C, "Member 'BP_BiomeManager_C_Do_Math___Color::CallFunc_Add_LinearColorLinearColor_ReturnValue' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Do Math - Float
// 0x00E8 (0x00E8 - 0x0000)
struct BP_BiomeManager_C_Do_Math___Float final
{
public:
	double                                        Default_Input__F_;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<uint8, double>                           Floats;                                            // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        Return__F_;                                        // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           In_Default__LC_;                                   // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           In_Override__LC_;                                  // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Default__F_;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        In_Override__F_;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_IsNotEmpty_ReturnValue;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                CallFunc_Map_Values_Values;                        // 0x0098(0x0010)(ReferenceParm)
	TArray<uint8>                                 CallFunc_Map_Keys_Keys;                            // 0x00A8(0x0010)(ReferenceParm)
	double                                        CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Do_Math___Float) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Do_Math___Float");
static_assert(sizeof(BP_BiomeManager_C_Do_Math___Float) == 0x0000E8, "Wrong size on BP_BiomeManager_C_Do_Math___Float");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, Default_Input__F_) == 0x000000, "Member 'BP_BiomeManager_C_Do_Math___Float::Default_Input__F_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, Floats) == 0x000008, "Member 'BP_BiomeManager_C_Do_Math___Float::Floats' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, Return__F_) == 0x000058, "Member 'BP_BiomeManager_C_Do_Math___Float::Return__F_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, In_Default__LC_) == 0x000060, "Member 'BP_BiomeManager_C_Do_Math___Float::In_Default__LC_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, In_Override__LC_) == 0x000070, "Member 'BP_BiomeManager_C_Do_Math___Float::In_Override__LC_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, In_Default__F_) == 0x000080, "Member 'BP_BiomeManager_C_Do_Math___Float::In_Default__F_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, In_Override__F_) == 0x000088, "Member 'BP_BiomeManager_C_Do_Math___Float::In_Override__F_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Map_IsNotEmpty_ReturnValue) == 0x000090, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Map_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Map_Values_Values) == 0x000098, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Map_Keys_Keys) == 0x0000A8, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, K2Node_SwitchEnum_CmpSuccess) == 0x0000C1, "Member 'BP_BiomeManager_C_Do_Math___Float::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Do_Math___Float, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'BP_BiomeManager_C_Do_Math___Float::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.ExecuteUbergraph_BP_BiomeManager
// 0x0004 (0x0004 - 0x0000)
struct BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager) == 0x000004, "Wrong alignment on BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager");
static_assert(sizeof(BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager) == 0x000004, "Wrong size on BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager");
static_assert(offsetof(BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager, EntryPoint) == 0x000000, "Member 'BP_BiomeManager_C_ExecuteUbergraph_BP_BiomeManager::EntryPoint' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Float Lerp Bool
// 0x0038 (0x0038 - 0x0000)
struct BP_BiomeManager_C_Float_Lerp_Bool final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        A;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        B;                                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ALPHA;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Float_Lerp_Bool) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Float_Lerp_Bool");
static_assert(sizeof(BP_BiomeManager_C_Float_Lerp_Bool) == 0x000038, "Wrong size on BP_BiomeManager_C_Float_Lerp_Bool");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, Condition) == 0x000000, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::Condition' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, A) == 0x000008, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::A' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, B) == 0x000010, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::B' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, ALPHA) == 0x000018, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::ALPHA' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, ReturnValue) == 0x000020, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, CallFunc_Lerp_ReturnValue) == 0x000028, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Float_Lerp_Bool, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'BP_BiomeManager_C_Float_Lerp_Bool::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Get Climate For Biome
// 0x0168 (0x0168 - 0x0000)
struct BP_BiomeManager_C_Get_Climate_For_Biome final
{
public:
	EBiomes                                       Biome_In;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_SingularClimateData> TargetMap;                                 // 0x0008(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSTRUCT_SingularClimateData            OVERRIDE_Singular_Day_Climate;                     // 0x0058(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Single_Day_Climate;                                // 0x0088(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_BiomeClimate                   Override_Climate;                                  // 0x00B8(0x0070)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   CallFunc_Biome_to_Row_Name_Row_Name;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_Map_Find_Value;                           // 0x0130(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Get_Climate_For_Biome) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Get_Climate_For_Biome");
static_assert(sizeof(BP_BiomeManager_C_Get_Climate_For_Biome) == 0x000168, "Wrong size on BP_BiomeManager_C_Get_Climate_For_Biome");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, Biome_In) == 0x000000, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::Biome_In' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, TargetMap) == 0x000008, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::TargetMap' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, OVERRIDE_Singular_Day_Climate) == 0x000058, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::OVERRIDE_Singular_Day_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, Single_Day_Climate) == 0x000088, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::Single_Day_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, Override_Climate) == 0x0000B8, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::Override_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, CallFunc_Biome_to_Row_Name_Row_Name) == 0x000128, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::CallFunc_Biome_to_Row_Name_Row_Name' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, CallFunc_Map_Find_Value) == 0x000130, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Climate_For_Biome, CallFunc_Map_Find_ReturnValue) == 0x000160, "Member 'BP_BiomeManager_C_Get_Climate_For_Biome::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Get Current Biome
// 0x0038 (0x0038 - 0x0000)
struct BP_BiomeManager_C_Get_Current_Biome final
{
public:
	EBiomes                                       Red_Category_Name_0;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Green_Category_Name_0;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Blue_Category_Name_0;                              // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Alpha_Category_Name_0;                             // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Current_Biome_0;                                   // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Amount_0;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue_1;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue_2;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Get_Current_Biome) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Get_Current_Biome");
static_assert(sizeof(BP_BiomeManager_C_Get_Current_Biome) == 0x000038, "Wrong size on BP_BiomeManager_C_Get_Current_Biome");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, Red_Category_Name_0) == 0x000000, "Member 'BP_BiomeManager_C_Get_Current_Biome::Red_Category_Name_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, Green_Category_Name_0) == 0x000001, "Member 'BP_BiomeManager_C_Get_Current_Biome::Green_Category_Name_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, Blue_Category_Name_0) == 0x000002, "Member 'BP_BiomeManager_C_Get_Current_Biome::Blue_Category_Name_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, Alpha_Category_Name_0) == 0x000003, "Member 'BP_BiomeManager_C_Get_Current_Biome::Alpha_Category_Name_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, Current_Biome_0) == 0x000004, "Member 'BP_BiomeManager_C_Get_Current_Biome::Current_Biome_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, Amount_0) == 0x000008, "Member 'BP_BiomeManager_C_Get_Current_Biome::Amount_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_FMax_ReturnValue) == 0x000010, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_FMax_ReturnValue_1) == 0x000018, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_FMax_ReturnValue_2) == 0x000020, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_FMax_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000031, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000032, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Current_Biome, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000033, "Member 'BP_BiomeManager_C_Get_Current_Biome::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Get Override For Biome
// 0x0D68 (0x0D68 - 0x0000)
struct BP_BiomeManager_C_Get_Override_For_Biome final
{
public:
	double                                        Time_Input;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Biome_In;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         STRUCT_GlobalAtmosphereOutput;                     // 0x0010(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         OVERRIDE_Global_Struct_0;                          // 0x02F0(0x02E0)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          OVERRIDE_Global_Struct_BOOL_0;                     // 0x05D0(0x0047)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          Local_OVERRIDE_Bool_Struct;                        // 0x0617(0x0047)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_BiomeSwitch                    Biome_Switches;                                    // 0x065E(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         Biome_Specific_Struct;                             // 0x0660(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Biome_DA;                                          // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         Output_Struct;                                     // 0x0948(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<uint8, struct FLinearColor>              Colors;                                            // 0x0C28(0x0050)(Edit, BlueprintVisible)
	TMap<uint8, double>                           Floats;                                            // 0x0C78(0x0050)(Edit, BlueprintVisible)
	TMap<uint8, double>                           UniqueObjectNameForCooking_MakeVariableOutput;     // 0x0CC8(0x0050)()
	TMap<uint8, struct FLinearColor>              UniqueObjectNameForCooking_MakeVariableOutput_1;   // 0x0D18(0x0050)()
};
static_assert(alignof(BP_BiomeManager_C_Get_Override_For_Biome) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Get_Override_For_Biome");
static_assert(sizeof(BP_BiomeManager_C_Get_Override_For_Biome) == 0x000D68, "Wrong size on BP_BiomeManager_C_Get_Override_For_Biome");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Time_Input) == 0x000000, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Time_Input' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Biome_In) == 0x000008, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Biome_In' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, STRUCT_GlobalAtmosphereOutput) == 0x000010, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::STRUCT_GlobalAtmosphereOutput' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, OVERRIDE_Global_Struct_0) == 0x0002F0, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::OVERRIDE_Global_Struct_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, OVERRIDE_Global_Struct_BOOL_0) == 0x0005D0, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::OVERRIDE_Global_Struct_BOOL_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Local_OVERRIDE_Bool_Struct) == 0x000617, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Local_OVERRIDE_Bool_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Biome_Switches) == 0x00065E, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Biome_Switches' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Biome_Specific_Struct) == 0x000660, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Biome_Specific_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Biome_DA) == 0x000940, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Biome_DA' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Output_Struct) == 0x000948, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Output_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Colors) == 0x000C28, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Colors' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, Floats) == 0x000C78, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::Floats' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, UniqueObjectNameForCooking_MakeVariableOutput) == 0x000CC8, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::UniqueObjectNameForCooking_MakeVariableOutput' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Get_Override_For_Biome, UniqueObjectNameForCooking_MakeVariableOutput_1) == 0x000D18, "Member 'BP_BiomeManager_C_Get_Override_For_Biome::UniqueObjectNameForCooking_MakeVariableOutput_1' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.INIT Biome Data Tables
// 0x01F0 (0x01F0 - 0x0000)
struct BP_BiomeManager_C_INIT_Biome_Data_Tables final
{
public:
	int32                                         In_Month;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSTRUCT_SingularClimateData> Climate_Single_Day_0;                      // 0x0008(0x0050)(Parm, OutParm)
	int32                                         Month_0;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            Single_Day_Climate;                                // 0x0060(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_BiomeClimate                   Override_Climate;                                  // 0x0090(0x0070)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_BiomeClimate                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0118(0x0070)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_2;                         // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_5;                         // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_6;                         // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_7;                         // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            CallFunc_Adds_Random_to_Todays_Climate_StructOut;  // 0x01C0(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_INIT_Biome_Data_Tables) == 0x000008, "Wrong alignment on BP_BiomeManager_C_INIT_Biome_Data_Tables");
static_assert(sizeof(BP_BiomeManager_C_INIT_Biome_Data_Tables) == 0x0001F0, "Wrong size on BP_BiomeManager_C_INIT_Biome_Data_Tables");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, In_Month) == 0x000000, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::In_Month' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, Climate_Single_Day_0) == 0x000008, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::Climate_Single_Day_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, Month_0) == 0x000058, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::Month_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, Single_Day_Climate) == 0x000060, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::Single_Day_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, Override_Climate) == 0x000090, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::Override_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, Temp_int_Array_Index_Variable) == 0x000100, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, Temp_int_Loop_Counter_Variable) == 0x000104, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item) == 0x000108, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_GetDataTableRowFromName_OutRow) == 0x000118, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000188, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Less_IntInt_ReturnValue) == 0x000189, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Add_IntInt_ReturnValue) == 0x00018C, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_1) == 0x000190, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_2) == 0x000198, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_3) == 0x0001A0, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_4) == 0x0001A4, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_5) == 0x0001A8, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_6) == 0x0001B0, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Array_Get_Item_7) == 0x0001B8, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_INIT_Biome_Data_Tables, CallFunc_Adds_Random_to_Todays_Climate_StructOut) == 0x0001C0, "Member 'BP_BiomeManager_C_INIT_Biome_Data_Tables::CallFunc_Adds_Random_to_Todays_Climate_StructOut' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.LERP Climate Data
// 0x0130 (0x0130 - 0x0000)
struct BP_BiomeManager_C_LERP_Climate_Data final
{
public:
	double                                        ALPHA;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Current_Biome_Climate;                             // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            OVERRIDE_Climate_Data;                             // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Current_Biome_Climate_Out;                         // 0x0068(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            K2Node_SetFieldsInStruct_StructOut;                // 0x0100(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_LERP_Climate_Data) == 0x000008, "Wrong alignment on BP_BiomeManager_C_LERP_Climate_Data");
static_assert(sizeof(BP_BiomeManager_C_LERP_Climate_Data) == 0x000130, "Wrong size on BP_BiomeManager_C_LERP_Climate_Data");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, ALPHA) == 0x000000, "Member 'BP_BiomeManager_C_LERP_Climate_Data::ALPHA' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, Current_Biome_Climate) == 0x000008, "Member 'BP_BiomeManager_C_LERP_Climate_Data::Current_Biome_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, OVERRIDE_Climate_Data) == 0x000038, "Member 'BP_BiomeManager_C_LERP_Climate_Data::OVERRIDE_Climate_Data' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, Current_Biome_Climate_Out) == 0x000068, "Member 'BP_BiomeManager_C_LERP_Climate_Data::Current_Biome_Climate_Out' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000098, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue) == 0x0000A0, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue_1) == 0x0000A8, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000B0, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x0000B8, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue_2) == 0x0000C0, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue_3) == 0x0000C8, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_FTrunc_ReturnValue) == 0x0000D0, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue_4) == 0x0000D8, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue_5) == 0x0000E0, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x0000E8, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_Lerp_ReturnValue_6) == 0x0000F0, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, CallFunc_FTrunc_ReturnValue_1) == 0x0000F8, "Member 'BP_BiomeManager_C_LERP_Climate_Data::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Climate_Data, K2Node_SetFieldsInStruct_StructOut) == 0x000100, "Member 'BP_BiomeManager_C_LERP_Climate_Data::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.LERP Structs (F)
// 0x1900 (0x1900 - 0x0000)
struct BP_BiomeManager_C_LERP_Structs__F_ final
{
public:
	float                                         ALPHA;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         Current_Global_Settings_Struct;                    // 0x0008(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         Override_Global_Settings_Struct;                   // 0x02E8(0x02E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          Current_Override_BOOL_Struct;                      // 0x05C8(0x0047)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60F[0x1];                                      // 0x060F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         CURRENT_Global_Struct_0;                           // 0x0610(0x02E0)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFog Override_Exponential_Height_Fog_Struct__LV_; // 0x08F0(0x00F8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphere Override_Sky_Atmosphere_Struct__LV_;         // 0x09E8(0x0090)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Skylight Override_Skylight_Struct__LV_;                    // 0x0A78(0x0048)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Moon    Override_Moon_Struct__LV_;                         // 0x0AC0(0x0088)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Sun     Override_Sun_Struct__LV_;                          // 0x0B48(0x0088)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_ExponentialHeightFog Current_Exponential_Height_Fog_Struct__LV_; // 0x0BD0(0x00F8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_SkyAtmosphere Current_Sky_Atmosphere_Struct__LV_;          // 0x0CC8(0x0090)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Skylight Current_SkyLight_Struct__LV_;                     // 0x0D58(0x0048)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Moon    Cuurent_Moon_Struct__LV_;                          // 0x0DA0(0x0088)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput_Sun     Current_Sun_Struct__LV_;                           // 0x0E28(0x0088)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalOverrideAndBool          OVERRIDE_Bool__LV_;                                // 0x0EB0(0x0047)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF7[0x1];                                      // 0x0EF7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         OVERRIDE_Global_Struct__LV_;                       // 0x0EF8(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         Current_Global_Struct__LV_;                        // 0x11D8(0x02E0)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha__LV_;                                        // 0x14B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x14BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BD[0x3];                                     // 0x14BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue;              // 0x14C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x14D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D1[0x7];                                     // 0x14D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue;              // 0x14D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_1;            // 0x14E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_2;            // 0x14E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_3;            // 0x14F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_4;            // 0x14F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_1;            // 0x1500(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_5;            // 0x1510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_6;            // 0x1518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_7;            // 0x1520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_8;            // 0x1528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_9;            // 0x1530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_10;           // 0x1538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_11;           // 0x1540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_2;            // 0x1548(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_12;           // 0x1558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_13;           // 0x1560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_14;           // 0x1568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_15;           // 0x1570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_16;           // 0x1578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_17;           // 0x1580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_3;            // 0x1588(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_4;            // 0x1598(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_18;           // 0x15A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_5;            // 0x15B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_19;           // 0x15C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_20;           // 0x15C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_21;           // 0x15D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_22;           // 0x15D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_6;            // 0x15E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_23;           // 0x15F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_24;           // 0x15F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_25;           // 0x1600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_26;           // 0x1608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_7;            // 0x1610(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_8;            // 0x1620(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_27;           // 0x1630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_28;           // 0x1638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_29;           // 0x1640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_30;           // 0x1648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_31;           // 0x1650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_32;           // 0x1658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_9;            // 0x1660(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_10;           // 0x1670(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_33;           // 0x1680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_34;           // 0x1688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_35;           // 0x1690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_36;           // 0x1698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_11;           // 0x16A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_37;           // 0x16B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_38;           // 0x16B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_12;           // 0x16C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_39;           // 0x16D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_40;           // 0x16D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_41;           // 0x16E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_42;           // 0x16E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_43;           // 0x16F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_44;           // 0x16F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_13;           // 0x1700(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_45;           // 0x1710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_46;           // 0x1718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_47;           // 0x1720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_48;           // 0x1728(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_49;           // 0x1730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_50;           // 0x1738(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Color_Lerp_Bool_ReturnValue_14;           // 0x1740(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_ReturnValue_51;           // 0x1750(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x1758(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x1759(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x175A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x175B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x175C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_3;                           // 0x175D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_175E[0x2];                                     // 0x175E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast;       // 0x1760(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_1;     // 0x1768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_2;     // 0x1770(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_3;     // 0x1778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_4;     // 0x1780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_5;     // 0x1788(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_6;     // 0x1790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_7;     // 0x1798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_8;     // 0x17A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_9;     // 0x17A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_10;    // 0x17B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_11;    // 0x17B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_12;    // 0x17C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_13;    // 0x17C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_14;    // 0x17D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_15;    // 0x17D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_16;    // 0x17E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_17;    // 0x17E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_18;    // 0x17F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_19;    // 0x17F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_20;    // 0x1800(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_21;    // 0x1808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_22;    // 0x1810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_23;    // 0x1818(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_24;    // 0x1820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_25;    // 0x1828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_26;    // 0x1830(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_27;    // 0x1838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_28;    // 0x1840(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_29;    // 0x1848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_30;    // 0x1850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_31;    // 0x1858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_32;    // 0x1860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_33;    // 0x1868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_34;    // 0x1870(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_35;    // 0x1878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_36;    // 0x1880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_37;    // 0x1888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_38;    // 0x1890(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_39;    // 0x1898(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_40;    // 0x18A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_41;    // 0x18A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_42;    // 0x18B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_43;    // 0x18B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_44;    // 0x18C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_45;    // 0x18C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_46;    // 0x18D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_47;    // 0x18D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_48;    // 0x18E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_49;    // 0x18E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_50;    // 0x18F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_51;    // 0x18F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_LERP_Structs__F_) == 0x000008, "Wrong alignment on BP_BiomeManager_C_LERP_Structs__F_");
static_assert(sizeof(BP_BiomeManager_C_LERP_Structs__F_) == 0x001900, "Wrong size on BP_BiomeManager_C_LERP_Structs__F_");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, ALPHA) == 0x000000, "Member 'BP_BiomeManager_C_LERP_Structs__F_::ALPHA' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_Global_Settings_Struct) == 0x000008, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_Global_Settings_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Override_Global_Settings_Struct) == 0x0002E8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Override_Global_Settings_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_Override_BOOL_Struct) == 0x0005C8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_Override_BOOL_Struct' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CURRENT_Global_Struct_0) == 0x000610, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CURRENT_Global_Struct_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Override_Exponential_Height_Fog_Struct__LV_) == 0x0008F0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Override_Exponential_Height_Fog_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Override_Sky_Atmosphere_Struct__LV_) == 0x0009E8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Override_Sky_Atmosphere_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Override_Skylight_Struct__LV_) == 0x000A78, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Override_Skylight_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Override_Moon_Struct__LV_) == 0x000AC0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Override_Moon_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Override_Sun_Struct__LV_) == 0x000B48, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Override_Sun_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_Exponential_Height_Fog_Struct__LV_) == 0x000BD0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_Exponential_Height_Fog_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_Sky_Atmosphere_Struct__LV_) == 0x000CC8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_Sky_Atmosphere_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_SkyLight_Struct__LV_) == 0x000D58, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_SkyLight_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Cuurent_Moon_Struct__LV_) == 0x000DA0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Cuurent_Moon_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_Sun_Struct__LV_) == 0x000E28, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_Sun_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, OVERRIDE_Bool__LV_) == 0x000EB0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::OVERRIDE_Bool__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, OVERRIDE_Global_Struct__LV_) == 0x000EF8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::OVERRIDE_Global_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Current_Global_Struct__LV_) == 0x0011D8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Current_Global_Struct__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Alpha__LV_) == 0x0014B8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Alpha__LV_' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Temp_bool_Variable) == 0x0014BC, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue) == 0x0014C0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, K2Node_Select_Default) == 0x0014D0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue) == 0x0014D8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_1) == 0x0014E0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_2) == 0x0014E8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_3) == 0x0014F0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_4) == 0x0014F8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_1) == 0x001500, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_5) == 0x001510, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_6) == 0x001518, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_7) == 0x001520, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_8) == 0x001528, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_9) == 0x001530, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_10) == 0x001538, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_11) == 0x001540, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_2) == 0x001548, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_12) == 0x001558, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_13) == 0x001560, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_14) == 0x001568, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_15) == 0x001570, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_16) == 0x001578, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_17) == 0x001580, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_3) == 0x001588, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_4) == 0x001598, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_18) == 0x0015A8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_5) == 0x0015B0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_19) == 0x0015C0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_20) == 0x0015C8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_21) == 0x0015D0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_22) == 0x0015D8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_6) == 0x0015E0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_23) == 0x0015F0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_24) == 0x0015F8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_25) == 0x001600, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_26) == 0x001608, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_7) == 0x001610, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_8) == 0x001620, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_27) == 0x001630, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_28) == 0x001638, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_29) == 0x001640, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_30) == 0x001648, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_31) == 0x001650, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_32) == 0x001658, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_9) == 0x001660, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_10) == 0x001670, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_33) == 0x001680, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_34) == 0x001688, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_35) == 0x001690, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_36) == 0x001698, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_11) == 0x0016A0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_37) == 0x0016B0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_37' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_38) == 0x0016B8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_38' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_12) == 0x0016C0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_39) == 0x0016D0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_39' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_40) == 0x0016D8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_40' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_41) == 0x0016E0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_41' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_42) == 0x0016E8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_42' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_43) == 0x0016F0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_43' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_44) == 0x0016F8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_44' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_13) == 0x001700, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_45) == 0x001710, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_45' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_46) == 0x001718, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_46' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_47) == 0x001720, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_47' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_48) == 0x001728, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_48' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_49) == 0x001730, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_49' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_50) == 0x001738, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_50' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Color_Lerp_Bool_ReturnValue_14) == 0x001740, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Color_Lerp_Bool_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_ReturnValue_51) == 0x001750, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_ReturnValue_51' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Temp_bool_Variable_1) == 0x001758, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, K2Node_Select_Default_1) == 0x001759, "Member 'BP_BiomeManager_C_LERP_Structs__F_::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Temp_bool_Variable_2) == 0x00175A, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, Temp_bool_Variable_3) == 0x00175B, "Member 'BP_BiomeManager_C_LERP_Structs__F_::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, K2Node_Select_Default_2) == 0x00175C, "Member 'BP_BiomeManager_C_LERP_Structs__F_::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, K2Node_Select_Default_3) == 0x00175D, "Member 'BP_BiomeManager_C_LERP_Structs__F_::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast) == 0x001760, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_1) == 0x001768, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_2) == 0x001770, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_3) == 0x001778, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_4) == 0x001780, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_5) == 0x001788, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_6) == 0x001790, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_7) == 0x001798, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_7' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_8) == 0x0017A0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_8' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_9) == 0x0017A8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_9' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_10) == 0x0017B0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_10' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_11) == 0x0017B8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_11' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_12) == 0x0017C0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_12' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_13) == 0x0017C8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_13' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_14) == 0x0017D0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_14' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_15) == 0x0017D8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_15' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_16) == 0x0017E0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_16' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_17) == 0x0017E8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_17' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_18) == 0x0017F0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_18' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_19) == 0x0017F8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_19' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_20) == 0x001800, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_20' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_21) == 0x001808, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_21' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_22) == 0x001810, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_22' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_23) == 0x001818, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_23' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_24) == 0x001820, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_24' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_25) == 0x001828, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_25' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_26) == 0x001830, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_26' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_27) == 0x001838, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_27' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_28) == 0x001840, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_28' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_29) == 0x001848, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_29' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_30) == 0x001850, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_30' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_31) == 0x001858, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_31' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_32) == 0x001860, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_32' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_33) == 0x001868, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_33' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_34) == 0x001870, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_34' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_35) == 0x001878, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_35' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_36) == 0x001880, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_36' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_37) == 0x001888, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_37' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_38) == 0x001890, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_38' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_39) == 0x001898, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_39' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_40) == 0x0018A0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_40' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_41) == 0x0018A8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_41' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_42) == 0x0018B0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_42' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_43) == 0x0018B8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_43' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_44) == 0x0018C0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_44' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_45) == 0x0018C8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_45' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_46) == 0x0018D0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_46' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_47) == 0x0018D8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_47' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_48) == 0x0018E0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_48' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_49) == 0x0018E8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_49' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_50) == 0x0018F0, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_50' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_LERP_Structs__F_, CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_51) == 0x0018F8, "Member 'BP_BiomeManager_C_LERP_Structs__F_::CallFunc_Float_Lerp_Bool_Alpha_ImplicitCast_51' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Pass To Debug
// 0x0068 (0x0068 - 0x0000)
struct BP_BiomeManager_C_Pass_To_Debug final
{
public:
	EBiomes                                       Red_Biome;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Red_Amount;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Red_Biome_Amount_Previous_0;                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Green_Biome;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Green_Amount;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Green_Biome_Amount_Previous_0;                     // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Blue_Biome;                                        // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blue_Amount;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blue_Biome_Amount_Previous_0;                      // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Alpha_Biome;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Alpha_Amount;                                      // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha_Biome_Amount_Previoius_0;                    // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Month_0;                                           // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Pass_To_Debug) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Pass_To_Debug");
static_assert(sizeof(BP_BiomeManager_C_Pass_To_Debug) == 0x000068, "Wrong size on BP_BiomeManager_C_Pass_To_Debug");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Red_Biome) == 0x000000, "Member 'BP_BiomeManager_C_Pass_To_Debug::Red_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Red_Amount) == 0x000008, "Member 'BP_BiomeManager_C_Pass_To_Debug::Red_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Red_Biome_Amount_Previous_0) == 0x000010, "Member 'BP_BiomeManager_C_Pass_To_Debug::Red_Biome_Amount_Previous_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Green_Biome) == 0x000018, "Member 'BP_BiomeManager_C_Pass_To_Debug::Green_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Green_Amount) == 0x000020, "Member 'BP_BiomeManager_C_Pass_To_Debug::Green_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Green_Biome_Amount_Previous_0) == 0x000028, "Member 'BP_BiomeManager_C_Pass_To_Debug::Green_Biome_Amount_Previous_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Blue_Biome) == 0x000030, "Member 'BP_BiomeManager_C_Pass_To_Debug::Blue_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Blue_Amount) == 0x000038, "Member 'BP_BiomeManager_C_Pass_To_Debug::Blue_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Blue_Biome_Amount_Previous_0) == 0x000040, "Member 'BP_BiomeManager_C_Pass_To_Debug::Blue_Biome_Amount_Previous_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Alpha_Biome) == 0x000048, "Member 'BP_BiomeManager_C_Pass_To_Debug::Alpha_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Alpha_Amount) == 0x000050, "Member 'BP_BiomeManager_C_Pass_To_Debug::Alpha_Amount' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Alpha_Biome_Amount_Previoius_0) == 0x000058, "Member 'BP_BiomeManager_C_Pass_To_Debug::Alpha_Biome_Amount_Previoius_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pass_To_Debug, Month_0) == 0x000060, "Member 'BP_BiomeManager_C_Pass_To_Debug::Month_0' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Pick Variable
// 0x0080 (0x0080 - 0x0000)
struct BP_BiomeManager_C_Pick_Variable final
{
public:
	uint8                                         Variable_Type;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        float_0;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Float_Curve;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Color_Curve;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Float_Output;                                      // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Output;                                      // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pick_Single_Float;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetLinearColorValue_ReturnValue;          // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLinearColorValue_InTime_ImplicitCast;  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_Float_Output_ImplicitCast;   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Pick_Variable) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Pick_Variable");
static_assert(sizeof(BP_BiomeManager_C_Pick_Variable) == 0x000080, "Wrong size on BP_BiomeManager_C_Pick_Variable");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Variable_Type) == 0x000000, "Member 'BP_BiomeManager_C_Pick_Variable::Variable_Type' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, float_0) == 0x000008, "Member 'BP_BiomeManager_C_Pick_Variable::float_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Float_Curve) == 0x000010, "Member 'BP_BiomeManager_C_Pick_Variable::Float_Curve' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Color) == 0x000018, "Member 'BP_BiomeManager_C_Pick_Variable::Color' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Color_Curve) == 0x000028, "Member 'BP_BiomeManager_C_Pick_Variable::Color_Curve' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Time) == 0x000030, "Member 'BP_BiomeManager_C_Pick_Variable::Time' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Float_Output) == 0x000038, "Member 'BP_BiomeManager_C_Pick_Variable::Float_Output' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Color_Output) == 0x000040, "Member 'BP_BiomeManager_C_Pick_Variable::Color_Output' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, Pick_Single_Float) == 0x000050, "Member 'BP_BiomeManager_C_Pick_Variable::Pick_Single_Float' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, CallFunc_GetLinearColorValue_ReturnValue) == 0x000054, "Member 'BP_BiomeManager_C_Pick_Variable::CallFunc_GetLinearColorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, CallFunc_GetFloatValue_ReturnValue) == 0x000064, "Member 'BP_BiomeManager_C_Pick_Variable::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, K2Node_SwitchEnum_CmpSuccess) == 0x000068, "Member 'BP_BiomeManager_C_Pick_Variable::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x00006C, "Member 'BP_BiomeManager_C_Pick_Variable::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, CallFunc_GetLinearColorValue_InTime_ImplicitCast) == 0x000070, "Member 'BP_BiomeManager_C_Pick_Variable::CallFunc_GetLinearColorValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Pick_Variable, K2Node_FunctionResult_Float_Output_ImplicitCast) == 0x000078, "Member 'BP_BiomeManager_C_Pick_Variable::K2Node_FunctionResult_Float_Output_ImplicitCast' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Row Name To Biome
// 0x0028 (0x0028 - 0x0000)
struct BP_BiomeManager_C_Row_Name_To_Biome final
{
public:
	class FName                                   In_Row_Name;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       Row_Name_0;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Row_Name_To_Biome) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Row_Name_To_Biome");
static_assert(sizeof(BP_BiomeManager_C_Row_Name_To_Biome) == 0x000028, "Wrong size on BP_BiomeManager_C_Row_Name_To_Biome");
static_assert(offsetof(BP_BiomeManager_C_Row_Name_To_Biome, In_Row_Name) == 0x000000, "Member 'BP_BiomeManager_C_Row_Name_To_Biome::In_Row_Name' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Row_Name_To_Biome, Row_Name_0) == 0x000008, "Member 'BP_BiomeManager_C_Row_Name_To_Biome::Row_Name_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Row_Name_To_Biome, CallFunc_Conv_NameToString_ReturnValue) == 0x000010, "Member 'BP_BiomeManager_C_Row_Name_To_Biome::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Row_Name_To_Biome, K2Node_SwitchString_CmpSuccess) == 0x000020, "Member 'BP_BiomeManager_C_Row_Name_To_Biome::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.Run Biome BP Functions
// 0x09B8 (0x09B8 - 0x0000)
struct BP_BiomeManager_C_Run_Biome_BP_Functions final
{
public:
	int32                                         In_Month;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Input;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_GlobalAtmosphereOutput         CURRENT_Global_Struct_0;                           // 0x0020(0x02E0)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Normalized_Year_In;                                // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Current_Biome_Climate;                             // 0x0308(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FSTRUCT_SingularClimateData> Biome_Climate_Map;                         // 0x0338(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSTRUCT_GlobalAtmosphereOutput         Global;                                            // 0x0388(0x02E0)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSTRUCT_SingularClimateData            Current_Biome_Climate_Out;                         // 0x0668(0x0030)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       DEBUG_Current_Biome;                               // 0x0698(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_GlobalAtmosphereOutput         CallFunc_Blend_Biome_Data_Global;                  // 0x06A0(0x02E0)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EBiomes                                       CallFunc_Blend_Biome_Data_Current_Biome;           // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_981[0x7];                                      // 0x0981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTRUCT_SingularClimateData            CallFunc_Blend_Biome_Data_Current_Biome_Climate_Out; // 0x0988(0x0030)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BiomeManager_C_Run_Biome_BP_Functions) == 0x000008, "Wrong alignment on BP_BiomeManager_C_Run_Biome_BP_Functions");
static_assert(sizeof(BP_BiomeManager_C_Run_Biome_BP_Functions) == 0x0009B8, "Wrong size on BP_BiomeManager_C_Run_Biome_BP_Functions");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, In_Month) == 0x000000, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::In_Month' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Location) == 0x000008, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Location' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Time_Input) == 0x000018, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Time_Input' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, CURRENT_Global_Struct_0) == 0x000020, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::CURRENT_Global_Struct_0' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Normalized_Year_In) == 0x000300, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Normalized_Year_In' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Current_Biome_Climate) == 0x000308, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Current_Biome_Climate' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Biome_Climate_Map) == 0x000338, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Biome_Climate_Map' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Global) == 0x000388, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Global' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, Current_Biome_Climate_Out) == 0x000668, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::Current_Biome_Climate_Out' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, DEBUG_Current_Biome) == 0x000698, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::DEBUG_Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, CallFunc_Blend_Biome_Data_Global) == 0x0006A0, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::CallFunc_Blend_Biome_Data_Global' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, CallFunc_Blend_Biome_Data_Current_Biome) == 0x000980, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::CallFunc_Blend_Biome_Data_Current_Biome' has a wrong offset!");
static_assert(offsetof(BP_BiomeManager_C_Run_Biome_BP_Functions, CallFunc_Blend_Biome_Data_Current_Biome_Climate_Out) == 0x000988, "Member 'BP_BiomeManager_C_Run_Biome_BP_Functions::CallFunc_Blend_Biome_Data_Current_Biome_Climate_Out' has a wrong offset!");

// Function BP_BiomeManager.BP_BiomeManager_C.UserConstructionScript
// 0x0050 (0x0050 - 0x0000)
struct BP_BiomeManager_C_UserConstructionScript final
{
public:
	TMap<class FName, struct FSTRUCT_SingularClimateData> CallFunc_INIT_Biome_Data_Tables_Climate_Single_Day; // 0x0000(0x0050)()
};
static_assert(alignof(BP_BiomeManager_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_BiomeManager_C_UserConstructionScript");
static_assert(sizeof(BP_BiomeManager_C_UserConstructionScript) == 0x000050, "Wrong size on BP_BiomeManager_C_UserConstructionScript");
static_assert(offsetof(BP_BiomeManager_C_UserConstructionScript, CallFunc_INIT_Biome_Data_Tables_Climate_Single_Day) == 0x000000, "Member 'BP_BiomeManager_C_UserConstructionScript::CallFunc_INIT_Biome_Data_Tables_Climate_Single_Day' has a wrong offset!");

}

