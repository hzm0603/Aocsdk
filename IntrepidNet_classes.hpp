#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IntrepidNet

#include "Basic.hpp"

#include "IntrepidNetCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "OnlineSubsystemUtils_classes.hpp"
#include "IntrepidNet_structs.hpp"
#include "ReplicationGraph_classes.hpp"


namespace SDK
{

// Class IntrepidNet.IntrepidNetConfig
// 0x0008 (0x0050 - 0x0048)
class UIntrepidNetConfig final : public UObject
{
public:
	float                                         ServerLevelStreamingExpansion;                     // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetConfig">();
	}
	static class UIntrepidNetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetConfig>();
	}
};
static_assert(alignof(UIntrepidNetConfig) == 0x000008, "Wrong alignment on UIntrepidNetConfig");
static_assert(sizeof(UIntrepidNetConfig) == 0x000050, "Wrong size on UIntrepidNetConfig");
static_assert(offsetof(UIntrepidNetConfig, ServerLevelStreamingExpansion) == 0x000048, "Member 'UIntrepidNetConfig::ServerLevelStreamingExpansion' has a wrong offset!");

// Class IntrepidNet.IntrepidNetConnection
// 0x00B0 (0x2040 - 0x1F90)
class UIntrepidNetConnection final : public UIpConnection
{
public:
	uint8                                         Pad_1F90[0xB0];                                    // 0x1F90(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetConnection">();
	}
	static class UIntrepidNetConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetConnection>();
	}
};
static_assert(alignof(UIntrepidNetConnection) == 0x000008, "Wrong alignment on UIntrepidNetConnection");
static_assert(sizeof(UIntrepidNetConnection) == 0x002040, "Wrong size on UIntrepidNetConnection");

// Class IntrepidNet.IntrepidNetDebugSystem
// 0x01F0 (0x0250 - 0x0060)
class UIntrepidNetDebugSystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReplicationGraphUpdateThrottleS;                   // 0x0070(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplicationGraphUpdateCountPerFrame;               // 0x0074(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x168];                                     // 0x0078(0x0168)(Fixing Size After Last Property [ Dumper-7 ])
	class UIntrepidNetGameInstance*               GameInstance;                                      // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x61];                                     // 0x01E8(0x0061)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableIntrepidNetDebugger;                        // 0x0249(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableReplicationGraphDebugData;                  // 0x024A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24B[0x5];                                      // 0x024B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetDebugSystem">();
	}
	static class UIntrepidNetDebugSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetDebugSystem>();
	}
};
static_assert(alignof(UIntrepidNetDebugSystem) == 0x000008, "Wrong alignment on UIntrepidNetDebugSystem");
static_assert(sizeof(UIntrepidNetDebugSystem) == 0x000250, "Wrong size on UIntrepidNetDebugSystem");
static_assert(offsetof(UIntrepidNetDebugSystem, ReplicationGraphUpdateThrottleS) == 0x000070, "Member 'UIntrepidNetDebugSystem::ReplicationGraphUpdateThrottleS' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugSystem, ReplicationGraphUpdateCountPerFrame) == 0x000074, "Member 'UIntrepidNetDebugSystem::ReplicationGraphUpdateCountPerFrame' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugSystem, GameInstance) == 0x0001E0, "Member 'UIntrepidNetDebugSystem::GameInstance' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugSystem, bEnableIntrepidNetDebugger) == 0x000249, "Member 'UIntrepidNetDebugSystem::bEnableIntrepidNetDebugger' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugSystem, bEnableReplicationGraphDebugData) == 0x00024A, "Member 'UIntrepidNetDebugSystem::bEnableReplicationGraphDebugData' has a wrong offset!");

// Class IntrepidNet.IntrepidNetDebugComponent
// 0x00B0 (0x01A8 - 0x00F8)
class UIntrepidNetDebugComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ServerDataUpdated;                                 // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDrawingRegionsToggled;                           // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FIntrepidNetTransferData               TransferData;                                      // 0x0120(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntrepidNetClientServerDebugData      ClientsServerDebugData;                            // 0x0150(0x0050)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x8];                                      // 0x01A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientTransferDataRPC(const struct FTimespan& TimePromotionTook);
	void HandleServerDataUpdated();
	void OnPromotion(bool bWasProxy);
	void OnServerDataChanged();
	void ServerSplitServerCell(ESubdivisionAxis SubdivisionAxis, float Value, bool bUseLocation);
	void SplitServerCell(const class FString& Axis, float SplitRatio);
	void SplitServerCellAt(const class FString& Axis, float Position);

	bool IsDrawingServerRegions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetDebugComponent">();
	}
	static class UIntrepidNetDebugComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetDebugComponent>();
	}
};
static_assert(alignof(UIntrepidNetDebugComponent) == 0x000008, "Wrong alignment on UIntrepidNetDebugComponent");
static_assert(sizeof(UIntrepidNetDebugComponent) == 0x0001A8, "Wrong size on UIntrepidNetDebugComponent");
static_assert(offsetof(UIntrepidNetDebugComponent, ServerDataUpdated) == 0x000100, "Member 'UIntrepidNetDebugComponent::ServerDataUpdated' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugComponent, OnDrawingRegionsToggled) == 0x000110, "Member 'UIntrepidNetDebugComponent::OnDrawingRegionsToggled' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugComponent, TransferData) == 0x000120, "Member 'UIntrepidNetDebugComponent::TransferData' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDebugComponent, ClientsServerDebugData) == 0x000150, "Member 'UIntrepidNetDebugComponent::ClientsServerDebugData' has a wrong offset!");

// Class IntrepidNet.IntrepidNetDriver
// 0x03B8 (0x0C60 - 0x08A8)
class UIntrepidNetDriver final : public UIpNetDriver
{
public:
	class UIntrepidNetServerPackageMap*           ServerPackageMap;                                  // 0x08A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8B0[0x360];                                    // 0x08B0(0x0360)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGuid, TWeakObjectPtr<class APlayerController>> TimingOutPlayers;                                  // 0x0C10(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetDriver">();
	}
	static class UIntrepidNetDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetDriver>();
	}
};
static_assert(alignof(UIntrepidNetDriver) == 0x000008, "Wrong alignment on UIntrepidNetDriver");
static_assert(sizeof(UIntrepidNetDriver) == 0x000C60, "Wrong size on UIntrepidNetDriver");
static_assert(offsetof(UIntrepidNetDriver, ServerPackageMap) == 0x0008A8, "Member 'UIntrepidNetDriver::ServerPackageMap' has a wrong offset!");
static_assert(offsetof(UIntrepidNetDriver, TimingOutPlayers) == 0x000C10, "Member 'UIntrepidNetDriver::TimingOutPlayers' has a wrong offset!");

// Class IntrepidNet.IntrepidNetGameInstance
// 0x0080 (0x02A0 - 0x0220)
class UIntrepidNetGameInstance : public UGameInstance
{
public:
	uint8                                         Pad_220[0x80];                                     // 0x0220(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetGameInstance">();
	}
	static class UIntrepidNetGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetGameInstance>();
	}
};
static_assert(alignof(UIntrepidNetGameInstance) == 0x000008, "Wrong alignment on UIntrepidNetGameInstance");
static_assert(sizeof(UIntrepidNetGameInstance) == 0x0002A0, "Wrong size on UIntrepidNetGameInstance");

// Class IntrepidNet.IntrepidNetGameMode
// 0x0000 (0x0438 - 0x0438)
class AIntrepidNetGameMode final : public AGameMode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetGameMode">();
	}
	static class AIntrepidNetGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIntrepidNetGameMode>();
	}
};
static_assert(alignof(AIntrepidNetGameMode) == 0x000008, "Wrong alignment on AIntrepidNetGameMode");
static_assert(sizeof(AIntrepidNetGameMode) == 0x000438, "Wrong size on AIntrepidNetGameMode");

// Class IntrepidNet.IntrepidNetGameModeBase
// 0x0000 (0x03F0 - 0x03F0)
class AIntrepidNetGameModeBase : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetGameModeBase">();
	}
	static class AIntrepidNetGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIntrepidNetGameModeBase>();
	}
};
static_assert(alignof(AIntrepidNetGameModeBase) == 0x000008, "Wrong alignment on AIntrepidNetGameModeBase");
static_assert(sizeof(AIntrepidNetGameModeBase) == 0x0003F0, "Wrong size on AIntrepidNetGameModeBase");

// Class IntrepidNet.IntrepidNetReplicationGraphNode_ActorListFrequencyBuckets
// 0x01D8 (0x0248 - 0x0070)
class UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets final : public UReplicationGraphNode
{
public:
	uint8                                         Pad_70[0x1D8];                                     // 0x0070(0x01D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetReplicationGraphNode_ActorListFrequencyBuckets">();
	}
	static class UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets>();
	}
};
static_assert(alignof(UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets) == 0x000008, "Wrong alignment on UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets");
static_assert(sizeof(UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets) == 0x000248, "Wrong size on UIntrepidNetReplicationGraphNode_ActorListFrequencyBuckets");

// Class IntrepidNet.IntrepidNetReplicationGraphNode_LargeCullDistance
// 0x0000 (0x00F0 - 0x00F0)
class UIntrepidNetReplicationGraphNode_LargeCullDistance final : public UReplicationGraphNode_ActorList
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetReplicationGraphNode_LargeCullDistance">();
	}
	static class UIntrepidNetReplicationGraphNode_LargeCullDistance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetReplicationGraphNode_LargeCullDistance>();
	}
};
static_assert(alignof(UIntrepidNetReplicationGraphNode_LargeCullDistance) == 0x000008, "Wrong alignment on UIntrepidNetReplicationGraphNode_LargeCullDistance");
static_assert(sizeof(UIntrepidNetReplicationGraphNode_LargeCullDistance) == 0x0000F0, "Wrong size on UIntrepidNetReplicationGraphNode_LargeCullDistance");

// Class IntrepidNet.IntrepidNetReplicationGraphConnection
// 0x0008 (0x03C8 - 0x03C0)
class UIntrepidNetReplicationGraphConnection final : public UNetReplicationGraphConnection
{
public:
	class UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection* AlwaysRelevantForConnectionNode;                   // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetReplicationGraphConnection">();
	}
	static class UIntrepidNetReplicationGraphConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetReplicationGraphConnection>();
	}
};
static_assert(alignof(UIntrepidNetReplicationGraphConnection) == 0x000008, "Wrong alignment on UIntrepidNetReplicationGraphConnection");
static_assert(sizeof(UIntrepidNetReplicationGraphConnection) == 0x0003C8, "Wrong size on UIntrepidNetReplicationGraphConnection");
static_assert(offsetof(UIntrepidNetReplicationGraphConnection, AlwaysRelevantForConnectionNode) == 0x0003C0, "Member 'UIntrepidNetReplicationGraphConnection::AlwaysRelevantForConnectionNode' has a wrong offset!");

// Class IntrepidNet.IntrepidNetReplicationGraph
// 0x0120 (0x0760 - 0x0640)
class UIntrepidNetReplicationGraph : public UReplicationGraph
{
public:
	float                                         SpatialGridCellSize;                               // 0x0638(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_63C[0x14];                                     // 0x063C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDisableSpatialRebuilding;                         // 0x0650(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEnableMultiThreading;                             // 0x0651(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_652[0xAE];                                     // 0x0652(0x00AE)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, EClassRepPolicy>          OwnerDependencyActorPolicies;                      // 0x0700(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class UClass*>                         ExplicitlySetClasses;                              // 0x0750(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetReplicationGraph">();
	}
	static class UIntrepidNetReplicationGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetReplicationGraph>();
	}
};
static_assert(alignof(UIntrepidNetReplicationGraph) == 0x000010, "Wrong alignment on UIntrepidNetReplicationGraph");
static_assert(sizeof(UIntrepidNetReplicationGraph) == 0x000760, "Wrong size on UIntrepidNetReplicationGraph");
static_assert(offsetof(UIntrepidNetReplicationGraph, SpatialGridCellSize) == 0x000638, "Member 'UIntrepidNetReplicationGraph::SpatialGridCellSize' has a wrong offset!");
static_assert(offsetof(UIntrepidNetReplicationGraph, bDisableSpatialRebuilding) == 0x000650, "Member 'UIntrepidNetReplicationGraph::bDisableSpatialRebuilding' has a wrong offset!");
static_assert(offsetof(UIntrepidNetReplicationGraph, bEnableMultiThreading) == 0x000651, "Member 'UIntrepidNetReplicationGraph::bEnableMultiThreading' has a wrong offset!");
static_assert(offsetof(UIntrepidNetReplicationGraph, OwnerDependencyActorPolicies) == 0x000700, "Member 'UIntrepidNetReplicationGraph::OwnerDependencyActorPolicies' has a wrong offset!");
static_assert(offsetof(UIntrepidNetReplicationGraph, ExplicitlySetClasses) == 0x000750, "Member 'UIntrepidNetReplicationGraph::ExplicitlySetClasses' has a wrong offset!");

// Class IntrepidNet.IntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection
// 0x0008 (0x0168 - 0x0160)
class UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection final : public UReplicationGraphNode_AlwaysRelevant_ForConnection
{
public:
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection">();
	}
	static class UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection>();
	}
};
static_assert(alignof(UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection) == 0x000008, "Wrong alignment on UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection");
static_assert(sizeof(UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection) == 0x000168, "Wrong size on UIntrepidNetReplicationGraphNode_AlwaysRelevant_ForConnection");

// Class IntrepidNet.IntrepidNetServerPackageMap
// 0x0090 (0x0190 - 0x0100)
class UIntrepidNetServerPackageMap final : public UPackageMap
{
public:
	uint8                                         Pad_100[0x90];                                     // 0x0100(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnObjectDestroyed(class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetServerPackageMap">();
	}
	static class UIntrepidNetServerPackageMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetServerPackageMap>();
	}
};
static_assert(alignof(UIntrepidNetServerPackageMap) == 0x000008, "Wrong alignment on UIntrepidNetServerPackageMap");
static_assert(sizeof(UIntrepidNetServerPackageMap) == 0x000190, "Wrong size on UIntrepidNetServerPackageMap");

// Class IntrepidNet.IntrepidNetServiceHandler
// 0x0018 (0x0078 - 0x0060)
class UIntrepidNetServiceHandler : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetServiceHandler">();
	}
	static class UIntrepidNetServiceHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetServiceHandler>();
	}
};
static_assert(alignof(UIntrepidNetServiceHandler) == 0x000008, "Wrong alignment on UIntrepidNetServiceHandler");
static_assert(sizeof(UIntrepidNetServiceHandler) == 0x000078, "Wrong size on UIntrepidNetServiceHandler");

// Class IntrepidNet.IntrepidNetServiceManager
// 0x00B0 (0x0110 - 0x0060)
class UIntrepidNetServiceManager final : public UTickableWorldSubsystem
{
public:
	TArray<class UIntrepidNetCoreService*>        ServicesToTick;                                    // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class UClass*, class UIntrepidNetCoreService*> ServicesRunning;                                   // 0x0070(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class UClass*, struct FIntrepidNetCoreServiceConfig> ServiceConfigurations;                             // 0x00C0(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetServiceManager">();
	}
	static class UIntrepidNetServiceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetServiceManager>();
	}
};
static_assert(alignof(UIntrepidNetServiceManager) == 0x000008, "Wrong alignment on UIntrepidNetServiceManager");
static_assert(sizeof(UIntrepidNetServiceManager) == 0x000110, "Wrong size on UIntrepidNetServiceManager");
static_assert(offsetof(UIntrepidNetServiceManager, ServicesToTick) == 0x000060, "Member 'UIntrepidNetServiceManager::ServicesToTick' has a wrong offset!");
static_assert(offsetof(UIntrepidNetServiceManager, ServicesRunning) == 0x000070, "Member 'UIntrepidNetServiceManager::ServicesRunning' has a wrong offset!");
static_assert(offsetof(UIntrepidNetServiceManager, ServiceConfigurations) == 0x0000C0, "Member 'UIntrepidNetServiceManager::ServiceConfigurations' has a wrong offset!");

// Class IntrepidNet.IntrepidNetUtilitySubsystem
// 0x0088 (0x00E8 - 0x0060)
class UIntrepidNetUtilitySubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_60[0x88];                                      // 0x0060(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BuildAndShowCurrentConfiguration();
	void BuildServerGrid(const struct FVector& Origin, const struct FVector& Extents, int32 NumX, int32 NumY);
	void ClearRegionsToDraw();
	TArray<class FString> GetIntrepidNetConfigProfiles();
	bool MakeIntrepidNetConfig(const class FString& Name_0, const struct FVector& WorldOrigin, const struct FVector& WorldSize, const int32 GridNodesX, const int32 GridNodesY, const TArray<struct FVector>& PlayerStartLocations);
	void OnConfigUpdated(const class FString& NewConfigFile);
	bool ReadConfig(const class FString& Filename, struct FIntrepidNetConfigUnreal* OutConfig, class FString* Error);
	bool WriteConfig(const class FString& Filename, const struct FIntrepidNetConfigUnreal& Config, class FString* Error);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetUtilitySubsystem">();
	}
	static class UIntrepidNetUtilitySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetUtilitySubsystem>();
	}
};
static_assert(alignof(UIntrepidNetUtilitySubsystem) == 0x000008, "Wrong alignment on UIntrepidNetUtilitySubsystem");
static_assert(sizeof(UIntrepidNetUtilitySubsystem) == 0x0000E8, "Wrong size on UIntrepidNetUtilitySubsystem");

// Class IntrepidNet.IntrepidNetWorldStreamingPolicy
// 0x0000 (0x0318 - 0x0318)
class UIntrepidNetWorldStreamingPolicy final : public UWorldPartitionLevelStreamingPolicy
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidNetWorldStreamingPolicy">();
	}
	static class UIntrepidNetWorldStreamingPolicy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidNetWorldStreamingPolicy>();
	}
};
static_assert(alignof(UIntrepidNetWorldStreamingPolicy) == 0x000008, "Wrong alignment on UIntrepidNetWorldStreamingPolicy");
static_assert(sizeof(UIntrepidNetWorldStreamingPolicy) == 0x000318, "Wrong size on UIntrepidNetWorldStreamingPolicy");

// Class IntrepidNet.IntrepidRepKeyComponent
// 0x0008 (0x0100 - 0x00F8)
class UIntrepidRepKeyComponent : public UActorComponent
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MarkDirtyForReplication();

	int32 GetReplicationKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidRepKeyComponent">();
	}
	static class UIntrepidRepKeyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidRepKeyComponent>();
	}
};
static_assert(alignof(UIntrepidRepKeyComponent) == 0x000008, "Wrong alignment on UIntrepidRepKeyComponent");
static_assert(sizeof(UIntrepidRepKeyComponent) == 0x000100, "Wrong size on UIntrepidRepKeyComponent");

}

