#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TetrisResourceContainer

#include "Basic.hpp"

#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_TetrisResourceContainer.WBP_TetrisResourceContainer_C
// 0x00C8 (0x0520 - 0x0458)
class UWBP_TetrisResourceContainer_C final : public UTetrisResourceContainer
{
public:
	class UImage*                                 BGAcccent1;                                        // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BGAcccent2;                                        // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BGVignette;                                        // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       CounterText;                                       // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_1;                         // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_2;                         // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_3;                         // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_4;                         // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_5;                         // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_6;                         // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_9;                         // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_10;                        // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_11;                        // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_13;                        // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_14;                        // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_15;                        // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_16;                        // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_17;                        // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_18;                        // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_24;                        // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_25;                        // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_26;                        // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_27;                        // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_28;                        // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TetrisInventorySlot_C*             WBP_TetrisInventorySlot_29;                        // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_TetrisResourceContainer_C">();
	}
	static class UWBP_TetrisResourceContainer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_TetrisResourceContainer_C>();
	}
};
static_assert(alignof(UWBP_TetrisResourceContainer_C) == 0x000008, "Wrong alignment on UWBP_TetrisResourceContainer_C");
static_assert(sizeof(UWBP_TetrisResourceContainer_C) == 0x000520, "Wrong size on UWBP_TetrisResourceContainer_C");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, BGAcccent1) == 0x000458, "Member 'UWBP_TetrisResourceContainer_C::BGAcccent1' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, BGAcccent2) == 0x000460, "Member 'UWBP_TetrisResourceContainer_C::BGAcccent2' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, BGVignette) == 0x000468, "Member 'UWBP_TetrisResourceContainer_C::BGVignette' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, CounterText) == 0x000470, "Member 'UWBP_TetrisResourceContainer_C::CounterText' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_1) == 0x000478, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_1' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_2) == 0x000480, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_2' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_3) == 0x000488, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_3' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_4) == 0x000490, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_4' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_5) == 0x000498, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_5' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_6) == 0x0004A0, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_6' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_9) == 0x0004A8, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_9' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_10) == 0x0004B0, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_10' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_11) == 0x0004B8, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_11' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_13) == 0x0004C0, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_13' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_14) == 0x0004C8, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_14' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_15) == 0x0004D0, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_15' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_16) == 0x0004D8, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_16' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_17) == 0x0004E0, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_17' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_18) == 0x0004E8, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_18' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_24) == 0x0004F0, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_24' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_25) == 0x0004F8, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_25' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_26) == 0x000500, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_26' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_27) == 0x000508, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_27' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_28) == 0x000510, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_28' has a wrong offset!");
static_assert(offsetof(UWBP_TetrisResourceContainer_C, WBP_TetrisInventorySlot_29) == 0x000518, "Member 'UWBP_TetrisResourceContainer_C::WBP_TetrisInventorySlot_29' has a wrong offset!");

}

