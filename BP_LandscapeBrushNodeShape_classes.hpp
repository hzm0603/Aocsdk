#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LandscapeBrushNodeShape

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ENodeShapes_structs.hpp"
#include "SNodeShape_structs.hpp"
#include "SNodePositionLevel_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LandscapeBrushNodeShape.BP_LandscapeBrushNodeShape_C
// 0x0218 (0x0568 - 0x0350)
class ABP_LandscapeBrushNodeShape_C final : public ALandscapeBrushBaseActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        ScaleToMatchTexture;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_Cone;                                   // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_ImagePlane;                             // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ENodeShapes                                   Node_Shape;                                        // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bowl_Shape;                                        // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, double>                     Layer_Masks;                                       // 0x0380(0x0050)(Edit, BlueprintVisible)
	struct FSNodeShape                            Node_Shape_Data;                                   // 0x03D0(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Show_Border;                                       // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ABP_LandscapeBrushRoad_C>> Connected_Roads;                          // 0x0478(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_WaterSpline_C*>              Connected_Rivers;                                  // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UBillboardComponent*>            Road_Billboard_Components;                         // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<bool>                                  Is_Road_End;                                       // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Connected_Max_Road_Widths;                         // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Connected_Road_Widths;                             // 0x04C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Self_Road_Widths;                                  // 0x04D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Connected_Fade_Distances;                          // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Connected_Road_Levels;                             // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Self_Road_Levels;                                  // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Connected_Groove_Depths;                           // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSNodePositionLevel>            Node_Data;                                         // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               Brush_DMI;                                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Show_Border_Decal;                                 // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBillboardComponent*>            River_Billboard_Components;                        // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<bool>                                  Is_River_End;                                      // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void Add_Child_Road_Helpers();
	void Add_This_Brush_To_Only_Update_List();
	void Adjust_Connected_Actor_Endpoints();
	void Clear_Brush_DMI();
	void disable();
	void EditorAddLandscapeBrushToManagerUpdateArray();
	void EditorPrepForSceneCapture(const bool bIsCapturing, const class FName LayerName);
	void EditorRemoveLandscapeBrushFromManagerUpdateArray();
	void Enable();
	void ExecuteUbergraph_BP_LandscapeBrushNodeShape(int32 EntryPoint);
	void Populate_Is_Road_End_Array();
	void Position_And_Scale_Cone_Helper();
	void PrepForSceneCapture(bool IsCapturing, class FName LayerName);
	void Refresh_Road_Connections();
	void Remove_This_Brush_From_Only_Update_List();
	void Setup_Brush_DMI();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LandscapeBrushNodeShape_C">();
	}
	static class ABP_LandscapeBrushNodeShape_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LandscapeBrushNodeShape_C>();
	}
};
static_assert(alignof(ABP_LandscapeBrushNodeShape_C) == 0x000008, "Wrong alignment on ABP_LandscapeBrushNodeShape_C");
static_assert(sizeof(ABP_LandscapeBrushNodeShape_C) == 0x000568, "Wrong size on ABP_LandscapeBrushNodeShape_C");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, UberGraphFrame) == 0x000350, "Member 'ABP_LandscapeBrushNodeShape_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, ScaleToMatchTexture) == 0x000358, "Member 'ABP_LandscapeBrushNodeShape_C::ScaleToMatchTexture' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, StaticMesh_Cone) == 0x000360, "Member 'ABP_LandscapeBrushNodeShape_C::StaticMesh_Cone' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Box) == 0x000368, "Member 'ABP_LandscapeBrushNodeShape_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, StaticMesh_ImagePlane) == 0x000370, "Member 'ABP_LandscapeBrushNodeShape_C::StaticMesh_ImagePlane' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Node_Shape) == 0x000378, "Member 'ABP_LandscapeBrushNodeShape_C::Node_Shape' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Bowl_Shape) == 0x000379, "Member 'ABP_LandscapeBrushNodeShape_C::Bowl_Shape' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Layer_Masks) == 0x000380, "Member 'ABP_LandscapeBrushNodeShape_C::Layer_Masks' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Node_Shape_Data) == 0x0003D0, "Member 'ABP_LandscapeBrushNodeShape_C::Node_Shape_Data' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Show_Border) == 0x000470, "Member 'ABP_LandscapeBrushNodeShape_C::Show_Border' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Roads) == 0x000478, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Roads' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Rivers) == 0x000488, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Rivers' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Road_Billboard_Components) == 0x000498, "Member 'ABP_LandscapeBrushNodeShape_C::Road_Billboard_Components' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Is_Road_End) == 0x0004A8, "Member 'ABP_LandscapeBrushNodeShape_C::Is_Road_End' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Max_Road_Widths) == 0x0004B8, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Max_Road_Widths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Road_Widths) == 0x0004C8, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Road_Widths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Self_Road_Widths) == 0x0004D8, "Member 'ABP_LandscapeBrushNodeShape_C::Self_Road_Widths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Fade_Distances) == 0x0004E8, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Fade_Distances' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Road_Levels) == 0x0004F8, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Road_Levels' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Self_Road_Levels) == 0x000508, "Member 'ABP_LandscapeBrushNodeShape_C::Self_Road_Levels' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Connected_Groove_Depths) == 0x000518, "Member 'ABP_LandscapeBrushNodeShape_C::Connected_Groove_Depths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Node_Data) == 0x000528, "Member 'ABP_LandscapeBrushNodeShape_C::Node_Data' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Brush_DMI) == 0x000538, "Member 'ABP_LandscapeBrushNodeShape_C::Brush_DMI' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Show_Border_Decal) == 0x000540, "Member 'ABP_LandscapeBrushNodeShape_C::Show_Border_Decal' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, River_Billboard_Components) == 0x000548, "Member 'ABP_LandscapeBrushNodeShape_C::River_Billboard_Components' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushNodeShape_C, Is_River_End) == 0x000558, "Member 'ABP_LandscapeBrushNodeShape_C::Is_River_End' has a wrong offset!");

}

