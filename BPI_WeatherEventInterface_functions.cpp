#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_WeatherEventInterface

#include "Basic.hpp"

#include "BPI_WeatherEventInterface_classes.hpp"
#include "BPI_WeatherEventInterface_parameters.hpp"


namespace SDK
{

// Function BPI_WeatherEventInterface.BPI_WeatherEventInterface_C.Adjust Weather
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Custom_Humidity_Max                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Humidity_Min                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Precipitation_Amount_Max                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Precipitation_Amount_Min                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Temp_Max                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Temp_Min                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_WindSpeed_Max                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Wind_Speed_Min                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Chance_Of_Precip_Max                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Custom_Chance_Of_Precip_Min                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_WeatherEventInterface_C::Adjust_Weather(double Custom_Humidity_Max, double Custom_Humidity_Min, double Custom_Precipitation_Amount_Max, double Custom_Precipitation_Amount_Min, double Custom_Temp_Max, double Custom_Temp_Min, double Custom_WindSpeed_Max, double Custom_Wind_Speed_Min, double Custom_Chance_Of_Precip_Max, double Custom_Chance_Of_Precip_Min)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_WeatherEventInterface_C", "Adjust Weather");

	Params::BPI_WeatherEventInterface_C_Adjust_Weather Parms{};

	Parms.Custom_Humidity_Max = Custom_Humidity_Max;
	Parms.Custom_Humidity_Min = Custom_Humidity_Min;
	Parms.Custom_Precipitation_Amount_Max = Custom_Precipitation_Amount_Max;
	Parms.Custom_Precipitation_Amount_Min = Custom_Precipitation_Amount_Min;
	Parms.Custom_Temp_Max = Custom_Temp_Max;
	Parms.Custom_Temp_Min = Custom_Temp_Min;
	Parms.Custom_WindSpeed_Max = Custom_WindSpeed_Max;
	Parms.Custom_Wind_Speed_Min = Custom_Wind_Speed_Min;
	Parms.Custom_Chance_Of_Precip_Max = Custom_Chance_Of_Precip_Max;
	Parms.Custom_Chance_Of_Precip_Min = Custom_Chance_Of_Precip_Min;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_WeatherEventInterface.BPI_WeatherEventInterface_C.End Adjust Weather
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_WeatherEventInterface_C::End_Adjust_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_WeatherEventInterface_C", "End Adjust Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_WeatherEventInterface.BPI_WeatherEventInterface_C.WeatherTransition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Transition                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_WeatherEventInterface_C::WeatherTransition(double Transition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_WeatherEventInterface_C", "WeatherTransition");

	Params::BPI_WeatherEventInterface_C_WeatherTransition Parms{};

	Parms.Transition = Transition;

	UObject::ProcessEvent(Func, &Parms);
}

}

