#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IntrepidWwiseExternalSource

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct IntrepidWwiseExternalSource.IntrepidWwiseExtSrcMediaInfo
// 0x001C (0x001C - 0x0000)
struct FIntrepidWwiseExtSrcMediaInfo final
{
public:
	int32                                         ExternalSourceMediaInfoId;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MediaName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CodecID;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStreamed;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDeviceMemory;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemoryAlignment;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrefetchSize;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntrepidWwiseExtSrcMediaInfo) == 0x000004, "Wrong alignment on FIntrepidWwiseExtSrcMediaInfo");
static_assert(sizeof(FIntrepidWwiseExtSrcMediaInfo) == 0x00001C, "Wrong size on FIntrepidWwiseExtSrcMediaInfo");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, ExternalSourceMediaInfoId) == 0x000000, "Member 'FIntrepidWwiseExtSrcMediaInfo::ExternalSourceMediaInfoId' has a wrong offset!");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, MediaName) == 0x000004, "Member 'FIntrepidWwiseExtSrcMediaInfo::MediaName' has a wrong offset!");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, CodecID) == 0x00000C, "Member 'FIntrepidWwiseExtSrcMediaInfo::CodecID' has a wrong offset!");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, bIsStreamed) == 0x000010, "Member 'FIntrepidWwiseExtSrcMediaInfo::bIsStreamed' has a wrong offset!");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, bUseDeviceMemory) == 0x000011, "Member 'FIntrepidWwiseExtSrcMediaInfo::bUseDeviceMemory' has a wrong offset!");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, MemoryAlignment) == 0x000014, "Member 'FIntrepidWwiseExtSrcMediaInfo::MemoryAlignment' has a wrong offset!");
static_assert(offsetof(FIntrepidWwiseExtSrcMediaInfo, PrefetchSize) == 0x000018, "Member 'FIntrepidWwiseExtSrcMediaInfo::PrefetchSize' has a wrong offset!");

}

