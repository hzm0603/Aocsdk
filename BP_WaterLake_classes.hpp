#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterLake

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GeometryScriptingCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterLake.BP_WaterLake_C
// 0x01A0 (0x04E8 - 0x0348)
class ABP_WaterLake_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIntrepidAkComponent*                   AKAmbientSource;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Audio_Holder;                                      // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DisplayMeshSTATIC;                                 // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  Display_Mesh;                                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Segments_Per_Meter;                                // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      Frames;                                            // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Frame_Times;                                       // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGeometryScriptColorList               VertColors;                                        // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Preview_Segments;                                  // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Edge_Length;                                // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Constant_Water_Velocity;                           // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Water_Display_Material;                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Preview_Edge_Length;                               // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Water_Mesh_Gen_Path;                               // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMesh*                            Static_Display_Mesh;                               // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Meshes_Baked_;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Meshes_BakedPrev;                                  // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40A[0x6];                                      // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDynamicMeshPool*                       Dynamic_Mesh_Pool;                                 // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Lake_Depth;                                        // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_GridBased_Swim_Vols_;                          // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Swim_Volume_Count;                                 // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Water_Sort_Priority;                               // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_UNBAKED_Markers_;                             // 0x042C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Data_Mesh_Padding;                                 // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkAudioEvent*>                  AKEventEmitters;                                   // 0x0438(0x0010)(Edit, BlueprintVisible)
	bool                                          Debug_Audio;                                       // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   SwimVol;                                           // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   BakeMarker;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int64                                         Checksum;                                          // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         PrevChecksum;                                      // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Water_Color_;                             // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Water_Color;                                       // 0x0474(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Absorbtion_Intensity;                              // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scattering_Intensity;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Display_MID;                                       // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Water_Minimap_Material;                            // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Volume_Offset;                               // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGatheringInteractionDataId            FishingData;                                       // 0x04B0(0x0018)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Volume_Transforms;                                 // 0x04C8(0x0010)(Edit, BlueprintVisible)
	bool                                          BakingMeshes_;                                     // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D9[0x7];                                      // 0x04D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Minimum_Total_Segments;                            // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Swim_Volumes();
	void Bake_Mesh(class UDynamicMeshComponent* Dynamic_Mesh, class UMaterialInterface* Material, const class FString& Asset_Tag, class UStaticMesh** Out_SM);
	void Bake_Vertex_Colors(class UDynamicMeshComponent* DynMesh);
	void Bake_Water_Meshes();
	void Build_Display_Mesh(const TArray<struct FVector2D>& PolygonVertices);
	void Build_Profile_for_Spline(double Width, int32 Divisions, TArray<struct FVector2D>* Positions, TArray<double>* UVs);
	void Check_if_Mesh_Asset_Exists(const class FString& Asset_Name, bool* Exists_, class UStaticMesh** Return_Mesh);
	void CheckInvalidateMeshes(bool* Invalidated);
	void Decompose_To_Volume_Transforms(TArray<struct FTransform>* Transforms);
	void Editor_Water_Tick();
	void Editor_Water_Update();
	void ExecuteUbergraph_BP_WaterLake(int32 EntryPoint);
	void Fix_Up_Meshes();
	void Get_Current_at_Location(const struct FVector& World_Location, struct FVector2D* Current_Velocity);
	void Get_Samples_From_Spline(const class USplineComponent* Spline_0, double Spacing, TArray<struct FVector2D>* Frames_0, TArray<double>* FrameTimes);
	void GetControlledPawnLocation(struct FVector* ControlledPawnLocation);
	void GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation);
	class USplineComponent* GetSplineComponent();
	class USceneComponent* GetSplineEmitterComponent();
	bool Outside_Spline();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void Refresh_Water_Info();
	void Refresh_Water_Info_Delayed();
	void RenderingMinimap(bool Rendering);
	void Setup_Debug();
	void Setup_Dynamic_Meshes();
	void Setup_StaticMesh(class UStaticMesh* Mesh, class UStaticMeshComponent* Component, class UStaticMesh*& Var);
	void Update_Mesh_Visibility();
	void Update_Static_Meshes();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterLake_C">();
	}
	static class ABP_WaterLake_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterLake_C>();
	}
};
static_assert(alignof(ABP_WaterLake_C) == 0x000008, "Wrong alignment on ABP_WaterLake_C");
static_assert(sizeof(ABP_WaterLake_C) == 0x0004E8, "Wrong size on ABP_WaterLake_C");
static_assert(offsetof(ABP_WaterLake_C, UberGraphFrame) == 0x000348, "Member 'ABP_WaterLake_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Billboard) == 0x000350, "Member 'ABP_WaterLake_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, AKAmbientSource) == 0x000358, "Member 'ABP_WaterLake_C::AKAmbientSource' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Audio_Holder) == 0x000360, "Member 'ABP_WaterLake_C::Audio_Holder' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, DisplayMeshSTATIC) == 0x000368, "Member 'ABP_WaterLake_C::DisplayMeshSTATIC' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Display_Mesh) == 0x000370, "Member 'ABP_WaterLake_C::Display_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Spline) == 0x000378, "Member 'ABP_WaterLake_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, DefaultSceneRoot) == 0x000380, "Member 'ABP_WaterLake_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Segments_Per_Meter) == 0x000388, "Member 'ABP_WaterLake_C::Segments_Per_Meter' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Frames) == 0x000390, "Member 'ABP_WaterLake_C::Frames' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Frame_Times) == 0x0003A0, "Member 'ABP_WaterLake_C::Frame_Times' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, VertColors) == 0x0003B0, "Member 'ABP_WaterLake_C::VertColors' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Preview_Segments) == 0x0003C0, "Member 'ABP_WaterLake_C::Preview_Segments' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Target_Edge_Length) == 0x0003C8, "Member 'ABP_WaterLake_C::Target_Edge_Length' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Constant_Water_Velocity) == 0x0003D0, "Member 'ABP_WaterLake_C::Constant_Water_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Water_Display_Material) == 0x0003E0, "Member 'ABP_WaterLake_C::Water_Display_Material' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Preview_Edge_Length) == 0x0003E8, "Member 'ABP_WaterLake_C::Preview_Edge_Length' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Water_Mesh_Gen_Path) == 0x0003F0, "Member 'ABP_WaterLake_C::Water_Mesh_Gen_Path' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Static_Display_Mesh) == 0x000400, "Member 'ABP_WaterLake_C::Static_Display_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Meshes_Baked_) == 0x000408, "Member 'ABP_WaterLake_C::Meshes_Baked_' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Meshes_BakedPrev) == 0x000409, "Member 'ABP_WaterLake_C::Meshes_BakedPrev' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Dynamic_Mesh_Pool) == 0x000410, "Member 'ABP_WaterLake_C::Dynamic_Mesh_Pool' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Lake_Depth) == 0x000418, "Member 'ABP_WaterLake_C::Lake_Depth' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Use_GridBased_Swim_Vols_) == 0x000420, "Member 'ABP_WaterLake_C::Use_GridBased_Swim_Vols_' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Swim_Volume_Count) == 0x000424, "Member 'ABP_WaterLake_C::Swim_Volume_Count' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Water_Sort_Priority) == 0x000428, "Member 'ABP_WaterLake_C::Water_Sort_Priority' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Show_UNBAKED_Markers_) == 0x00042C, "Member 'ABP_WaterLake_C::Show_UNBAKED_Markers_' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Data_Mesh_Padding) == 0x000430, "Member 'ABP_WaterLake_C::Data_Mesh_Padding' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, AKEventEmitters) == 0x000438, "Member 'ABP_WaterLake_C::AKEventEmitters' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Debug_Audio) == 0x000448, "Member 'ABP_WaterLake_C::Debug_Audio' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, SwimVol) == 0x000450, "Member 'ABP_WaterLake_C::SwimVol' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, BakeMarker) == 0x000458, "Member 'ABP_WaterLake_C::BakeMarker' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Checksum) == 0x000460, "Member 'ABP_WaterLake_C::Checksum' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, PrevChecksum) == 0x000468, "Member 'ABP_WaterLake_C::PrevChecksum' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Override_Water_Color_) == 0x000470, "Member 'ABP_WaterLake_C::Override_Water_Color_' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Water_Color) == 0x000474, "Member 'ABP_WaterLake_C::Water_Color' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Absorbtion_Intensity) == 0x000488, "Member 'ABP_WaterLake_C::Absorbtion_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Scattering_Intensity) == 0x000490, "Member 'ABP_WaterLake_C::Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Display_MID) == 0x000498, "Member 'ABP_WaterLake_C::Display_MID' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Water_Minimap_Material) == 0x0004A0, "Member 'ABP_WaterLake_C::Water_Minimap_Material' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Water_Volume_Offset) == 0x0004A8, "Member 'ABP_WaterLake_C::Water_Volume_Offset' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, FishingData) == 0x0004B0, "Member 'ABP_WaterLake_C::FishingData' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Volume_Transforms) == 0x0004C8, "Member 'ABP_WaterLake_C::Volume_Transforms' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, BakingMeshes_) == 0x0004D8, "Member 'ABP_WaterLake_C::BakingMeshes_' has a wrong offset!");
static_assert(offsetof(ABP_WaterLake_C, Minimum_Total_Segments) == 0x0004E0, "Member 'ABP_WaterLake_C::Minimum_Total_Segments' has a wrong offset!");

}

