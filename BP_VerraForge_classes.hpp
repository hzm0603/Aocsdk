#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VerraForge

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EN_PCGFoliageBrushType_structs.hpp"
#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VerraForge.BP_VerraForge_C
// 0x0070 (0x03C0 - 0x0350)
class ABP_VerraForge_C : public AVerraForge
{
public:
	class UObject*                                NodeLayoutToolManagerInterface;                    // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_ExclusionsCheck;                            // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPCGComponent*                          PCG;                                               // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Spacing;                                           // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Icon;                                              // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SplinePointArray;                                  // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EN_PCGFoliageBrushType                        BrushType;                                         // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TangentFactor;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumeScale;                                       // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepGenerator_;                                    // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesFoliage_;                                      // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BakeInstances();
	void Draw_Shapes();
	void Enable_PCG();
	void SetupExclusionCheckVolume();
	void UserConstructionScript();
	void UX_Icon();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VerraForge_C">();
	}
	static class ABP_VerraForge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VerraForge_C>();
	}
};
static_assert(alignof(ABP_VerraForge_C) == 0x000008, "Wrong alignment on ABP_VerraForge_C");
static_assert(sizeof(ABP_VerraForge_C) == 0x0003C0, "Wrong size on ABP_VerraForge_C");
static_assert(offsetof(ABP_VerraForge_C, NodeLayoutToolManagerInterface) == 0x000350, "Member 'ABP_VerraForge_C::NodeLayoutToolManagerInterface' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, Sphere_ExclusionsCheck) == 0x000358, "Member 'ABP_VerraForge_C::Sphere_ExclusionsCheck' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, PCG) == 0x000360, "Member 'ABP_VerraForge_C::PCG' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, Billboard) == 0x000368, "Member 'ABP_VerraForge_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, Spline) == 0x000370, "Member 'ABP_VerraForge_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, DefaultSceneRoot) == 0x000378, "Member 'ABP_VerraForge_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, Enabled) == 0x000380, "Member 'ABP_VerraForge_C::Enabled' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, Spacing) == 0x000388, "Member 'ABP_VerraForge_C::Spacing' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, Icon) == 0x000390, "Member 'ABP_VerraForge_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, SplinePointArray) == 0x000398, "Member 'ABP_VerraForge_C::SplinePointArray' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, BrushType) == 0x0003A8, "Member 'ABP_VerraForge_C::BrushType' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, TangentFactor) == 0x0003B0, "Member 'ABP_VerraForge_C::TangentFactor' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, VolumeScale) == 0x0003B8, "Member 'ABP_VerraForge_C::VolumeScale' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, KeepGenerator_) == 0x0003BC, "Member 'ABP_VerraForge_C::KeepGenerator_' has a wrong offset!");
static_assert(offsetof(ABP_VerraForge_C, UsesFoliage_) == 0x0003BD, "Member 'ABP_VerraForge_C::UsesFoliage_' has a wrong offset!");

}

