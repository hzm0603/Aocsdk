#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Chooser

#include "Basic.hpp"

#include "StructUtils_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Chooser.EBoolColumnCellValue
// NumValues: 0x0004
enum class EBoolColumnCellValue : uint8
{
	MatchFalse                               = 0,
	MatchTrue                                = 1,
	MatchAny                                 = 2,
	EBoolColumnCellValue_MAX                 = 3,
};

// Enum Chooser.EObjectChooserResultType
// NumValues: 0x0003
enum class EObjectChooserResultType : uint32
{
	ObjectResult                             = 0,
	ClassResult                              = 1,
	EObjectChooserResultType_MAX             = 2,
};

// Enum Chooser.EContextObjectDirection
// NumValues: 0x0004
enum class EContextObjectDirection : uint32
{
	Read                                     = 0,
	Write                                    = 1,
	ReadWrite                                = 2,
	EContextObjectDirection_MAX              = 3,
};

// Enum Chooser.EObjectColumnCellValueComparison
// NumValues: 0x0005
enum class EObjectColumnCellValueComparison : uint32
{
	MatchEqual                               = 0,
	MatchNotEqual                            = 1,
	MatchAny                                 = 2,
	Modulus                                  = 3,
	EObjectColumnCellValueComparison_MAX     = 4,
};

// ScriptStruct Chooser.ChooserParameterBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FChooserParameterBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserParameterBase) == 0x000008, "Wrong alignment on FChooserParameterBase");
static_assert(sizeof(FChooserParameterBase) == 0x000008, "Wrong size on FChooserParameterBase");

// ScriptStruct Chooser.ChooserParameterBoolBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterBoolBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterBoolBase) == 0x000008, "Wrong alignment on FChooserParameterBoolBase");
static_assert(sizeof(FChooserParameterBoolBase) == 0x000008, "Wrong size on FChooserParameterBoolBase");

// ScriptStruct Chooser.ChooserPropertyBinding
// 0x0018 (0x0018 - 0x0000)
struct FChooserPropertyBinding
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ContextIndex;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserPropertyBinding) == 0x000008, "Wrong alignment on FChooserPropertyBinding");
static_assert(sizeof(FChooserPropertyBinding) == 0x000018, "Wrong size on FChooserPropertyBinding");
static_assert(offsetof(FChooserPropertyBinding, PropertyBindingChain) == 0x000000, "Member 'FChooserPropertyBinding::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FChooserPropertyBinding, ContextIndex) == 0x000010, "Member 'FChooserPropertyBinding::ContextIndex' has a wrong offset!");

// ScriptStruct Chooser.BoolContextProperty
// 0x0028 (0x0030 - 0x0008)
struct FBoolContextProperty final : public FChooserParameterBoolBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserPropertyBinding                Binding;                                           // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoolContextProperty) == 0x000008, "Wrong alignment on FBoolContextProperty");
static_assert(sizeof(FBoolContextProperty) == 0x000030, "Wrong size on FBoolContextProperty");
static_assert(offsetof(FBoolContextProperty, PropertyBindingChain) == 0x000008, "Member 'FBoolContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FBoolContextProperty, Binding) == 0x000018, "Member 'FBoolContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserColumnBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FChooserColumnBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserColumnBase) == 0x000008, "Wrong alignment on FChooserColumnBase");
static_assert(sizeof(FChooserColumnBase) == 0x000008, "Wrong size on FChooserColumnBase");

// ScriptStruct Chooser.BoolColumn
// 0x0020 (0x0028 - 0x0008)
struct FBoolColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<EBoolColumnCellValue>                  RowValuesWithAny;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoolColumn) == 0x000008, "Wrong alignment on FBoolColumn");
static_assert(sizeof(FBoolColumn) == 0x000028, "Wrong size on FBoolColumn");
static_assert(offsetof(FBoolColumn, InputValue) == 0x000008, "Member 'FBoolColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FBoolColumn, RowValuesWithAny) == 0x000018, "Member 'FBoolColumn::RowValuesWithAny' has a wrong offset!");

// ScriptStruct Chooser.ChooserEnumPropertyBinding
// 0x0000 (0x0018 - 0x0018)
struct FChooserEnumPropertyBinding final : public FChooserPropertyBinding
{
};
static_assert(alignof(FChooserEnumPropertyBinding) == 0x000008, "Wrong alignment on FChooserEnumPropertyBinding");
static_assert(sizeof(FChooserEnumPropertyBinding) == 0x000018, "Wrong size on FChooserEnumPropertyBinding");

// ScriptStruct Chooser.ChooserObjectPropertyBinding
// 0x0000 (0x0018 - 0x0018)
struct FChooserObjectPropertyBinding final : public FChooserPropertyBinding
{
};
static_assert(alignof(FChooserObjectPropertyBinding) == 0x000008, "Wrong alignment on FChooserObjectPropertyBinding");
static_assert(sizeof(FChooserObjectPropertyBinding) == 0x000018, "Wrong size on FChooserObjectPropertyBinding");

// ScriptStruct Chooser.ChooserStructPropertyBinding
// 0x0000 (0x0018 - 0x0018)
struct FChooserStructPropertyBinding final : public FChooserPropertyBinding
{
};
static_assert(alignof(FChooserStructPropertyBinding) == 0x000008, "Wrong alignment on FChooserStructPropertyBinding");
static_assert(sizeof(FChooserStructPropertyBinding) == 0x000018, "Wrong size on FChooserStructPropertyBinding");

// ScriptStruct Chooser.ContextObjectTypeBase
// 0x0004 (0x0004 - 0x0000)
struct FContextObjectTypeBase
{
public:
	EContextObjectDirection                       Direction;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextObjectTypeBase) == 0x000004, "Wrong alignment on FContextObjectTypeBase");
static_assert(sizeof(FContextObjectTypeBase) == 0x000004, "Wrong size on FContextObjectTypeBase");
static_assert(offsetof(FContextObjectTypeBase, Direction) == 0x000000, "Member 'FContextObjectTypeBase::Direction' has a wrong offset!");

// ScriptStruct Chooser.ContextObjectTypeClass
// 0x000C (0x0010 - 0x0004)
struct FContextObjectTypeClass final : public FContextObjectTypeBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    Class;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextObjectTypeClass) == 0x000008, "Wrong alignment on FContextObjectTypeClass");
static_assert(sizeof(FContextObjectTypeClass) == 0x000010, "Wrong size on FContextObjectTypeClass");
static_assert(offsetof(FContextObjectTypeClass, Class) == 0x000008, "Member 'FContextObjectTypeClass::Class' has a wrong offset!");

// ScriptStruct Chooser.ContextObjectTypeStruct
// 0x000C (0x0010 - 0x0004)
struct FContextObjectTypeStruct final : public FContextObjectTypeBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          Struct;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContextObjectTypeStruct) == 0x000008, "Wrong alignment on FContextObjectTypeStruct");
static_assert(sizeof(FContextObjectTypeStruct) == 0x000010, "Wrong size on FContextObjectTypeStruct");
static_assert(offsetof(FContextObjectTypeStruct, Struct) == 0x000008, "Member 'FContextObjectTypeStruct::Struct' has a wrong offset!");

// ScriptStruct Chooser.ChooserParameterEnumBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterEnumBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterEnumBase) == 0x000008, "Wrong alignment on FChooserParameterEnumBase");
static_assert(sizeof(FChooserParameterEnumBase) == 0x000008, "Wrong size on FChooserParameterEnumBase");

// ScriptStruct Chooser.EnumContextProperty
// 0x0028 (0x0030 - 0x0008)
struct FEnumContextProperty final : public FChooserParameterEnumBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserEnumPropertyBinding            Binding;                                           // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnumContextProperty) == 0x000008, "Wrong alignment on FEnumContextProperty");
static_assert(sizeof(FEnumContextProperty) == 0x000030, "Wrong size on FEnumContextProperty");
static_assert(offsetof(FEnumContextProperty, PropertyBindingChain) == 0x000008, "Member 'FEnumContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FEnumContextProperty, Binding) == 0x000018, "Member 'FEnumContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserEnumRowData
// 0x0002 (0x0002 - 0x0000)
struct FChooserEnumRowData final
{
public:
	bool                                          CompareNotEqual;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserEnumRowData) == 0x000001, "Wrong alignment on FChooserEnumRowData");
static_assert(sizeof(FChooserEnumRowData) == 0x000002, "Wrong size on FChooserEnumRowData");
static_assert(offsetof(FChooserEnumRowData, CompareNotEqual) == 0x000000, "Member 'FChooserEnumRowData::CompareNotEqual' has a wrong offset!");
static_assert(offsetof(FChooserEnumRowData, Value) == 0x000001, "Member 'FChooserEnumRowData::Value' has a wrong offset!");

// ScriptStruct Chooser.EnumColumn
// 0x0020 (0x0028 - 0x0008)
struct FEnumColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FChooserEnumRowData>            RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEnumColumn) == 0x000008, "Wrong alignment on FEnumColumn");
static_assert(sizeof(FEnumColumn) == 0x000028, "Wrong size on FEnumColumn");
static_assert(offsetof(FEnumColumn, InputValue) == 0x000008, "Member 'FEnumColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FEnumColumn, RowValues) == 0x000018, "Member 'FEnumColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ChooserParameterFloatBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterFloatBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterFloatBase) == 0x000008, "Wrong alignment on FChooserParameterFloatBase");
static_assert(sizeof(FChooserParameterFloatBase) == 0x000008, "Wrong size on FChooserParameterFloatBase");

// ScriptStruct Chooser.FloatContextProperty
// 0x0028 (0x0030 - 0x0008)
struct FFloatContextProperty final : public FChooserParameterFloatBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserPropertyBinding                Binding;                                           // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatContextProperty) == 0x000008, "Wrong alignment on FFloatContextProperty");
static_assert(sizeof(FFloatContextProperty) == 0x000030, "Wrong size on FFloatContextProperty");
static_assert(offsetof(FFloatContextProperty, PropertyBindingChain) == 0x000008, "Member 'FFloatContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FFloatContextProperty, Binding) == 0x000018, "Member 'FFloatContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserFloatRangeRowData
// 0x0008 (0x0008 - 0x0000)
struct FChooserFloatRangeRowData final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserFloatRangeRowData) == 0x000004, "Wrong alignment on FChooserFloatRangeRowData");
static_assert(sizeof(FChooserFloatRangeRowData) == 0x000008, "Wrong size on FChooserFloatRangeRowData");
static_assert(offsetof(FChooserFloatRangeRowData, Min) == 0x000000, "Member 'FChooserFloatRangeRowData::Min' has a wrong offset!");
static_assert(offsetof(FChooserFloatRangeRowData, Max) == 0x000004, "Member 'FChooserFloatRangeRowData::Max' has a wrong offset!");

// ScriptStruct Chooser.FloatRangeColumn
// 0x0020 (0x0028 - 0x0008)
struct FFloatRangeColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FChooserFloatRangeRowData>      RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatRangeColumn) == 0x000008, "Wrong alignment on FFloatRangeColumn");
static_assert(sizeof(FFloatRangeColumn) == 0x000028, "Wrong size on FFloatRangeColumn");
static_assert(offsetof(FFloatRangeColumn, InputValue) == 0x000008, "Member 'FFloatRangeColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FFloatRangeColumn, RowValues) == 0x000018, "Member 'FFloatRangeColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ChooserParameterGameplayTagBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterGameplayTagBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterGameplayTagBase) == 0x000008, "Wrong alignment on FChooserParameterGameplayTagBase");
static_assert(sizeof(FChooserParameterGameplayTagBase) == 0x000008, "Wrong size on FChooserParameterGameplayTagBase");

// ScriptStruct Chooser.GameplayTagContextProperty
// 0x0028 (0x0030 - 0x0008)
struct FGameplayTagContextProperty final : public FChooserParameterGameplayTagBase
{
public:
	TArray<class FName>                           PropertyBindingChain;                              // 0x0008(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FChooserPropertyBinding                Binding;                                           // 0x0018(0x0018)(Edit, NoClear, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagContextProperty) == 0x000008, "Wrong alignment on FGameplayTagContextProperty");
static_assert(sizeof(FGameplayTagContextProperty) == 0x000030, "Wrong size on FGameplayTagContextProperty");
static_assert(offsetof(FGameplayTagContextProperty, PropertyBindingChain) == 0x000008, "Member 'FGameplayTagContextProperty::PropertyBindingChain' has a wrong offset!");
static_assert(offsetof(FGameplayTagContextProperty, Binding) == 0x000018, "Member 'FGameplayTagContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.GameplayTagColumn
// 0x0028 (0x0030 - 0x0008)
struct FGameplayTagColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   TagMatchType;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTagContainer>          RowValues;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagColumn) == 0x000008, "Wrong alignment on FGameplayTagColumn");
static_assert(sizeof(FGameplayTagColumn) == 0x000030, "Wrong size on FGameplayTagColumn");
static_assert(offsetof(FGameplayTagColumn, InputValue) == 0x000008, "Member 'FGameplayTagColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FGameplayTagColumn, TagMatchType) == 0x000018, "Member 'FGameplayTagColumn::TagMatchType' has a wrong offset!");
static_assert(offsetof(FGameplayTagColumn, RowValues) == 0x000020, "Member 'FGameplayTagColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ChooserParameterObjectBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterObjectBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterObjectBase) == 0x000008, "Wrong alignment on FChooserParameterObjectBase");
static_assert(sizeof(FChooserParameterObjectBase) == 0x000008, "Wrong size on FChooserParameterObjectBase");

// ScriptStruct Chooser.ChooserRandomizationContext
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FChooserRandomizationContext final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserRandomizationContext) == 0x000008, "Wrong alignment on FChooserRandomizationContext");
static_assert(sizeof(FChooserRandomizationContext) == 0x000050, "Wrong size on FChooserRandomizationContext");

// ScriptStruct Chooser.ChooserParameterRandomizeBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterRandomizeBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterRandomizeBase) == 0x000008, "Wrong alignment on FChooserParameterRandomizeBase");
static_assert(sizeof(FChooserParameterRandomizeBase) == 0x000008, "Wrong size on FChooserParameterRandomizeBase");

// ScriptStruct Chooser.ChooserParameterStructBase
// 0x0000 (0x0008 - 0x0008)
struct FChooserParameterStructBase : public FChooserParameterBase
{
};
static_assert(alignof(FChooserParameterStructBase) == 0x000008, "Wrong alignment on FChooserParameterStructBase");
static_assert(sizeof(FChooserParameterStructBase) == 0x000008, "Wrong size on FChooserParameterStructBase");

// ScriptStruct Chooser.ChooserEvaluationInputObject
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FChooserEvaluationInputObject final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserEvaluationInputObject) == 0x000008, "Wrong alignment on FChooserEvaluationInputObject");
static_assert(sizeof(FChooserEvaluationInputObject) == 0x000008, "Wrong size on FChooserEvaluationInputObject");

// ScriptStruct Chooser.ChooserEvaluationContext
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FChooserEvaluationContext final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChooserEvaluationContext) == 0x000008, "Wrong alignment on FChooserEvaluationContext");
static_assert(sizeof(FChooserEvaluationContext) == 0x000050, "Wrong size on FChooserEvaluationContext");

// ScriptStruct Chooser.ObjectChooserBase
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FObjectChooserBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectChooserBase) == 0x000008, "Wrong alignment on FObjectChooserBase");
static_assert(sizeof(FObjectChooserBase) == 0x000008, "Wrong size on FObjectChooserBase");

// ScriptStruct Chooser.AssetChooser
// 0x0008 (0x0010 - 0x0008)
struct FAssetChooser final : public FObjectChooserBase
{
public:
	class UObject*                                Asset;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetChooser) == 0x000008, "Wrong alignment on FAssetChooser");
static_assert(sizeof(FAssetChooser) == 0x000010, "Wrong size on FAssetChooser");
static_assert(offsetof(FAssetChooser, Asset) == 0x000008, "Member 'FAssetChooser::Asset' has a wrong offset!");

// ScriptStruct Chooser.ClassChooser
// 0x0008 (0x0010 - 0x0008)
struct FClassChooser final : public FObjectChooserBase
{
public:
	TSubclassOf<class UObject>                    Class;                                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClassChooser) == 0x000008, "Wrong alignment on FClassChooser");
static_assert(sizeof(FClassChooser) == 0x000010, "Wrong size on FClassChooser");
static_assert(offsetof(FClassChooser, Class) == 0x000008, "Member 'FClassChooser::Class' has a wrong offset!");

// ScriptStruct Chooser.ObjectContextProperty
// 0x0018 (0x0020 - 0x0008)
struct FObjectContextProperty final : public FChooserParameterObjectBase
{
public:
	struct FChooserObjectPropertyBinding          Binding;                                           // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectContextProperty) == 0x000008, "Wrong alignment on FObjectContextProperty");
static_assert(sizeof(FObjectContextProperty) == 0x000020, "Wrong size on FObjectContextProperty");
static_assert(offsetof(FObjectContextProperty, Binding) == 0x000008, "Member 'FObjectContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.ChooserObjectRowData
// 0x0030 (0x0030 - 0x0000)
struct FChooserObjectRowData final
{
public:
	EObjectColumnCellValueComparison              Comparison;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Value;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserObjectRowData) == 0x000008, "Wrong alignment on FChooserObjectRowData");
static_assert(sizeof(FChooserObjectRowData) == 0x000030, "Wrong size on FChooserObjectRowData");
static_assert(offsetof(FChooserObjectRowData, Comparison) == 0x000000, "Member 'FChooserObjectRowData::Comparison' has a wrong offset!");
static_assert(offsetof(FChooserObjectRowData, Value) == 0x000008, "Member 'FChooserObjectRowData::Value' has a wrong offset!");

// ScriptStruct Chooser.ObjectColumn
// 0x0020 (0x0028 - 0x0008)
struct FObjectColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FChooserObjectRowData>          RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectColumn) == 0x000008, "Wrong alignment on FObjectColumn");
static_assert(sizeof(FObjectColumn) == 0x000028, "Wrong size on FObjectColumn");
static_assert(offsetof(FObjectColumn, InputValue) == 0x000008, "Member 'FObjectColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FObjectColumn, RowValues) == 0x000018, "Member 'FObjectColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.OutputBoolColumn
// 0x0020 (0x0028 - 0x0008)
struct FOutputBoolColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<bool>                                  RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutputBoolColumn) == 0x000008, "Wrong alignment on FOutputBoolColumn");
static_assert(sizeof(FOutputBoolColumn) == 0x000028, "Wrong size on FOutputBoolColumn");
static_assert(offsetof(FOutputBoolColumn, InputValue) == 0x000008, "Member 'FOutputBoolColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FOutputBoolColumn, RowValues) == 0x000018, "Member 'FOutputBoolColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.ChooserOutputEnumRowData
// 0x0001 (0x0001 - 0x0000)
struct FChooserOutputEnumRowData final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChooserOutputEnumRowData) == 0x000001, "Wrong alignment on FChooserOutputEnumRowData");
static_assert(sizeof(FChooserOutputEnumRowData) == 0x000001, "Wrong size on FChooserOutputEnumRowData");
static_assert(offsetof(FChooserOutputEnumRowData, Value) == 0x000000, "Member 'FChooserOutputEnumRowData::Value' has a wrong offset!");

// ScriptStruct Chooser.OutputEnumColumn
// 0x0020 (0x0028 - 0x0008)
struct FOutputEnumColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FChooserOutputEnumRowData>      RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutputEnumColumn) == 0x000008, "Wrong alignment on FOutputEnumColumn");
static_assert(sizeof(FOutputEnumColumn) == 0x000028, "Wrong size on FOutputEnumColumn");
static_assert(offsetof(FOutputEnumColumn, InputValue) == 0x000008, "Member 'FOutputEnumColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FOutputEnumColumn, RowValues) == 0x000018, "Member 'FOutputEnumColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.OutputFloatColumn
// 0x0020 (0x0028 - 0x0008)
struct FOutputFloatColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<double>                                RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutputFloatColumn) == 0x000008, "Wrong alignment on FOutputFloatColumn");
static_assert(sizeof(FOutputFloatColumn) == 0x000028, "Wrong size on FOutputFloatColumn");
static_assert(offsetof(FOutputFloatColumn, InputValue) == 0x000008, "Member 'FOutputFloatColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FOutputFloatColumn, RowValues) == 0x000018, "Member 'FOutputFloatColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.StructContextProperty
// 0x0018 (0x0020 - 0x0008)
struct FStructContextProperty final : public FChooserParameterStructBase
{
public:
	struct FChooserStructPropertyBinding          Binding;                                           // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructContextProperty) == 0x000008, "Wrong alignment on FStructContextProperty");
static_assert(sizeof(FStructContextProperty) == 0x000020, "Wrong size on FStructContextProperty");
static_assert(offsetof(FStructContextProperty, Binding) == 0x000008, "Member 'FStructContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.OutputStructColumn
// 0x0020 (0x0028 - 0x0008)
struct FOutputStructColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	TArray<struct FInstancedStruct>               RowValues;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutputStructColumn) == 0x000008, "Wrong alignment on FOutputStructColumn");
static_assert(sizeof(FOutputStructColumn) == 0x000028, "Wrong size on FOutputStructColumn");
static_assert(offsetof(FOutputStructColumn, InputValue) == 0x000008, "Member 'FOutputStructColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FOutputStructColumn, RowValues) == 0x000018, "Member 'FOutputStructColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.RandomizeContextProperty
// 0x0018 (0x0020 - 0x0008)
struct FRandomizeContextProperty final : public FChooserParameterRandomizeBase
{
public:
	struct FChooserPropertyBinding                Binding;                                           // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomizeContextProperty) == 0x000008, "Wrong alignment on FRandomizeContextProperty");
static_assert(sizeof(FRandomizeContextProperty) == 0x000020, "Wrong size on FRandomizeContextProperty");
static_assert(offsetof(FRandomizeContextProperty, Binding) == 0x000008, "Member 'FRandomizeContextProperty::Binding' has a wrong offset!");

// ScriptStruct Chooser.RandomizeColumn
// 0x0028 (0x0030 - 0x0008)
struct FRandomizeColumn final : public FChooserColumnBase
{
public:
	struct FInstancedStruct                       InputValue;                                        // 0x0008(0x0010)(Edit, NoClear, NativeAccessSpecifierPublic)
	float                                         RepeatProbabilityMultiplier;                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 RowValues;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomizeColumn) == 0x000008, "Wrong alignment on FRandomizeColumn");
static_assert(sizeof(FRandomizeColumn) == 0x000030, "Wrong size on FRandomizeColumn");
static_assert(offsetof(FRandomizeColumn, InputValue) == 0x000008, "Member 'FRandomizeColumn::InputValue' has a wrong offset!");
static_assert(offsetof(FRandomizeColumn, RepeatProbabilityMultiplier) == 0x000018, "Member 'FRandomizeColumn::RepeatProbabilityMultiplier' has a wrong offset!");
static_assert(offsetof(FRandomizeColumn, RowValues) == 0x000020, "Member 'FRandomizeColumn::RowValues' has a wrong offset!");

// ScriptStruct Chooser.EvaluateChooser
// 0x0008 (0x0010 - 0x0008)
struct FEvaluateChooser final : public FObjectChooserBase
{
public:
	class UChooserTable*                          Chooser;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvaluateChooser) == 0x000008, "Wrong alignment on FEvaluateChooser");
static_assert(sizeof(FEvaluateChooser) == 0x000010, "Wrong size on FEvaluateChooser");
static_assert(offsetof(FEvaluateChooser, Chooser) == 0x000008, "Member 'FEvaluateChooser::Chooser' has a wrong offset!");

}

