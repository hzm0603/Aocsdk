#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineTwistCorrect

#include "Basic.hpp"

#include "SplineTwistCorrect_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.BuildCorrectedSpline
// 0x0020 (0x0020 - 0x0000)
struct SplineTwistCorrectBPLibrary_BuildCorrectedSpline final
{
public:
	const class USplineComponent*                 SplineUser;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USplineComponent*                 SplineOffset;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineFinal;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealLength;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineTwistCorrectBPLibrary_BuildCorrectedSpline) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_BuildCorrectedSpline");
static_assert(sizeof(SplineTwistCorrectBPLibrary_BuildCorrectedSpline) == 0x000020, "Wrong size on SplineTwistCorrectBPLibrary_BuildCorrectedSpline");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildCorrectedSpline, SplineUser) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_BuildCorrectedSpline::SplineUser' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildCorrectedSpline, SplineOffset) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_BuildCorrectedSpline::SplineOffset' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildCorrectedSpline, SplineFinal) == 0x000010, "Member 'SplineTwistCorrectBPLibrary_BuildCorrectedSpline::SplineFinal' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildCorrectedSpline, IdealLength) == 0x000018, "Member 'SplineTwistCorrectBPLibrary_BuildCorrectedSpline::IdealLength' has a wrong offset!");

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.BuildOffsetSpline
// 0x0018 (0x0018 - 0x0000)
struct SplineTwistCorrectBPLibrary_BuildOffsetSpline final
{
public:
	const class USplineComponent*                 SplineUser;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineOffset;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotFromUp;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetDist;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineTwistCorrectBPLibrary_BuildOffsetSpline) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_BuildOffsetSpline");
static_assert(sizeof(SplineTwistCorrectBPLibrary_BuildOffsetSpline) == 0x000018, "Wrong size on SplineTwistCorrectBPLibrary_BuildOffsetSpline");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildOffsetSpline, SplineUser) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_BuildOffsetSpline::SplineUser' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildOffsetSpline, SplineOffset) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_BuildOffsetSpline::SplineOffset' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildOffsetSpline, RotFromUp) == 0x000010, "Member 'SplineTwistCorrectBPLibrary_BuildOffsetSpline::RotFromUp' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_BuildOffsetSpline, OffsetDist) == 0x000014, "Member 'SplineTwistCorrectBPLibrary_BuildOffsetSpline::OffsetDist' has a wrong offset!");

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.CalcRailLength
// 0x0018 (0x0018 - 0x0000)
struct SplineTwistCorrectBPLibrary_CalcRailLength final
{
public:
	const class USplineComponent*                 Spline;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealLength;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineTwistCorrectBPLibrary_CalcRailLength) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_CalcRailLength");
static_assert(sizeof(SplineTwistCorrectBPLibrary_CalcRailLength) == 0x000018, "Wrong size on SplineTwistCorrectBPLibrary_CalcRailLength");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRailLength, Spline) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_CalcRailLength::Spline' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRailLength, Number) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_CalcRailLength::Number' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRailLength, Length) == 0x00000C, "Member 'SplineTwistCorrectBPLibrary_CalcRailLength::Length' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRailLength, IdealLength) == 0x000010, "Member 'SplineTwistCorrectBPLibrary_CalcRailLength::IdealLength' has a wrong offset!");

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.CalcRotFromUp
// 0x0018 (0x0018 - 0x0000)
struct SplineTwistCorrectBPLibrary_CalcRotFromUp final
{
public:
	float                                         Rotation;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 Spline;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineTwistCorrectBPLibrary_CalcRotFromUp) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_CalcRotFromUp");
static_assert(sizeof(SplineTwistCorrectBPLibrary_CalcRotFromUp) == 0x000018, "Wrong size on SplineTwistCorrectBPLibrary_CalcRotFromUp");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRotFromUp, Rotation) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_CalcRotFromUp::Rotation' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRotFromUp, Spline) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_CalcRotFromUp::Spline' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRotFromUp, Index_0) == 0x000010, "Member 'SplineTwistCorrectBPLibrary_CalcRotFromUp::Index_0' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcRotFromUp, Length) == 0x000014, "Member 'SplineTwistCorrectBPLibrary_CalcRotFromUp::Length' has a wrong offset!");

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.CalcStartEnd
// 0x0070 (0x0070 - 0x0000)
struct SplineTwistCorrectBPLibrary_CalcStartEnd final
{
public:
	const class USplineComponent*                 Spline;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocStart;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TanStart;                                          // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocEnd;                                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TanEnd;                                            // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0068(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x006C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineTwistCorrectBPLibrary_CalcStartEnd) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_CalcStartEnd");
static_assert(sizeof(SplineTwistCorrectBPLibrary_CalcStartEnd) == 0x000070, "Wrong size on SplineTwistCorrectBPLibrary_CalcStartEnd");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, Spline) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::Spline' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, LocStart) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::LocStart' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, TanStart) == 0x000020, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::TanStart' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, LocEnd) == 0x000038, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::LocEnd' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, TanEnd) == 0x000050, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::TanEnd' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, Index_0) == 0x000068, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::Index_0' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_CalcStartEnd, Length) == 0x00006C, "Member 'SplineTwistCorrectBPLibrary_CalcStartEnd::Length' has a wrong offset!");

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.ConfigSplineMesh
// 0x0058 (0x0058 - 0x0000)
struct SplineTwistCorrectBPLibrary_ConfigSplineMesh final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USplineComponent*                 SplineFinal;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineMeshComponent*                   SplineMesh;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStartEndScale2                        StartEndScale;                                     // 0x0030(0x0020)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SplineTwistCorrectBPLibrary_ConfigSplineMesh) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_ConfigSplineMesh");
static_assert(sizeof(SplineTwistCorrectBPLibrary_ConfigSplineMesh) == 0x000058, "Wrong size on SplineTwistCorrectBPLibrary_ConfigSplineMesh");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, Index_0) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::Index_0' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, Length) == 0x000004, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::Length' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, SplineFinal) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::SplineFinal' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, SplineMesh) == 0x000010, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::SplineMesh' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, Actor) == 0x000018, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::Actor' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, Material) == 0x000020, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::Material' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, StaticMesh) == 0x000028, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, StartEndScale) == 0x000030, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::StartEndScale' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_ConfigSplineMesh, Roll) == 0x000050, "Member 'SplineTwistCorrectBPLibrary_ConfigSplineMesh::Roll' has a wrong offset!");

// Function SplineTwistCorrect.SplineTwistCorrectBPLibrary.FixTangents
// 0x0010 (0x0010 - 0x0000)
struct SplineTwistCorrectBPLibrary_FixTangents final
{
public:
	const class USplineComponent*                 SplineUser;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineOffset;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineTwistCorrectBPLibrary_FixTangents) == 0x000008, "Wrong alignment on SplineTwistCorrectBPLibrary_FixTangents");
static_assert(sizeof(SplineTwistCorrectBPLibrary_FixTangents) == 0x000010, "Wrong size on SplineTwistCorrectBPLibrary_FixTangents");
static_assert(offsetof(SplineTwistCorrectBPLibrary_FixTangents, SplineUser) == 0x000000, "Member 'SplineTwistCorrectBPLibrary_FixTangents::SplineUser' has a wrong offset!");
static_assert(offsetof(SplineTwistCorrectBPLibrary_FixTangents, SplineOffset) == 0x000008, "Member 'SplineTwistCorrectBPLibrary_FixTangents::SplineOffset' has a wrong offset!");

// Function SplineTwistCorrect.SplineWithMesh.AddMesh
// 0x0008 (0x0008 - 0x0000)
struct SplineWithMesh_AddMesh final
{
public:
	class AActor*                                 PActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWithMesh_AddMesh) == 0x000008, "Wrong alignment on SplineWithMesh_AddMesh");
static_assert(sizeof(SplineWithMesh_AddMesh) == 0x000008, "Wrong size on SplineWithMesh_AddMesh");
static_assert(offsetof(SplineWithMesh_AddMesh, PActor) == 0x000000, "Member 'SplineWithMesh_AddMesh::PActor' has a wrong offset!");

// Function SplineTwistCorrect.SplineWithMesh.GetRollMesh
// 0x0008 (0x0008 - 0x0000)
struct SplineWithMesh_GetRollMesh final
{
public:
	int32                                         I;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWithMesh_GetRollMesh) == 0x000004, "Wrong alignment on SplineWithMesh_GetRollMesh");
static_assert(sizeof(SplineWithMesh_GetRollMesh) == 0x000008, "Wrong size on SplineWithMesh_GetRollMesh");
static_assert(offsetof(SplineWithMesh_GetRollMesh, I) == 0x000000, "Member 'SplineWithMesh_GetRollMesh::I' has a wrong offset!");
static_assert(offsetof(SplineWithMesh_GetRollMesh, ReturnValue) == 0x000004, "Member 'SplineWithMesh_GetRollMesh::ReturnValue' has a wrong offset!");

// Function SplineTwistCorrect.SplineWithMesh.GetScaleMesh
// 0x0028 (0x0028 - 0x0000)
struct SplineWithMesh_GetScaleMesh final
{
public:
	int32                                         I;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStartEndScale2                        ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineWithMesh_GetScaleMesh) == 0x000008, "Wrong alignment on SplineWithMesh_GetScaleMesh");
static_assert(sizeof(SplineWithMesh_GetScaleMesh) == 0x000028, "Wrong size on SplineWithMesh_GetScaleMesh");
static_assert(offsetof(SplineWithMesh_GetScaleMesh, I) == 0x000000, "Member 'SplineWithMesh_GetScaleMesh::I' has a wrong offset!");
static_assert(offsetof(SplineWithMesh_GetScaleMesh, ReturnValue) == 0x000008, "Member 'SplineWithMesh_GetScaleMesh::ReturnValue' has a wrong offset!");

// Function SplineTwistCorrect.STC_MathFunctions.CalcIcosahedron
// 0x0018 (0x0018 - 0x0000)
struct STC_MathFunctions_CalcIcosahedron final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(STC_MathFunctions_CalcIcosahedron) == 0x000008, "Wrong alignment on STC_MathFunctions_CalcIcosahedron");
static_assert(sizeof(STC_MathFunctions_CalcIcosahedron) == 0x000018, "Wrong size on STC_MathFunctions_CalcIcosahedron");
static_assert(offsetof(STC_MathFunctions_CalcIcosahedron, Vertices) == 0x000000, "Member 'STC_MathFunctions_CalcIcosahedron::Vertices' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_CalcIcosahedron, Radius) == 0x000010, "Member 'STC_MathFunctions_CalcIcosahedron::Radius' has a wrong offset!");

// Function SplineTwistCorrect.STC_MathFunctions.FindNextSplineLocation
// 0x0078 (0x0078 - 0x0000)
struct STC_MathFunctions_FindNextSplineLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NextLocation;                                      // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NextUpVector;                                      // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegmentLength;                                     // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0040(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastDirection;                                     // 0x0058(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0074(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(STC_MathFunctions_FindNextSplineLocation) == 0x000008, "Wrong alignment on STC_MathFunctions_FindNextSplineLocation");
static_assert(sizeof(STC_MathFunctions_FindNextSplineLocation) == 0x000078, "Wrong size on STC_MathFunctions_FindNextSplineLocation");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, WorldContextObject) == 0x000000, "Member 'STC_MathFunctions_FindNextSplineLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, NextLocation) == 0x000008, "Member 'STC_MathFunctions_FindNextSplineLocation::NextLocation' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, NextUpVector) == 0x000020, "Member 'STC_MathFunctions_FindNextSplineLocation::NextUpVector' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, SegmentLength) == 0x000038, "Member 'STC_MathFunctions_FindNextSplineLocation::SegmentLength' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, LastLocation) == 0x000040, "Member 'STC_MathFunctions_FindNextSplineLocation::LastLocation' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, LastDirection) == 0x000058, "Member 'STC_MathFunctions_FindNextSplineLocation::LastDirection' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, Seed) == 0x000070, "Member 'STC_MathFunctions_FindNextSplineLocation::Seed' has a wrong offset!");
static_assert(offsetof(STC_MathFunctions_FindNextSplineLocation, ReturnValue) == 0x000074, "Member 'STC_MathFunctions_FindNextSplineLocation::ReturnValue' has a wrong offset!");

}

