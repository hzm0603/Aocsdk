#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AoCLoginGameModeBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AoCLoginGameModeBP.AoCLoginGameModeBP_C
// 0x0070 (0x0A30 - 0x09C0)
class AAoCLoginGameModeBP_C final : public AAoCGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            LoginInformation;                                  // 0x09D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bInfiniteLoopMonitor;                              // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInfiniteLoopMonitor*                   InfiniteLoopMonitor;                               // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AoCLoginGameModeBP(int32 EntryPoint);
	void InitializeInfiniteMonitor();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void VerifyLoginInformation(const class FString& UserName, const class FString& Password, class AAoCPlayerController* PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AoCLoginGameModeBP_C">();
	}
	static class AAoCLoginGameModeBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAoCLoginGameModeBP_C>();
	}
};
static_assert(alignof(AAoCLoginGameModeBP_C) == 0x000010, "Wrong alignment on AAoCLoginGameModeBP_C");
static_assert(sizeof(AAoCLoginGameModeBP_C) == 0x000A30, "Wrong size on AAoCLoginGameModeBP_C");
static_assert(offsetof(AAoCLoginGameModeBP_C, UberGraphFrame) == 0x0009C0, "Member 'AAoCLoginGameModeBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAoCLoginGameModeBP_C, DefaultSceneRoot) == 0x0009C8, "Member 'AAoCLoginGameModeBP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AAoCLoginGameModeBP_C, LoginInformation) == 0x0009D0, "Member 'AAoCLoginGameModeBP_C::LoginInformation' has a wrong offset!");
static_assert(offsetof(AAoCLoginGameModeBP_C, bInfiniteLoopMonitor) == 0x000A20, "Member 'AAoCLoginGameModeBP_C::bInfiniteLoopMonitor' has a wrong offset!");
static_assert(offsetof(AAoCLoginGameModeBP_C, InfiniteLoopMonitor) == 0x000A28, "Member 'AAoCLoginGameModeBP_C::InfiniteLoopMonitor' has a wrong offset!");

}

