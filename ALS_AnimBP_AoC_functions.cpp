#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_AnimBP_AoC

#include "Basic.hpp"

#include "ALS_AnimBP_AoC_classes.hpp"
#include "ALS_AnimBP_AoC_parameters.hpp"


namespace SDK
{

// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.(CLF) CycleBlending
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        I_F                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_B                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_LF                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_LB                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_RF                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_RB                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        _CLF__CycleBlending_0                                  (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::_CLF__CycleBlending(const struct FPoseLink& I_F, const struct FPoseLink& I_B, const struct FPoseLink& I_LF, const struct FPoseLink& I_LB, const struct FPoseLink& I_RF, const struct FPoseLink& I_RB, struct FPoseLink* _CLF__CycleBlending_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "(CLF) CycleBlending");

	Params::ALS_AnimBP_AoC_C__CLF__CycleBlending Parms{};

	Parms.I_F = std::move(I_F);
	Parms.I_B = std::move(I_B);
	Parms.I_LF = std::move(I_LF);
	Parms.I_LB = std::move(I_LB);
	Parms.I_RF = std::move(I_RF);
	Parms.I_RB = std::move(I_RB);

	UObject::ProcessEvent(Func, &Parms);

	if (_CLF__CycleBlending_0 != nullptr)
		*_CLF__CycleBlending_0 = std::move(Parms._CLF__CycleBlending_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.(N) CycleBlending
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        F                                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        LF                                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        LB                                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        RF                                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        RB                                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        Sprint                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        _N__CycleBlending_0                                    (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::_N__CycleBlending(const struct FPoseLink& F, const struct FPoseLink& B, const struct FPoseLink& LF, const struct FPoseLink& LB, const struct FPoseLink& RF, const struct FPoseLink& RB, const struct FPoseLink& Sprint, struct FPoseLink* _N__CycleBlending_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "(N) CycleBlending");

	Params::ALS_AnimBP_AoC_C__N__CycleBlending Parms{};

	Parms.F = std::move(F);
	Parms.B = std::move(B);
	Parms.LF = std::move(LF);
	Parms.LB = std::move(LB);
	Parms.RF = std::move(RF);
	Parms.RB = std::move(RB);
	Parms.Sprint = std::move(Sprint);

	UObject::ProcessEvent(Func, &Parms);

	if (_N__CycleBlending_0 != nullptr)
		*_N__CycleBlending_0 = std::move(Parms._N__CycleBlending_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.(S) SwimBlending
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        I_F                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_B                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_LF                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_LB                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_RF                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        I_RB                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        _S__SwimBlending_0                                     (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::_S__SwimBlending(const struct FPoseLink& I_F, const struct FPoseLink& I_B, const struct FPoseLink& I_LF, const struct FPoseLink& I_LB, const struct FPoseLink& I_RF, const struct FPoseLink& I_RB, struct FPoseLink* _S__SwimBlending_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "(S) SwimBlending");

	Params::ALS_AnimBP_AoC_C__S__SwimBlending Parms{};

	Parms.I_F = std::move(I_F);
	Parms.I_B = std::move(I_B);
	Parms.I_LF = std::move(I_LF);
	Parms.I_LB = std::move(I_LB);
	Parms.I_RF = std::move(I_RF);
	Parms.I_RB = std::move(I_RB);

	UObject::ProcessEvent(Func, &Parms);

	if (_S__SwimBlending_0 != nullptr)
		*_S__SwimBlending_0 = std::move(Parms._S__SwimBlending_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AimOffsetBehaviors
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        AimOffsetBehaviors_0                                   (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::AimOffsetBehaviors(struct FPoseLink* AimOffsetBehaviors_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AimOffsetBehaviors");

	Params::ALS_AnimBP_AoC_C_AimOffsetBehaviors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AimOffsetBehaviors_0 != nullptr)
		*AimOffsetBehaviors_0 = std::move(Parms.AimOffsetBehaviors_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        AnimGraph_0                                            (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::AnimGraph(struct FPoseLink* AnimGraph_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimGraph");

	Params::ALS_AnimBP_AoC_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimGraph_0 != nullptr)
		*AnimGraph_0 = std::move(Parms.AnimGraph_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_->CLF Stop
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify___CLF_Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_->CLF Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_->Combat Stop L
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify___Combat_Stop_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_->Combat Stop L");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_->N QuickStop 
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify___N_QuickStop_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_->N QuickStop ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_->N Stop L
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify___N_Stop_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_->N Stop L");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_->N Stop R
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify___N_Stop_R()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_->N Stop R");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Bow Ready->Relaxed
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Bow_Ready__Relaxed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Bow Ready->Relaxed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Bow Relaxed->Ready
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Bow_Relaxed__Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Bow Relaxed->Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Hips B
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Hips_B()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Hips B");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Hips F
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Hips_F()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Hips F");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Hips LB
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Hips_LB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Hips LB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Hips LF
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Hips_LF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Hips LF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Hips RB
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Hips_RB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Hips RB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Hips RF
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Hips_RF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Hips RF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_HitDown
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_HitDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_HitDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_HitLeft
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_HitLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_HitLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_HitNone
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_HitNone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_HitNone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_HitRight
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_HitRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_HitRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_HitUp
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_HitUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_HitUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Land->Idle
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Land__Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Land->Idle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_M4A1 Ready->Relaxed
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_M4A1_Ready__Relaxed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_M4A1 Ready->Relaxed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_M4A1 Relaxed->Ready
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_M4A1_Relaxed__Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_M4A1 Relaxed->Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Pistol 1H Ready->Relaxed
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Pistol_1H_Ready__Relaxed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Pistol 1H Ready->Relaxed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Pistol 1H Relaxed->Ready
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Pistol_1H_Relaxed__Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Pistol 1H Relaxed->Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Pistol 2H Ready->Relaxed
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Pistol_2H_Ready__Relaxed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Pistol 2H Ready->Relaxed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Pistol 2H Relaxed->Ready
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Pistol_2H_Relaxed__Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Pistol 2H Relaxed->Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Pivot
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Pivot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Pivot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Reset-GroundedEntryState
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Reset_GroundedEntryState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Reset-GroundedEntryState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_Roll->Idle
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_Roll__Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_Roll->Idle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.AnimNotify_StopTransition
// (BlueprintCallable, BlueprintEvent)

void UALS_AnimBP_AoC_C::AnimNotify_StopTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "AnimNotify_StopTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.BaseLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        BaseLayer_0                                            (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::BaseLayer(struct FPoseLink* BaseLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "BaseLayer");

	Params::ALS_AnimBP_AoC_C_BaseLayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BaseLayer_0 != nullptr)
		*BaseLayer_0 = std::move(Parms.BaseLayer_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.BasePoses
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        BasePoses_0                                            (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::BasePoses(struct FPoseLink* BasePoses_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "BasePoses");

	Params::ALS_AnimBP_AoC_C_BasePoses Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BasePoses_0 != nullptr)
		*BasePoses_0 = std::move(Parms.BasePoses_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.BlueprintUpdateAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTimeX                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UALS_AnimBP_AoC_C::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "BlueprintUpdateAnimation");

	Params::ALS_AnimBP_AoC_C_BlueprintUpdateAnimation Parms{};

	Parms.DeltaTimeX = DeltaTimeX;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.CombatLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        CombatLayerInput                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        CombatLayer_0                                          (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::CombatLayer(const struct FPoseLink& CombatLayerInput, struct FPoseLink* CombatLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "CombatLayer");

	Params::ALS_AnimBP_AoC_C_CombatLayer Parms{};

	Parms.CombatLayerInput = std::move(CombatLayerInput);

	UObject::ProcessEvent(Func, &Parms);

	if (CombatLayer_0 != nullptr)
		*CombatLayer_0 = std::move(Parms.CombatLayer_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.ExecuteUbergraph_ALS_AnimBP_AoC
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UALS_AnimBP_AoC_C::ExecuteUbergraph_ALS_AnimBP_AoC(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "ExecuteUbergraph_ALS_AnimBP_AoC");

	Params::ALS_AnimBP_AoC_C_ExecuteUbergraph_ALS_AnimBP_AoC Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.FootIK
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        InPose                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        FootIK_0                                               (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::FootIK(const struct FPoseLink& InPose, struct FPoseLink* FootIK_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "FootIK");

	Params::ALS_AnimBP_AoC_C_FootIK Parms{};

	Parms.InPose = std::move(InPose);

	UObject::ProcessEvent(Func, &Parms);

	if (FootIK_0 != nullptr)
		*FootIK_0 = std::move(Parms.FootIK_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.HandIK
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        InputPose                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        HandIK_0                                               (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::HandIK(const struct FPoseLink& InputPose, struct FPoseLink* HandIK_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "HandIK");

	Params::ALS_AnimBP_AoC_C_HandIK Parms{};

	Parms.InputPose = std::move(InputPose);

	UObject::ProcessEvent(Func, &Parms);

	if (HandIK_0 != nullptr)
		*HandIK_0 = std::move(Parms.HandIK_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.LayerBleding
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        BaseLayerInput                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        OverlayLayerInput                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        BasePosesInput                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink                        LayerBleding_0                                         (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::LayerBleding(const struct FPoseLink& BaseLayerInput, const struct FPoseLink& OverlayLayerInput, const struct FPoseLink& BasePosesInput, struct FPoseLink* LayerBleding_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "LayerBleding");

	Params::ALS_AnimBP_AoC_C_LayerBleding Parms{};

	Parms.BaseLayerInput = std::move(BaseLayerInput);
	Parms.OverlayLayerInput = std::move(OverlayLayerInput);
	Parms.BasePosesInput = std::move(BasePosesInput);

	UObject::ProcessEvent(Func, &Parms);

	if (LayerBleding_0 != nullptr)
		*LayerBleding_0 = std::move(Parms.LayerBleding_0);
}


// Function ALS_AnimBP_AoC.ALS_AnimBP_AoC_C.OverlayLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        OverlayLayer_0                                         (Parm, OutParm, NoDestructor)

void UALS_AnimBP_AoC_C::OverlayLayer(struct FPoseLink* OverlayLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_AnimBP_AoC_C", "OverlayLayer");

	Params::ALS_AnimBP_AoC_C_OverlayLayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OverlayLayer_0 != nullptr)
		*OverlayLayer_0 = std::move(Parms.OverlayLayer_0);
}

}

