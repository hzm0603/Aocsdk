#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CR_PC_MASTER_Universal_Headlook_Med

#include "Basic.hpp"

#include "AnimationCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// RigVMBlueprintGeneratedClass CR_PC_MASTER_Universal_Headlook_Med.CR_PC_MASTER_Universal_Headlook_Med_C
// 0x0040 (0x0670 - 0x0630)
class UCR_PC_MASTER_Universal_Headlook_Med_C final : public UControlRig
{
public:
	bool                                          ShouldDoHeadLook;                                  // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAiming;                                          // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLookAtLocation;                               // 0x0638(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CRLookAtLocation;                                  // 0x0650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weight_From_Anim;                                  // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CR_PC_MASTER_Universal_Headlook_Med_C">();
	}
	static class UCR_PC_MASTER_Universal_Headlook_Med_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCR_PC_MASTER_Universal_Headlook_Med_C>();
	}
};
static_assert(alignof(UCR_PC_MASTER_Universal_Headlook_Med_C) == 0x000008, "Wrong alignment on UCR_PC_MASTER_Universal_Headlook_Med_C");
static_assert(sizeof(UCR_PC_MASTER_Universal_Headlook_Med_C) == 0x000670, "Wrong size on UCR_PC_MASTER_Universal_Headlook_Med_C");
static_assert(offsetof(UCR_PC_MASTER_Universal_Headlook_Med_C, ShouldDoHeadLook) == 0x000630, "Member 'UCR_PC_MASTER_Universal_Headlook_Med_C::ShouldDoHeadLook' has a wrong offset!");
static_assert(offsetof(UCR_PC_MASTER_Universal_Headlook_Med_C, IsAiming) == 0x000631, "Member 'UCR_PC_MASTER_Universal_Headlook_Med_C::IsAiming' has a wrong offset!");
static_assert(offsetof(UCR_PC_MASTER_Universal_Headlook_Med_C, WorldLookAtLocation) == 0x000638, "Member 'UCR_PC_MASTER_Universal_Headlook_Med_C::WorldLookAtLocation' has a wrong offset!");
static_assert(offsetof(UCR_PC_MASTER_Universal_Headlook_Med_C, CRLookAtLocation) == 0x000650, "Member 'UCR_PC_MASTER_Universal_Headlook_Med_C::CRLookAtLocation' has a wrong offset!");
static_assert(offsetof(UCR_PC_MASTER_Universal_Headlook_Med_C, Weight_From_Anim) == 0x000668, "Member 'UCR_PC_MASTER_Universal_Headlook_Med_C::Weight_From_Anim' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_PC_MASTER_Universal_Headlook_Med.RigVMMemory_Literal
// 0x0668 (0x06B0 - 0x0048)
class CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___ParentConstraint_Child__Const;        // 0x0048(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___ParentConstraint_bMaintainOffset__Const; // 0x0054(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransformFilter                       RigVMModel___ParentConstraint_Filter__Const;       // 0x0055(0x0009)(Edit, EditConst, NonTransactional, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConstraintParent>              RigVMModel___ParentConstraint_Parents__Const;      // 0x0060(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_ParentConstraint_AdvancedSettings RigVMModel___ParentConstraint_AdvancedSettings__Const; // 0x0070(0x0002)(Edit, EditConst, NonTransactional, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___ParentConstraint_Weight__Const;       // 0x0074(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___ParentConstraint_3_Child__Const;      // 0x0078(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConstraintParent>              RigVMModel___ParentConstraint_3_Parents__Const;    // 0x0088(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_ParentConstraint_AdvancedSettings RigVMModel___ParentConstraint_3_AdvancedSettings__Const; // 0x0098(0x0002)(Edit, EditConst, NonTransactional, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RigVMModel___GetCurveValue_Curve__Const;           // 0x009C(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_If_1_False__Const; // 0x00A4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___GetTransform_2_Space__Const;          // 0x00A8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetTransform_2_bInitial__Const;       // 0x00A9(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EEulerRotationOrder                           RigVMModel___RigVMFunction_MathQuaternionToEuler_3_RotationOrder__Const; // 0x00AA(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Remap_SourceMinimum__Const;           // 0x00B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Remap_SourceMaximum__Const;           // 0x00B8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Remap_TargetMinimum__Const;           // 0x00C0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Remap_TargetMaximum__Const;           // 0x00C8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x00D0(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__Const;    // 0x00E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_Item__Const;             // 0x0140(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Greater_1_B__Const;                   // 0x0150(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_2_B__Const;                       // 0x0158(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Greater_B__Const;                     // 0x0170(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Remap_1_1_SourceMaximum__Const;       // 0x0178(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Transform__Const; // 0x0180(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigUnitDebugTransformMode                    RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Mode__Const; // 0x01E0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Color__Const; // 0x01E4(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Thickness__Const; // 0x01F4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Scale__Const; // 0x01F8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___Set_Transform_2_1_Item__Const;        // 0x01FC(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___SpringInterp_1_Strength__Const;       // 0x0208(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_1_1_1_1_Item__Const;          // 0x020C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_1_1_Primary__Const;       // 0x0218(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_1_1_Secondary__Const;     // 0x0260(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	double                                        RigVMModel___Multiply_A__Const;                    // 0x02A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_AimBone_DebugSettings         RigVMModel___AimItem_1_1_1_1_DebugSettings__Const; // 0x02B0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___AimItem_1_1_1_Item__Const;            // 0x0320(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Multiply_2_A__Const;                  // 0x0330(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_1_1_Item__Const;              // 0x0338(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Multiply_3_A__Const;                  // 0x0348(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_1_Item__Const;                // 0x0350(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Multiply_4_A__Const;                  // 0x0360(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___AimItem_Item__Const;                  // 0x0368(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SpawnControl_1_Parent__Const;         // 0x0374(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___SpawnControl_1_Name__Const;           // 0x0380(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlTransform_Settings RigVMModel___SpawnControl_1_Settings__Const;       // 0x0390(0x00D0)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___SpawnControl_Name__Const;             // 0x0460(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SpawnControl_2_2_Parent__Const;       // 0x0468(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___SpawnControl_2_2_Name__Const;         // 0x0474(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___SpawnControl_2_2_OffsetTransform__Const; // 0x0480(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_B__Const;                         // 0x04E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlTransform_Settings RigVMModel___SpawnControl_2_2_Settings__Const;     // 0x0500(0x00D0)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___SpawnControl_1_1_1_Name__Const;       // 0x05D0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___SpawnControl_1_1_1_OffsetSpace__Const; // 0x05D8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_HierarchyAddControlTransform_Settings RigVMModel___SpawnControl_1_1_1_Settings__Const;   // 0x05E0(0x00D0)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_PC_MASTER_Universal_Headlook_Med.RigVMMemory_Literal", true>();
	}
	static class CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal>();
	}
};
static_assert(alignof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal) == 0x000010, "Wrong alignment on CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal");
static_assert(sizeof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal) == 0x0006B0, "Wrong size on CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_Child__Const) == 0x000048, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_Child__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_bMaintainOffset__Const) == 0x000054, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_bMaintainOffset__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_Filter__Const) == 0x000055, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_Filter__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_Parents__Const) == 0x000060, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_Parents__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_AdvancedSettings__Const) == 0x000070, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_AdvancedSettings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_Weight__Const) == 0x000074, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_Weight__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_3_Child__Const) == 0x000078, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_3_Child__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_3_Parents__Const) == 0x000088, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_3_Parents__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___ParentConstraint_3_AdvancedSettings__Const) == 0x000098, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___ParentConstraint_3_AdvancedSettings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___GetCurveValue_Curve__Const) == 0x00009C, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___GetCurveValue_Curve__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___DISPATCH_RigVMDispatch_If_1_False__Const) == 0x0000A4, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___DISPATCH_RigVMDispatch_If_1_False__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___GetTransform_2_Space__Const) == 0x0000A8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___GetTransform_2_Space__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___GetTransform_2_bInitial__Const) == 0x0000A9, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___GetTransform_2_bInitial__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigVMFunction_MathQuaternionToEuler_3_RotationOrder__Const) == 0x0000AA, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigVMFunction_MathQuaternionToEuler_3_RotationOrder__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Remap_SourceMinimum__Const) == 0x0000B0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Remap_SourceMinimum__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Remap_SourceMaximum__Const) == 0x0000B8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Remap_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Remap_TargetMinimum__Const) == 0x0000C0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Remap_TargetMinimum__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Remap_TargetMaximum__Const) == 0x0000C8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Remap_TargetMaximum__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x0000D0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Value__Const) == 0x0000E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Value__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___GetTransform_Item__Const) == 0x000140, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Greater_1_B__Const) == 0x000150, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Greater_1_B__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Add_2_B__Const) == 0x000158, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Add_2_B__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Greater_B__Const) == 0x000170, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Greater_B__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Remap_1_1_SourceMaximum__Const) == 0x000178, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Remap_1_1_SourceMaximum__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Transform__Const) == 0x000180, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Transform__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Mode__Const) == 0x0001E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Mode__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Color__Const) == 0x0001E4, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Color__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Thickness__Const) == 0x0001F4, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Thickness__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Scale__Const) == 0x0001F8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Scale__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Set_Transform_2_1_Item__Const) == 0x0001FC, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Set_Transform_2_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpringInterp_1_Strength__Const) == 0x000208, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpringInterp_1_Strength__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_1_1_1_Item__Const) == 0x00020C, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_1_1_1_Primary__Const) == 0x000218, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_1_1_1_Primary__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_1_1_1_Secondary__Const) == 0x000260, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_1_1_1_Secondary__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Multiply_A__Const) == 0x0002A8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Multiply_A__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_1_1_1_DebugSettings__Const) == 0x0002B0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_1_1_1_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_1_1_Item__Const) == 0x000320, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Multiply_2_A__Const) == 0x000330, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Multiply_2_A__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_1_Item__Const) == 0x000338, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Multiply_3_A__Const) == 0x000348, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Multiply_3_A__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_1_Item__Const) == 0x000350, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Multiply_4_A__Const) == 0x000360, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Multiply_4_A__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___AimItem_Item__Const) == 0x000368, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___AimItem_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_1_Parent__Const) == 0x000374, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_1_Parent__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_1_Name__Const) == 0x000380, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_1_Name__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_1_Settings__Const) == 0x000390, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_1_Settings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_Name__Const) == 0x000460, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_Name__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_2_2_Parent__Const) == 0x000468, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_2_2_Parent__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_2_2_Name__Const) == 0x000474, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_2_2_Name__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_2_2_OffsetTransform__Const) == 0x000480, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_2_2_OffsetTransform__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___Add_B__Const) == 0x0004E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___Add_B__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_2_2_Settings__Const) == 0x000500, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_2_2_Settings__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_1_Name__Const) == 0x0005D0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_1_Name__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_1_OffsetSpace__Const) == 0x0005D8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_1_OffsetSpace__Const' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal, RigVMModel___SpawnControl_1_1_1_Settings__Const) == 0x0005E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Literal::RigVMModel___SpawnControl_1_1_1_Settings__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_PC_MASTER_Universal_Headlook_Med.RigVMMemory_Work
// 0x0BE8 (0x0C30 - 0x0048)
class CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	TArray<struct FCachedRigElement>              RigVMModel___ParentConstraint_ChildCache;          // 0x0048(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<struct FCachedRigElement>>      RigVMModel___ParentConstraint_ParentCaches;        // 0x0058(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___ParentConstraint_3_ChildCache;        // 0x0068(0x0010)(Edit, EditConst, NonTransactional)
	TArray<TArray<struct FCachedRigElement>>      RigVMModel___ParentConstraint_3_ParentCaches;      // 0x0078(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___From_World_1_2_1_Global;              // 0x0088(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Clamp_Result;                         // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Multiply_1_Result;                    // 0x00A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_If_1_Result;   // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetCurveValue_Valid;                  // 0x00B4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___GetCurveValue_Value;                  // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___GetCurveValue_CachedCurveIndex;       // 0x00C0(0x0010)(Edit, EditConst, NonTransactional)
	bool                                          RigVMModel___DISPATCH_RigVMDispatch_If_1_Condition; // 0x00D0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Multiply_1_A;                         // 0x00D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Remap_Result;                         // 0x00E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Absolute_2_Result;                    // 0x00E8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___RigVMFunction_MathQuaternionToEuler_3_Result; // 0x00F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_2_Transform;             // 0x0110(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_CachedIndex;           // 0x0170(0x0010)(Edit, EditConst, NonTransactional)
	struct FQuat                                  RigVMModel___RigVMFunction_MathQuaternionToEuler_3_Value; // 0x0180(0x0020)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Absolute_2_Value;                     // 0x01A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___DISPATCH_RigVMDispatch_If_2_Result;   // 0x01A8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigVMFunction_MathBoolOr_RigVMFunction_MathBoolOr_1_Result; // 0x01C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigVMFunction_MathBoolOr_RigVMFunction_MathBoolOr_Result; // 0x01C1(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___DISPATCH_RigVMDispatch_CoreNotEquals_1_Result; // 0x01C2(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___LessEqual_Result;                     // 0x01C3(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___LessEqual_A;                          // 0x01C8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___Greater_1_Result;                     // 0x01D0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___RigVMFunction_MathVectorDistance_1_Result; // 0x01D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_Transform;               // 0x01E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_CachedIndex;             // 0x0240(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___RigVMFunction_MathVectorDistance_1_A; // 0x0250(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Greater_1_A;                          // 0x0268(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___DISPATCH_RigVMDispatch_If_2_Condition; // 0x0270(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0xF];                                      // 0x0271(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_6_Transform;             // 0x0280(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_6_CachedIndex;           // 0x02E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___DISPATCH_RigVMDispatch_If_2_True;     // 0x02F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_2_Result;                         // 0x0308(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_If_Result;     // 0x0320(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___Greater_Result;                       // 0x0324(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___RigVMFunction_MathVectorAngle_1_Result; // 0x0328(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0330(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x0390(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___RigVMFunction_MathVectorAngle_1_A;    // 0x03A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Greater_A;                            // 0x03B8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___DISPATCH_RigVMDispatch_If_Condition;  // 0x03C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Remap_1_1_Result;                     // 0x03C8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Remap_1_1_Value;                      // 0x03D0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigVMFunction_MathVectorDistance_Result; // 0x03D8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RigVMModel___Remap_1_1_TargetMaximum;              // 0x03E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___DISPATCH_RigVMDispatch_If_True;       // 0x03E8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___Add_2_B__IO;                          // 0x03F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_Value__IO;       // 0x0410(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x0470(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Transform__IO; // 0x0480(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___SpringInterp_1_Result;                // 0x04E0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_4_2_1_Transform;         // 0x0500(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_4_2_1_CachedIndex;       // 0x0560(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___SpringInterp_1_Target;                // 0x0570(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_4_2_Transform;           // 0x0590(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_4_2_CachedIndex;         // 0x05F0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___SpringInterp_1_Current;               // 0x0600(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___SpringInterp_1_Velocity;              // 0x0618(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        RigVMModel___SpringInterp_1_SimulatedResult;       // 0x0630(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FVectorSpringState>             RigVMModel___SpringInterp_1_SpringState;           // 0x0640(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___Set_Transform_2_1_Value__IO;          // 0x0650(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___Set_Transform_2_1_CachedIndex;        // 0x06B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_1_Transform;   // 0x06C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_1_CachedIndex; // 0x0720(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_1_1_Primary__IO;          // 0x0730(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	double                                        RigVMModel___Multiply_Result;                      // 0x0778(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___AimItem_1_1_1_1_Weight;               // 0x0780(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_784[0x4];                                      // 0x0784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_1_1_CachedItem;           // 0x0788(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_1_1_PrimaryCachedSpace;   // 0x0798(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_1_1_SecondaryCachedSpace; // 0x07A8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_1_1_1_bIsInitialized;       // 0x07B8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_1_Primary__IO;            // 0x07C8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	double                                        RigVMModel___Multiply_2_Result;                    // 0x0810(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___AimItem_1_1_1_Weight;                 // 0x0818(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81C[0x4];                                      // 0x081C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_1_CachedItem;             // 0x0820(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_1_PrimaryCachedSpace;     // 0x0830(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_1_SecondaryCachedSpace;   // 0x0840(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_1_1_bIsInitialized;         // 0x0850(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_1_Primary__IO;              // 0x0860(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	double                                        RigVMModel___Multiply_3_Result;                    // 0x08A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___AimItem_1_1_Weight;                   // 0x08B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B4[0x4];                                      // 0x08B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_CachedItem;               // 0x08B8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_PrimaryCachedSpace;       // 0x08C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_1_SecondaryCachedSpace;     // 0x08D8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_1_bIsInitialized;           // 0x08E8(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_1_Primary__IO;                // 0x08F8(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	double                                        RigVMModel___Multiply_4_Result;                    // 0x0940(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___AimItem_1_Weight;                     // 0x0948(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94C[0x4];                                      // 0x094C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_CachedItem;                 // 0x0950(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_PrimaryCachedSpace;         // 0x0960(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_1_SecondaryCachedSpace;       // 0x0970(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_1_bIsInitialized;             // 0x0980(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigUnit_AimItem_Target                RigVMModel___AimItem_Primary__IO;                  // 0x0990(0x0048)(Edit, EditConst, NonTransactional, NoDestructor)
	double                                        RigVMModel___Multiply_4_1_Result;                  // 0x09D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___AimItem_Weight;                       // 0x09E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E4[0x4];                                      // 0x09E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_CachedItem;                   // 0x09E8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_PrimaryCachedSpace;           // 0x09F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___AimItem_SecondaryCachedSpace;         // 0x0A08(0x0010)(Edit, EditConst, NonTransactional)
	TArray<bool>                                  RigVMModel___AimItem_bIsInitialized;               // 0x0A18(0x0010)(Edit, EditConst, NonTransactional)
	struct FRigElementKey                         RigVMModel___SpawnControl_1_Item;                  // 0x0A28(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SpawnControl_Item;                    // 0x0A34(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SpawnControl_2_2_Item;                // 0x0A40(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4C[0x4];                                      // 0x0A4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_5_Transform;             // 0x0A50(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_5_CachedIndex;           // 0x0AB0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___Add_Result;                           // 0x0AC0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_A;                                // 0x0AD8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RigVMModel___SpawnControl_2_2_InitialValue__IO;    // 0x0AF0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___SpawnControl_1_1_1_Item;              // 0x0B50(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5C[0x4];                                      // 0x0B5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_9_Transform;             // 0x0B60(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_9_CachedIndex;           // 0x0BC0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___SpawnControl_1_1_1_InitialValue__IO;  // 0x0BD0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_PC_MASTER_Universal_Headlook_Med.RigVMMemory_Work", true>();
	}
	static class CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work>();
	}
};
static_assert(alignof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work) == 0x000010, "Wrong alignment on CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work");
static_assert(sizeof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work) == 0x000C30, "Wrong size on CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___ParentConstraint_ChildCache) == 0x000048, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___ParentConstraint_ChildCache' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___ParentConstraint_ParentCaches) == 0x000058, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___ParentConstraint_ParentCaches' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___ParentConstraint_3_ChildCache) == 0x000068, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___ParentConstraint_3_ChildCache' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___ParentConstraint_3_ParentCaches) == 0x000078, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___ParentConstraint_3_ParentCaches' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___From_World_1_2_1_Global) == 0x000088, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___From_World_1_2_1_Global' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Clamp_Result) == 0x0000A0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Clamp_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_1_Result) == 0x0000A8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_1_Result) == 0x0000B0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetCurveValue_Valid) == 0x0000B4, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetCurveValue_Valid' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetCurveValue_Value) == 0x0000B8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetCurveValue_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetCurveValue_CachedCurveIndex) == 0x0000C0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetCurveValue_CachedCurveIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_1_Condition) == 0x0000D0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_1_Condition' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_1_A) == 0x0000D8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_1_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Remap_Result) == 0x0000E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Remap_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Absolute_2_Result) == 0x0000E8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Absolute_2_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathQuaternionToEuler_3_Result) == 0x0000F0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathQuaternionToEuler_3_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_2_Transform) == 0x000110, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_2_CachedIndex) == 0x000170, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathQuaternionToEuler_3_Value) == 0x000180, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathQuaternionToEuler_3_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Absolute_2_Value) == 0x0001A0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Absolute_2_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_2_Result) == 0x0001A8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_2_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathBoolOr_RigVMFunction_MathBoolOr_1_Result) == 0x0001C0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathBoolOr_RigVMFunction_MathBoolOr_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathBoolOr_RigVMFunction_MathBoolOr_Result) == 0x0001C1, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathBoolOr_RigVMFunction_MathBoolOr_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_CoreNotEquals_1_Result) == 0x0001C2, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_CoreNotEquals_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___LessEqual_Result) == 0x0001C3, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___LessEqual_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___LessEqual_A) == 0x0001C8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___LessEqual_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Greater_1_Result) == 0x0001D0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Greater_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathVectorDistance_1_Result) == 0x0001D4, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathVectorDistance_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_Transform) == 0x0001E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_CachedIndex) == 0x000240, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathVectorDistance_1_A) == 0x000250, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathVectorDistance_1_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Greater_1_A) == 0x000268, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Greater_1_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_2_Condition) == 0x000270, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_2_Condition' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_6_Transform) == 0x000280, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_6_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_6_CachedIndex) == 0x0002E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_6_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_2_True) == 0x0002F0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_2_True' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Add_2_Result) == 0x000308, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Add_2_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_Result) == 0x000320, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Greater_Result) == 0x000324, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Greater_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathVectorAngle_1_Result) == 0x000328, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathVectorAngle_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000330, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x000390, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathVectorAngle_1_A) == 0x0003A0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathVectorAngle_1_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Greater_A) == 0x0003B8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Greater_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_Condition) == 0x0003C0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_Condition' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Remap_1_1_Result) == 0x0003C8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Remap_1_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Remap_1_1_Value) == 0x0003D0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Remap_1_1_Value' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_MathVectorDistance_Result) == 0x0003D8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_MathVectorDistance_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Remap_1_1_TargetMaximum) == 0x0003E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Remap_1_1_TargetMaximum' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___DISPATCH_RigVMDispatch_If_True) == 0x0003E8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___DISPATCH_RigVMDispatch_If_True' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Add_2_B__IO) == 0x0003F0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Add_2_B__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_Value__IO) == 0x000410, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_Value__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x000470, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Transform__IO) == 0x000480, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigVMFunction_DebugTransformMutableNoSpace_Transform__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpringInterp_1_Result) == 0x0004E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpringInterp_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_4_2_1_Transform) == 0x000500, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_4_2_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_4_2_1_CachedIndex) == 0x000560, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_4_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpringInterp_1_Target) == 0x000570, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpringInterp_1_Target' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_4_2_Transform) == 0x000590, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_4_2_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_4_2_CachedIndex) == 0x0005F0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_4_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpringInterp_1_Current) == 0x000600, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpringInterp_1_Current' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpringInterp_1_Velocity) == 0x000618, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpringInterp_1_Velocity' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpringInterp_1_SimulatedResult) == 0x000630, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpringInterp_1_SimulatedResult' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpringInterp_1_SpringState) == 0x000640, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpringInterp_1_SpringState' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Set_Transform_2_1_Value__IO) == 0x000650, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Set_Transform_2_1_Value__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Set_Transform_2_1_CachedIndex) == 0x0006B0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Set_Transform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_Transform) == 0x0006C0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_1_CachedIndex) == 0x000720, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_1_Primary__IO) == 0x000730, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_Result) == 0x000778, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_1_Weight) == 0x000780, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_1_Weight' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_1_CachedItem) == 0x000788, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_1_CachedItem' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_1_PrimaryCachedSpace) == 0x000798, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_1_SecondaryCachedSpace) == 0x0007A8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_1_bIsInitialized) == 0x0007B8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_Primary__IO) == 0x0007C8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_2_Result) == 0x000810, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_2_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_Weight) == 0x000818, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_Weight' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_CachedItem) == 0x000820, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_CachedItem' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_PrimaryCachedSpace) == 0x000830, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_SecondaryCachedSpace) == 0x000840, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_1_bIsInitialized) == 0x000850, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_Primary__IO) == 0x000860, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_3_Result) == 0x0008A8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_3_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_Weight) == 0x0008B0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_Weight' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_CachedItem) == 0x0008B8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_CachedItem' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_PrimaryCachedSpace) == 0x0008C8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_SecondaryCachedSpace) == 0x0008D8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_1_bIsInitialized) == 0x0008E8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_Primary__IO) == 0x0008F8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_Primary__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_4_Result) == 0x000940, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_4_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_Weight) == 0x000948, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_Weight' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_CachedItem) == 0x000950, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_CachedItem' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_PrimaryCachedSpace) == 0x000960, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_SecondaryCachedSpace) == 0x000970, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_1_bIsInitialized) == 0x000980, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_1_bIsInitialized' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_Primary__IO) == 0x000990, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_Primary__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Multiply_4_1_Result) == 0x0009D8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Multiply_4_1_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_Weight) == 0x0009E0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_Weight' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_CachedItem) == 0x0009E8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_CachedItem' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_PrimaryCachedSpace) == 0x0009F8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_PrimaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_SecondaryCachedSpace) == 0x000A08, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_SecondaryCachedSpace' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___AimItem_bIsInitialized) == 0x000A18, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___AimItem_bIsInitialized' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpawnControl_1_Item) == 0x000A28, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpawnControl_1_Item' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpawnControl_Item) == 0x000A34, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpawnControl_Item' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpawnControl_2_2_Item) == 0x000A40, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpawnControl_2_2_Item' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_5_Transform) == 0x000A50, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_5_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_5_CachedIndex) == 0x000AB0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_5_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Add_Result) == 0x000AC0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Add_Result' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___Add_A) == 0x000AD8, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___Add_A' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpawnControl_2_2_InitialValue__IO) == 0x000AF0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpawnControl_2_2_InitialValue__IO' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpawnControl_1_1_1_Item) == 0x000B50, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpawnControl_1_1_1_Item' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_9_Transform) == 0x000B60, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_9_Transform' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___GetTransform_9_CachedIndex) == 0x000BC0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___GetTransform_9_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work, RigVMModel___SpawnControl_1_1_1_InitialValue__IO) == 0x000BD0, "Member 'CR_PC_MASTER_Universal_Headlook_Med::URigVMMemory_Work::RigVMModel___SpawnControl_1_1_1_InitialValue__IO' has a wrong offset!");

}

