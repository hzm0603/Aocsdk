#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: STT_Accumulator_Gorilla_PowerSmack

#include "Basic.hpp"

#include "STT_Accumulator_Timer_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass STT_Accumulator_Gorilla_PowerSmack.STT_Accumulator_Gorilla_PowerSmack_C
// 0x0020 (0x0128 - 0x0108)
class USTT_Accumulator_Gorilla_PowerSmack_C final : public USTT_Accumulator_Timer_C
{
public:
	double                                        TargetRange;                                       // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetAngle;                                       // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetExtraCoefficient;                            // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTarget;                                         // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Accumulate(double DeltaTime);
	void GetAdditionalAccumulation(double* ExtraCoefficient);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"STT_Accumulator_Gorilla_PowerSmack_C">();
	}
	static class USTT_Accumulator_Gorilla_PowerSmack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USTT_Accumulator_Gorilla_PowerSmack_C>();
	}
};
static_assert(alignof(USTT_Accumulator_Gorilla_PowerSmack_C) == 0x000008, "Wrong alignment on USTT_Accumulator_Gorilla_PowerSmack_C");
static_assert(sizeof(USTT_Accumulator_Gorilla_PowerSmack_C) == 0x000128, "Wrong size on USTT_Accumulator_Gorilla_PowerSmack_C");
static_assert(offsetof(USTT_Accumulator_Gorilla_PowerSmack_C, TargetRange) == 0x000108, "Member 'USTT_Accumulator_Gorilla_PowerSmack_C::TargetRange' has a wrong offset!");
static_assert(offsetof(USTT_Accumulator_Gorilla_PowerSmack_C, TargetAngle) == 0x000110, "Member 'USTT_Accumulator_Gorilla_PowerSmack_C::TargetAngle' has a wrong offset!");
static_assert(offsetof(USTT_Accumulator_Gorilla_PowerSmack_C, TargetExtraCoefficient) == 0x000118, "Member 'USTT_Accumulator_Gorilla_PowerSmack_C::TargetExtraCoefficient' has a wrong offset!");
static_assert(offsetof(USTT_Accumulator_Gorilla_PowerSmack_C, MaxTarget) == 0x000120, "Member 'USTT_Accumulator_Gorilla_PowerSmack_C::MaxTarget' has a wrong offset!");

}

