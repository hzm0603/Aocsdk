#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LumenLight

#include "Basic.hpp"

#include "E_LumenLightTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LumenLight.BP_LumenLight_C
// 0x00A8 (0x03F0 - 0x0348)
class ABP_LumenLight_C final : public AActor
{
public:
	class UBillboardComponent*                    Billboard1;                                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_LumenLightTypes                             Light_Type;                                        // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Source_Radius;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightOn;                                           // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Light_Intensity;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color;                                       // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Color_Temperature;                             // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Color_Temperature;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CalculatedLight_Color;                             // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LightSourceMesh;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Width;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Source_Height;                                     // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IntensityMultiplier;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InternalLightIntensity;                            // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Time_of_Day;                                   // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InternalDayIntensity;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InternalTODForLerp;                                // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Day_Time_Intensity;                                // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	struct FVector GetLightColor();
	void Refresh();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LumenLight_C">();
	}
	static class ABP_LumenLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LumenLight_C>();
	}
};
static_assert(alignof(ABP_LumenLight_C) == 0x000008, "Wrong alignment on ABP_LumenLight_C");
static_assert(sizeof(ABP_LumenLight_C) == 0x0003F0, "Wrong size on ABP_LumenLight_C");
static_assert(offsetof(ABP_LumenLight_C, Billboard1) == 0x000348, "Member 'ABP_LumenLight_C::Billboard1' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Billboard) == 0x000350, "Member 'ABP_LumenLight_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_LumenLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Light_Type) == 0x000360, "Member 'ABP_LumenLight_C::Light_Type' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Source_Radius) == 0x000368, "Member 'ABP_LumenLight_C::Source_Radius' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, LightOn) == 0x000370, "Member 'ABP_LumenLight_C::LightOn' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Light_Intensity) == 0x000374, "Member 'ABP_LumenLight_C::Light_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Light_Color) == 0x000378, "Member 'ABP_LumenLight_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Use_Color_Temperature) == 0x000388, "Member 'ABP_LumenLight_C::Use_Color_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Color_Temperature) == 0x000390, "Member 'ABP_LumenLight_C::Color_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, CalculatedLight_Color) == 0x000398, "Member 'ABP_LumenLight_C::CalculatedLight_Color' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, LightSourceMesh) == 0x0003A8, "Member 'ABP_LumenLight_C::LightSourceMesh' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Source_Width) == 0x0003B0, "Member 'ABP_LumenLight_C::Source_Width' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Source_Height) == 0x0003B8, "Member 'ABP_LumenLight_C::Source_Height' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, IntensityMultiplier) == 0x0003C0, "Member 'ABP_LumenLight_C::IntensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, InternalLightIntensity) == 0x0003C8, "Member 'ABP_LumenLight_C::InternalLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Use_Time_of_Day) == 0x0003D0, "Member 'ABP_LumenLight_C::Use_Time_of_Day' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, InternalDayIntensity) == 0x0003D8, "Member 'ABP_LumenLight_C::InternalDayIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, InternalTODForLerp) == 0x0003E0, "Member 'ABP_LumenLight_C::InternalTODForLerp' has a wrong offset!");
static_assert(offsetof(ABP_LumenLight_C, Day_Time_Intensity) == 0x0003E8, "Member 'ABP_LumenLight_C::Day_Time_Intensity' has a wrong offset!");

}

