#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LandscapeBrushRoadIntersection

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameSystemsPlugin_structs.hpp"
#include "GameSystemsPlugin_classes.hpp"
#include "S_IntersectionSetDressingData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LandscapeBrushRoadIntersection.BP_LandscapeBrushRoadIntersection_C
// 0x0218 (0x0568 - 0x0350)
class ABP_LandscapeBrushRoadIntersection_C final : public ALandscapeBrushBaseActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineComponent*>               Splines;                                           // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Assign_Proximity;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ABP_LandscapeBrushRoad_C>> Connected_Roads;                          // 0x0378(0x0010)(Edit, BlueprintVisible)
	TArray<double>                                Max_Road_Widths;                                   // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Road_Widths;                                       // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Fade_Distances;                                    // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USplineMeshComponent*>           Grass_Hiding_Spline_Meshes;                        // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Grass_Hiding_DMIs;                                 // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Road_Material_DMIs;                                // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  Is_Road_End;                                       // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Segment_Length;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           Visible_Spline_Base_Meshes;                        // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FSplinePoint>                   Connected_Points;                                  // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Groove_Depths;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Make_Coplanar;                                     // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USplineMeshComponent*>           Visible_Spline_Top_Meshes;                         // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       Road_Top_Material_DMIs;                            // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Connection_Increments;                             // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_LandscapeBrushRoad_C*>       Roads_to_Consider_For_Assigning;                   // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Use_Intersection_Position_As_Center;               // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Intersection_Plane_Normal;                         // 0x0480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ABP_WallRoadLocator_C*                  Parent_WallRoadLocator;                            // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  Dynamic_Mesh_Component;                            // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDynamicMeshComponent*                  Landscape_Deforming_DynMesh;                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  Is_Active_Road;                                    // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UObject>>         Top_Road_Materials;                                // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UPhysicalMaterial>> Top_Road_Phys_Materials;                         // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftObjectPtr<class UMaterialInterface>      Road_For_Minimap_Material;                         // 0x04E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsIntersectionInitializedAtRuntime;                // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLoadedRoadBaseAppearance>      BaseAppearances;                                   // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Can_Adjust_Endpoint_Positions;                     // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPCGComponent*>                  Active_PCG_Comps;                                  // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FS_IntersectionSetDressingData         Intersection_SD_Data;                              // 0x0538(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Show_Middle_Path;                                  // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDecalComponent*>                Decal_Array;                                       // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UMaterialInterface*                     Middle_Decal;                                      // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Base_Visible_Spline_Meshes();
	void Add_Grass_Hiding_Spline_Meshes();
	void Add_Middle_Path_Decals();
	void Adjust_Connected_Road_Endpoints();
	void Apply_Set_Dressing();
	void Assign_By_Proximity();
	void Assign_By_Proximity_Array(TArray<class ABP_LandscapeBrushRoad_C*>& Road_Actors);
	void Build_Intersection();
	void Build_Landscape_Deforming_Dynamic_Mesh();
	void Build_Splines(bool* Success);
	void Capture_Minimap(bool Is_Capturing, double Height_Offset, double Width_Scale);
	void Capture_Minimap_Internal(bool Is_Capturing, double Height_Offset, double Width_Scale);
	void Capture_Off();
	void Capture_On();
	void Clear_All_PCG_Data();
	void disable();
	void Disable_Auto_Update_Terrain_for_Self_and_Connected();
	void EditorAssignByProximityNative();
	void EditorPrepForSceneCapture(const bool bIsCapturing, const class FName LayerName);
	void Enable();
	void Enable_Auto_Update_Terrain_for_Self_and_Connected();
	void ExecuteUbergraph_BP_LandscapeBrushRoadIntersection(int32 EntryPoint);
	void Get_Connected_Roads_Settings();
	void Manage_Visible_Spline_Top_Meshes(bool Full_Refresh);
	void OnRep_Connected_Roads();
	void PrepForSceneCapture(bool IsCapturing, class FName LayerName);
	void ReArrange_Roads_Arrays();
	void ReceiveTick(float DeltaSeconds);
	void Refresh_Is_Road_End_Array();
	void Refresh_Road_Connections();
	void Update_Base_Visible_Spline_Meshes();
	void Update_Grass_Hiding_Spline_Meshes();
	void Update_Intersection();
	void Update_PCG_Data();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LandscapeBrushRoadIntersection_C">();
	}
	static class ABP_LandscapeBrushRoadIntersection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LandscapeBrushRoadIntersection_C>();
	}
};
static_assert(alignof(ABP_LandscapeBrushRoadIntersection_C) == 0x000008, "Wrong alignment on ABP_LandscapeBrushRoadIntersection_C");
static_assert(sizeof(ABP_LandscapeBrushRoadIntersection_C) == 0x000568, "Wrong size on ABP_LandscapeBrushRoadIntersection_C");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, UberGraphFrame) == 0x000350, "Member 'ABP_LandscapeBrushRoadIntersection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Billboard) == 0x000358, "Member 'ABP_LandscapeBrushRoadIntersection_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Splines) == 0x000360, "Member 'ABP_LandscapeBrushRoadIntersection_C::Splines' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Assign_Proximity) == 0x000370, "Member 'ABP_LandscapeBrushRoadIntersection_C::Assign_Proximity' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Connected_Roads) == 0x000378, "Member 'ABP_LandscapeBrushRoadIntersection_C::Connected_Roads' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Max_Road_Widths) == 0x000388, "Member 'ABP_LandscapeBrushRoadIntersection_C::Max_Road_Widths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Road_Widths) == 0x000398, "Member 'ABP_LandscapeBrushRoadIntersection_C::Road_Widths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Fade_Distances) == 0x0003A8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Fade_Distances' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Grass_Hiding_Spline_Meshes) == 0x0003B8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Grass_Hiding_Spline_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Grass_Hiding_DMIs) == 0x0003C8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Grass_Hiding_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Road_Material_DMIs) == 0x0003D8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Road_Material_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Is_Road_End) == 0x0003E8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Is_Road_End' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Segment_Length) == 0x0003F8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Segment_Length' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Visible_Spline_Base_Meshes) == 0x000400, "Member 'ABP_LandscapeBrushRoadIntersection_C::Visible_Spline_Base_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Connected_Points) == 0x000410, "Member 'ABP_LandscapeBrushRoadIntersection_C::Connected_Points' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Groove_Depths) == 0x000420, "Member 'ABP_LandscapeBrushRoadIntersection_C::Groove_Depths' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Make_Coplanar) == 0x000430, "Member 'ABP_LandscapeBrushRoadIntersection_C::Make_Coplanar' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Visible_Spline_Top_Meshes) == 0x000438, "Member 'ABP_LandscapeBrushRoadIntersection_C::Visible_Spline_Top_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Road_Top_Material_DMIs) == 0x000448, "Member 'ABP_LandscapeBrushRoadIntersection_C::Road_Top_Material_DMIs' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Connection_Increments) == 0x000458, "Member 'ABP_LandscapeBrushRoadIntersection_C::Connection_Increments' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Roads_to_Consider_For_Assigning) == 0x000468, "Member 'ABP_LandscapeBrushRoadIntersection_C::Roads_to_Consider_For_Assigning' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Use_Intersection_Position_As_Center) == 0x000478, "Member 'ABP_LandscapeBrushRoadIntersection_C::Use_Intersection_Position_As_Center' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Intersection_Plane_Normal) == 0x000480, "Member 'ABP_LandscapeBrushRoadIntersection_C::Intersection_Plane_Normal' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Parent_WallRoadLocator) == 0x000498, "Member 'ABP_LandscapeBrushRoadIntersection_C::Parent_WallRoadLocator' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Dynamic_Mesh_Component) == 0x0004A0, "Member 'ABP_LandscapeBrushRoadIntersection_C::Dynamic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Landscape_Deforming_DynMesh) == 0x0004A8, "Member 'ABP_LandscapeBrushRoadIntersection_C::Landscape_Deforming_DynMesh' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Is_Active_Road) == 0x0004B0, "Member 'ABP_LandscapeBrushRoadIntersection_C::Is_Active_Road' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Top_Road_Materials) == 0x0004C0, "Member 'ABP_LandscapeBrushRoadIntersection_C::Top_Road_Materials' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Top_Road_Phys_Materials) == 0x0004D0, "Member 'ABP_LandscapeBrushRoadIntersection_C::Top_Road_Phys_Materials' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Road_For_Minimap_Material) == 0x0004E0, "Member 'ABP_LandscapeBrushRoadIntersection_C::Road_For_Minimap_Material' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, IsIntersectionInitializedAtRuntime) == 0x000508, "Member 'ABP_LandscapeBrushRoadIntersection_C::IsIntersectionInitializedAtRuntime' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, BaseAppearances) == 0x000510, "Member 'ABP_LandscapeBrushRoadIntersection_C::BaseAppearances' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Can_Adjust_Endpoint_Positions) == 0x000520, "Member 'ABP_LandscapeBrushRoadIntersection_C::Can_Adjust_Endpoint_Positions' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Active_PCG_Comps) == 0x000528, "Member 'ABP_LandscapeBrushRoadIntersection_C::Active_PCG_Comps' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Intersection_SD_Data) == 0x000538, "Member 'ABP_LandscapeBrushRoadIntersection_C::Intersection_SD_Data' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Show_Middle_Path) == 0x000548, "Member 'ABP_LandscapeBrushRoadIntersection_C::Show_Middle_Path' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Decal_Array) == 0x000550, "Member 'ABP_LandscapeBrushRoadIntersection_C::Decal_Array' has a wrong offset!");
static_assert(offsetof(ABP_LandscapeBrushRoadIntersection_C, Middle_Decal) == 0x000560, "Member 'ABP_LandscapeBrushRoadIntersection_C::Middle_Decal' has a wrong offset!");

}

