#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_SplineFollowPlayer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.ExecuteUbergraph_BP_Audio_SplineFollowPlayer
// 0x0258 (0x0258 - 0x0000)
struct BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             UniqueObjectNameForCooking_OutputDelegate;         // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetControlledPawnLocation_ControlledPawnReference; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlledPawnLocation_ControlledPawnLocation; // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindLocationClosestToWorldLocation_ReturnValue; // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetControlledPawnLocation_ControlledPawnReference_1; // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetControlledPawnLocation_ControlledPawnLocation_1; // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDistanceToPlayerFromClosestSplinePoint_DistanceToPlayerFromClosestSplinePoint; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x00E0(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation; // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation_1; // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0140(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TDelegate<void()>                             UniqueObjectNameForCooking_OutputDelegate_1;       // 0x0228(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0238(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0248(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1;  // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer) == 0x000008, "Wrong alignment on BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer");
static_assert(sizeof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer) == 0x000258, "Wrong size on BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, EntryPoint) == 0x000000, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, UniqueObjectNameForCooking_OutputDelegate) == 0x000004, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::UniqueObjectNameForCooking_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetControlledPawnLocation_ControlledPawnReference) == 0x000028, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetControlledPawnLocation_ControlledPawnReference' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetControlledPawnLocation_ControlledPawnLocation) == 0x000030, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetControlledPawnLocation_ControlledPawnLocation' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_FindLocationClosestToWorldLocation_ReturnValue) == 0x000048, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_FindLocationClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetControlledPawnLocation_ControlledPawnReference_1) == 0x000060, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetControlledPawnLocation_ControlledPawnReference_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetControlledPawnLocation_ControlledPawnLocation_1) == 0x000068, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetControlledPawnLocation_ControlledPawnLocation_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_BreakVector_X) == 0x000080, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_BreakVector_Y) == 0x000088, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_BreakVector_Z) == 0x000090, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_BreakVector_X_1) == 0x000098, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_BreakVector_Y_1) == 0x0000A0, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_BreakVector_Z_1) == 0x0000A8, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetDistanceToPlayerFromClosestSplinePoint_DistanceToPlayerFromClosestSplinePoint) == 0x0000C8, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetDistanceToPlayerFromClosestSplinePoint_DistanceToPlayerFromClosestSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0000D9, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, K2Node_Event_DeltaSeconds) == 0x0000DC, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, Temp_delegate_Variable) == 0x0000E0, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation) == 0x0000F0, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation_1) == 0x000108, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_GetPlayerControllerCameraRotation_PlayerControllerCameraRotation_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000120, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_PostAkEvent_ReturnValue) == 0x000138, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000140, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, UniqueObjectNameForCooking_OutputDelegate_1) == 0x000228, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::UniqueObjectNameForCooking_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000238, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000240, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000248, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000250, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1) == 0x000254, "Member 'BP_Audio_SplineFollowPlayer_C_ExecuteUbergraph_BP_Audio_SplineFollowPlayer::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1' has a wrong offset!");

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetControlledPawnLocation
// 0x0050 (0x0050 - 0x0000)
struct BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation final
{
public:
	class APawn*                                  ControlledPawnReference;                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ControlledPawnLocation;                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation) == 0x000008, "Wrong alignment on BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation");
static_assert(sizeof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation) == 0x000050, "Wrong size on BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation, ControlledPawnReference) == 0x000000, "Member 'BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation::ControlledPawnReference' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation, ControlledPawnLocation) == 0x000008, "Member 'BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation::ControlledPawnLocation' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_Audio_SplineFollowPlayer_C_GetControlledPawnLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetDistanceToPlayerFromClosestSplinePoint
// 0x0058 (0x0058 - 0x0000)
struct BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint final
{
public:
	double                                        DistanceToPlayerFromClosestSplinePoint;            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint) == 0x000008, "Wrong alignment on BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint");
static_assert(sizeof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint) == 0x000058, "Wrong size on BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, DistanceToPlayerFromClosestSplinePoint) == 0x000000, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::DistanceToPlayerFromClosestSplinePoint' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint, CallFunc_VSize_ReturnValue) == 0x000050, "Member 'BP_Audio_SplineFollowPlayer_C_GetDistanceToPlayerFromClosestSplinePoint::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetPlayerControllerCameraRotation
// 0x0040 (0x0040 - 0x0000)
struct BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation final
{
public:
	struct FRotator                               PlayerControllerCameraRotation;                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation) == 0x000008, "Wrong alignment on BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation");
static_assert(sizeof(BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation) == 0x000040, "Wrong size on BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation, PlayerControllerCameraRotation) == 0x000000, "Member 'BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation::PlayerControllerCameraRotation' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation, CallFunc_GetCameraRotation_ReturnValue) == 0x000020, "Member 'BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_Audio_SplineFollowPlayer_C_GetPlayerControllerCameraRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Audio_SplineFollowPlayer_C_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_SplineFollowPlayer_C_GetSplineComponent) == 0x000008, "Wrong alignment on BP_Audio_SplineFollowPlayer_C_GetSplineComponent");
static_assert(sizeof(BP_Audio_SplineFollowPlayer_C_GetSplineComponent) == 0x000008, "Wrong size on BP_Audio_SplineFollowPlayer_C_GetSplineComponent");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_GetSplineComponent, ReturnValue) == 0x000000, "Member 'BP_Audio_SplineFollowPlayer_C_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function BP_Audio_SplineFollowPlayer.BP_Audio_SplineFollowPlayer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Audio_SplineFollowPlayer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_SplineFollowPlayer_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Audio_SplineFollowPlayer_C_ReceiveTick");
static_assert(sizeof(BP_Audio_SplineFollowPlayer_C_ReceiveTick) == 0x000004, "Wrong size on BP_Audio_SplineFollowPlayer_C_ReceiveTick");
static_assert(offsetof(BP_Audio_SplineFollowPlayer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Audio_SplineFollowPlayer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

