#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPDA_CloudPreset

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPDA_CloudPreset.BPDA_CloudPreset_C
// 0x01D8 (0x0228 - 0x0050)
class UBPDA_CloudPreset_C final : public UPrimaryDataAsset
{
public:
	double                                        Precipitation;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Humidity;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stratus_Coverage;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stratus_Variation;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stratus_Height_Variation;                          // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stratocumulus_Coverage;                            // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stratocumulus_Coverage_Variation;                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stratocumulus_Height_Variation;                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cumulus_Coverage;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cumulus_Coverage_Variation;                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cumulus_Height_Variation;                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cumulonimbus_Coverage;                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cumulonimbus_Anvil;                                // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cumulonimbus_Height_Variation;                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Density_Bottom;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Density_Middle;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Density_Top;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Albedo;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ground_Albedo;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Beer_s_Powder_Intensity;                           // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Beer_s_Powder_Depth;                               // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bottom_Occlusion;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bottom_Occlusion_Height;                           // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Night_Emissive;                                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Phase_G;                                           // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Phase_G2;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Phase_Blend;                                       // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Multi_Scattering_Contribution;                     // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Multi_Scattering_Occlusion;                        // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Multi_Scattering_Eccentricity;                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Noise_Shape_Intensity_A;                           // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Noise_Shape_Intensity_B;                           // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Noise_Shape_Intensity_C;                           // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Noise_Shape_Intensity_D;                           // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turbulence_Intensity;                              // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intensity;                                         // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Tint;                                        // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_A;                                           // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_B;                                           // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_C;                                           // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Phase;                                   // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_Bottom_Altitude;                             // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_Height;                                      // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Start_Max_Distance;                        // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Distance;                              // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_Light_Cloud_Bottom_Occlusion;                  // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        View_Sample_Count_Scale;                           // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reflection_View_Sample_Count_Scale_Value;          // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_View_Sample_Count_Scale;                    // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Tracing_Distance;                           // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stop_Tracing_Transmittance_Threshold;              // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadow_Strength;                             // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadow_On_Atmosphere_Strength;               // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadow_on_Surface_Strength;                  // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPDA_CloudPreset_C">();
	}
	static class UBPDA_CloudPreset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPDA_CloudPreset_C>();
	}
};
static_assert(alignof(UBPDA_CloudPreset_C) == 0x000008, "Wrong alignment on UBPDA_CloudPreset_C");
static_assert(sizeof(UBPDA_CloudPreset_C) == 0x000228, "Wrong size on UBPDA_CloudPreset_C");
static_assert(offsetof(UBPDA_CloudPreset_C, Precipitation) == 0x000050, "Member 'UBPDA_CloudPreset_C::Precipitation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Temperature) == 0x000058, "Member 'UBPDA_CloudPreset_C::Temperature' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Humidity) == 0x000060, "Member 'UBPDA_CloudPreset_C::Humidity' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stratus_Coverage) == 0x000068, "Member 'UBPDA_CloudPreset_C::Stratus_Coverage' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stratus_Variation) == 0x000070, "Member 'UBPDA_CloudPreset_C::Stratus_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stratus_Height_Variation) == 0x000078, "Member 'UBPDA_CloudPreset_C::Stratus_Height_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stratocumulus_Coverage) == 0x000080, "Member 'UBPDA_CloudPreset_C::Stratocumulus_Coverage' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stratocumulus_Coverage_Variation) == 0x000088, "Member 'UBPDA_CloudPreset_C::Stratocumulus_Coverage_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stratocumulus_Height_Variation) == 0x000090, "Member 'UBPDA_CloudPreset_C::Stratocumulus_Height_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cumulus_Coverage) == 0x000098, "Member 'UBPDA_CloudPreset_C::Cumulus_Coverage' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cumulus_Coverage_Variation) == 0x0000A0, "Member 'UBPDA_CloudPreset_C::Cumulus_Coverage_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cumulus_Height_Variation) == 0x0000A8, "Member 'UBPDA_CloudPreset_C::Cumulus_Height_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cumulonimbus_Coverage) == 0x0000B0, "Member 'UBPDA_CloudPreset_C::Cumulonimbus_Coverage' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cumulonimbus_Anvil) == 0x0000B8, "Member 'UBPDA_CloudPreset_C::Cumulonimbus_Anvil' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cumulonimbus_Height_Variation) == 0x0000C0, "Member 'UBPDA_CloudPreset_C::Cumulonimbus_Height_Variation' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Density_Bottom) == 0x0000C8, "Member 'UBPDA_CloudPreset_C::Density_Bottom' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Density_Middle) == 0x0000D0, "Member 'UBPDA_CloudPreset_C::Density_Middle' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Density_Top) == 0x0000D8, "Member 'UBPDA_CloudPreset_C::Density_Top' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Albedo) == 0x0000E0, "Member 'UBPDA_CloudPreset_C::Albedo' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Ground_Albedo) == 0x0000F0, "Member 'UBPDA_CloudPreset_C::Ground_Albedo' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Beer_s_Powder_Intensity) == 0x000100, "Member 'UBPDA_CloudPreset_C::Beer_s_Powder_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Beer_s_Powder_Depth) == 0x000108, "Member 'UBPDA_CloudPreset_C::Beer_s_Powder_Depth' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Bottom_Occlusion) == 0x000110, "Member 'UBPDA_CloudPreset_C::Bottom_Occlusion' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Bottom_Occlusion_Height) == 0x000118, "Member 'UBPDA_CloudPreset_C::Bottom_Occlusion_Height' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Night_Emissive) == 0x000120, "Member 'UBPDA_CloudPreset_C::Night_Emissive' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Phase_G) == 0x000130, "Member 'UBPDA_CloudPreset_C::Phase_G' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Phase_G2) == 0x000138, "Member 'UBPDA_CloudPreset_C::Phase_G2' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Phase_Blend) == 0x000140, "Member 'UBPDA_CloudPreset_C::Phase_Blend' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Multi_Scattering_Contribution) == 0x000148, "Member 'UBPDA_CloudPreset_C::Multi_Scattering_Contribution' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Multi_Scattering_Occlusion) == 0x000150, "Member 'UBPDA_CloudPreset_C::Multi_Scattering_Occlusion' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Multi_Scattering_Eccentricity) == 0x000158, "Member 'UBPDA_CloudPreset_C::Multi_Scattering_Eccentricity' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Noise_Shape_Intensity_A) == 0x000160, "Member 'UBPDA_CloudPreset_C::Noise_Shape_Intensity_A' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Noise_Shape_Intensity_B) == 0x000168, "Member 'UBPDA_CloudPreset_C::Noise_Shape_Intensity_B' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Noise_Shape_Intensity_C) == 0x000170, "Member 'UBPDA_CloudPreset_C::Noise_Shape_Intensity_C' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Noise_Shape_Intensity_D) == 0x000178, "Member 'UBPDA_CloudPreset_C::Noise_Shape_Intensity_D' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Turbulence_Intensity) == 0x000180, "Member 'UBPDA_CloudPreset_C::Turbulence_Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Intensity) == 0x000188, "Member 'UBPDA_CloudPreset_C::Intensity' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Color_Tint) == 0x000190, "Member 'UBPDA_CloudPreset_C::Color_Tint' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Layer_A) == 0x0001A0, "Member 'UBPDA_CloudPreset_C::Layer_A' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Layer_B) == 0x0001A8, "Member 'UBPDA_CloudPreset_C::Layer_B' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Layer_C) == 0x0001B0, "Member 'UBPDA_CloudPreset_C::Layer_C' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Lightning_Phase) == 0x0001B8, "Member 'UBPDA_CloudPreset_C::Lightning_Phase' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Layer_Bottom_Altitude) == 0x0001C0, "Member 'UBPDA_CloudPreset_C::Layer_Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Layer_Height) == 0x0001C8, "Member 'UBPDA_CloudPreset_C::Layer_Height' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Tracing_Start_Max_Distance) == 0x0001D0, "Member 'UBPDA_CloudPreset_C::Tracing_Start_Max_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Tracing_Max_Distance) == 0x0001D8, "Member 'UBPDA_CloudPreset_C::Tracing_Max_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Sky_Light_Cloud_Bottom_Occlusion) == 0x0001E0, "Member 'UBPDA_CloudPreset_C::Sky_Light_Cloud_Bottom_Occlusion' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, View_Sample_Count_Scale) == 0x0001E8, "Member 'UBPDA_CloudPreset_C::View_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Reflection_View_Sample_Count_Scale_Value) == 0x0001F0, "Member 'UBPDA_CloudPreset_C::Reflection_View_Sample_Count_Scale_Value' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Shadow_View_Sample_Count_Scale) == 0x0001F8, "Member 'UBPDA_CloudPreset_C::Shadow_View_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Shadow_Tracing_Distance) == 0x000200, "Member 'UBPDA_CloudPreset_C::Shadow_Tracing_Distance' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Stop_Tracing_Transmittance_Threshold) == 0x000208, "Member 'UBPDA_CloudPreset_C::Stop_Tracing_Transmittance_Threshold' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cloud_Shadow_Strength) == 0x000210, "Member 'UBPDA_CloudPreset_C::Cloud_Shadow_Strength' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cloud_Shadow_On_Atmosphere_Strength) == 0x000218, "Member 'UBPDA_CloudPreset_C::Cloud_Shadow_On_Atmosphere_Strength' has a wrong offset!");
static_assert(offsetof(UBPDA_CloudPreset_C, Cloud_Shadow_on_Surface_Strength) == 0x000220, "Member 'UBPDA_CloudPreset_C::Cloud_Shadow_on_Surface_Strength' has a wrong offset!");

}

