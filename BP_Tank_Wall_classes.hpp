#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Tank_Wall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameSystemsPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Tank_Wall.BP_Tank_Wall_C
// 0x0068 (0x0578 - 0x0510)
class ABP_Tank_Wall_C final : public AAoCAbilityLingeringEffect
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0510(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara1;                                          // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WALL3;                                             // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WALL2;                                             // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WALL1;                                             // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WALL;                                              // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        InitialZ;                                          // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetZ;                                           // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TravelTime;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveDown;                                          // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Tank_Wall(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Tank_Wall_C">();
	}
	static class ABP_Tank_Wall_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Tank_Wall_C>();
	}
};
static_assert(alignof(ABP_Tank_Wall_C) == 0x000008, "Wrong alignment on ABP_Tank_Wall_C");
static_assert(sizeof(ABP_Tank_Wall_C) == 0x000578, "Wrong size on ABP_Tank_Wall_C");
static_assert(offsetof(ABP_Tank_Wall_C, UberGraphFrame) == 0x000510, "Member 'ABP_Tank_Wall_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, Niagara1) == 0x000518, "Member 'ABP_Tank_Wall_C::Niagara1' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, Niagara) == 0x000520, "Member 'ABP_Tank_Wall_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, Cube) == 0x000528, "Member 'ABP_Tank_Wall_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, WALL3) == 0x000530, "Member 'ABP_Tank_Wall_C::WALL3' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, WALL2) == 0x000538, "Member 'ABP_Tank_Wall_C::WALL2' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, WALL1) == 0x000540, "Member 'ABP_Tank_Wall_C::WALL1' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, WALL) == 0x000548, "Member 'ABP_Tank_Wall_C::WALL' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, InitialZ) == 0x000550, "Member 'ABP_Tank_Wall_C::InitialZ' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, TargetZ) == 0x000558, "Member 'ABP_Tank_Wall_C::TargetZ' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, TravelTime) == 0x000560, "Member 'ABP_Tank_Wall_C::TravelTime' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, Speed) == 0x000568, "Member 'ABP_Tank_Wall_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Tank_Wall_C, MoveDown) == 0x000570, "Member 'ABP_Tank_Wall_C::MoveDown' has a wrong offset!");

}

