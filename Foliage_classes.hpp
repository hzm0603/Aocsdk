#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Foliage

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Foliage_structs.hpp"
#include "Intrepid_classes.hpp"


namespace SDK
{

// Class Foliage.InstancedFoliageActor
// 0x00A8 (0x0400 - 0x0358)
class AInstancedFoliageActor final : public AISMPartitionActor
{
public:
	TMap<class FName, class UGatherableFISMC*>    GatherableFISMCLookup;                             // 0x0358(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	int64                                         FoliageActorGuid;                                  // 0x03A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B0[0x50];                                     // 0x03B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegisterToFoliageActorSystem();
	void UnRegisterFromFoliageActorSystem();

	void TickFISMCAudio() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstancedFoliageActor">();
	}
	static class AInstancedFoliageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInstancedFoliageActor>();
	}
};
static_assert(alignof(AInstancedFoliageActor) == 0x000008, "Wrong alignment on AInstancedFoliageActor");
static_assert(sizeof(AInstancedFoliageActor) == 0x000400, "Wrong size on AInstancedFoliageActor");
static_assert(offsetof(AInstancedFoliageActor, GatherableFISMCLookup) == 0x000358, "Member 'AInstancedFoliageActor::GatherableFISMCLookup' has a wrong offset!");
static_assert(offsetof(AInstancedFoliageActor, FoliageActorGuid) == 0x0003A8, "Member 'AInstancedFoliageActor::FoliageActorGuid' has a wrong offset!");

// Class Foliage.FoliageInstancedStaticMeshComponent
// 0x0050 (0x09C0 - 0x0970)
#pragma pack(push, 0x1)
class alignas(0x10) UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
{
public:
	TMulticastInlineDelegate<void(int32 InstanceIndex, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser)> OnInstanceTakePointDamage; // 0x0970(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<int32>& Instances, const TArray<float>& Damages, class AController* InstigatedBy, const struct FVector& Origin, float MaxRadius, const class UDamageType* DamageType, class AActor* DamageCauser)> OnInstanceTakeRadialDamage; // 0x0980(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableDiscardOnLoad;                              // 0x0990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_991[0x3];                                      // 0x0991(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DDERecordName;                                     // 0x0994(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99C[0x4];                                      // 0x099C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         DDERecordId;                                       // 0x09A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  GenerationGuid;                                    // 0x09A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void TickClientAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageInstancedStaticMeshComponent">();
	}
	static class UFoliageInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageInstancedStaticMeshComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFoliageInstancedStaticMeshComponent) == 0x000010, "Wrong alignment on UFoliageInstancedStaticMeshComponent");
static_assert(sizeof(UFoliageInstancedStaticMeshComponent) == 0x0009C0, "Wrong size on UFoliageInstancedStaticMeshComponent");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage) == 0x000970, "Member 'UFoliageInstancedStaticMeshComponent::OnInstanceTakePointDamage' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage) == 0x000980, "Member 'UFoliageInstancedStaticMeshComponent::OnInstanceTakeRadialDamage' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, bEnableDiscardOnLoad) == 0x000990, "Member 'UFoliageInstancedStaticMeshComponent::bEnableDiscardOnLoad' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, DDERecordName) == 0x000994, "Member 'UFoliageInstancedStaticMeshComponent::DDERecordName' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, DDERecordId) == 0x0009A0, "Member 'UFoliageInstancedStaticMeshComponent::DDERecordId' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, GenerationGuid) == 0x0009A8, "Member 'UFoliageInstancedStaticMeshComponent::GenerationGuid' has a wrong offset!");

// Class Foliage.InteractiveFoliageComponent
// 0x0010 (0x0690 - 0x0680)
class UInteractiveFoliageComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_680[0x10];                                     // 0x0680(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractiveFoliageComponent">();
	}
	static class UInteractiveFoliageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractiveFoliageComponent>();
	}
};
static_assert(alignof(UInteractiveFoliageComponent) == 0x000010, "Wrong alignment on UInteractiveFoliageComponent");
static_assert(sizeof(UInteractiveFoliageComponent) == 0x000690, "Wrong size on UInteractiveFoliageComponent");

// Class Foliage.AOCFoliageInstancedStaticMeshComponent
// 0x0010 (0x09D0 - 0x09C0)
class UAOCFoliageInstancedStaticMeshComponent : public UFoliageInstancedStaticMeshComponent
{
public:
	TArray<struct FQualityLevelMaterialOverrides> PerSlotQualityMaterialOverrides;                   // 0x09B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C8[0x8];                                      // 0x09C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AOCFoliageInstancedStaticMeshComponent">();
	}
	static class UAOCFoliageInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAOCFoliageInstancedStaticMeshComponent>();
	}
};
static_assert(alignof(UAOCFoliageInstancedStaticMeshComponent) == 0x000010, "Wrong alignment on UAOCFoliageInstancedStaticMeshComponent");
static_assert(sizeof(UAOCFoliageInstancedStaticMeshComponent) == 0x0009D0, "Wrong size on UAOCFoliageInstancedStaticMeshComponent");
static_assert(offsetof(UAOCFoliageInstancedStaticMeshComponent, PerSlotQualityMaterialOverrides) == 0x0009B8, "Member 'UAOCFoliageInstancedStaticMeshComponent::PerSlotQualityMaterialOverrides' has a wrong offset!");

// Class Foliage.FoliageType
// 0x04D0 (0x0518 - 0x0048)
class UFoliageType : public UObject
{
public:
	struct FGuid                                  UpdateGuid;                                        // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityAdjustmentFactor;                           // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSingleInstanceModeOverrideRadius;                 // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SingleInstanceModeRadius;                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageScaling                               Scaling;                                           // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ScaleX;                                            // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleY;                                            // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleZ;                                            // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageVertexColorChannelMask         VertexColorMaskByChannel[0x4];                     // 0x0088(0x000C)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EFoliageVertexColorMask                       VertexColorMask;                                   // 0x00B8(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VertexColorMaskThreshold;                          // 0x00BC(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VertexColorMaskInvert : 1;                         // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ZOffset;                                           // 0x00C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AlignToNormal : 1;                                 // 0x00CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AverageNormal : 1;                                 // 0x00CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AverageNormalSingleComponent : 1;                  // 0x00CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlignMaxAngle;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomYaw : 1;                                     // 0x00D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomPitchAngle;                                  // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GroundSlopeAngle;                                  // 0x00DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Height;                                            // 0x00E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LandscapeLayers;                                   // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         MinimumLayerWeight;                                // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExclusionLandscapeLayers;                          // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         MinimumExclusionLayerWeight;                       // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandscapeLayer;                                    // 0x011C(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CollisionWithWorld : 1;                            // 0x0124(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionScale;                                    // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AverageNormalSampleCount;                          // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       MeshBounds;                                        // 0x0148(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LowBoundOriginRadius;                              // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DDERecordName;                                     // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DDERecordId;                                       // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQualityLevelMaterialOverrides> PerSlotQualityMaterialOverrides;                   // 0x01A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EComponentMobility                            Mobility;                                          // 0x01B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Interval                         CullDistance;                                      // 0x01BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableStaticLighting : 1;                         // 0x01C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CastShadow : 1;                                    // 0x01C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDynamicIndirectLighting : 1;                // 0x01C4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectDistanceFieldLighting : 1;                  // 0x01C4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastDynamicShadow : 1;                            // 0x01C4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastStaticShadow : 1;                             // 0x01C4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1C4_6 : 2;                                  // 0x01C4(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCastContactShadow : 1;                            // 0x01C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1C8_1 : 7;                                  // 0x01C8(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCastShadowAsTwoSided : 1;                         // 0x01CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReceivesDecals : 1;                               // 0x01CC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLightMapRes : 1;                          // 0x01CC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EShadowCacheInvalidationBehavior              ShadowCacheInvalidationBehavior;                   // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverriddenLightMapRes;                             // 0x01D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELightmapType                                 LightmapType;                                      // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseAsOccluder : 1;                                // 0x01DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_1DC_1 : 7;                                  // 0x01DC(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bVisibleInRayTracing : 1;                          // 0x01E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEvaluateWorldPositionOffset : 1;                  // 0x01E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WorldPositionOffsetDisableDistance;                // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NanitePixelProgrammableDistance;                   // 0x01E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NaniteShadowDistanceScaleFactor;                   // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBodyInstance                          BodyInstance;                                      // 0x01F0(0x0190)(Edit, NativeAccessSpecifierPublic)
	EHasCustomNavigableGeometry                   CustomNavigableGeometry;                           // 0x0380(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0381(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_382[0x2];                                      // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bRenderCustomDepth : 1;                            // 0x0384(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ERendererStencilMask                          CustomDepthStencilWriteMask;                       // 0x0388(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TranslucencySortPriority;                          // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x0394(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadeRadius;                                       // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSteps;                                          // 0x039C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSeedDensity;                                // 0x03A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSpreadDistance;                             // 0x03A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadVariance;                                    // 0x03A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeedsPerStep;                                      // 0x03AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistributionSeed;                                  // 0x03B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInitialSeedOffset;                              // 0x03B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGrowInShade;                                   // 0x03B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnsInShade;                                    // 0x03B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BA[0x2];                                      // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxInitialAge;                                     // 0x03BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAge;                                            // 0x03C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapPriority;                                   // 0x03C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ProceduralScale;                                   // 0x03C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ScaleCurve;                                        // 0x03D0(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FFoliageDensityFalloff                 DensityFalloff;                                    // 0x0460(0x0098)(Edit, NativeAccessSpecifierPublic)
	int32                                         ChangeCount;                                       // 0x04F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReapplyDensity : 1;                                // 0x04FC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRadius : 1;                                 // 0x04FC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyAlignToNormal : 1;                          // 0x04FC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRandomYaw : 1;                              // 0x04FC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaling : 1;                                // 0x04FC(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleX : 1;                                 // 0x04FC(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleY : 1;                                 // 0x04FC(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleZ : 1;                                 // 0x04FC(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRandomPitchAngle : 1;                       // 0x04FD(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyGroundSlope : 1;                            // 0x04FD(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyHeight : 1;                                 // 0x04FD(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyLandscapeLayers : 1;                        // 0x04FD(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyZOffset : 1;                                // 0x04FD(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyCollisionWithWorld : 1;                     // 0x04FD(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReapplyVertexColorMask : 1;                        // 0x04FD(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDensityScaling : 1;                         // 0x04FD(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableDiscardOnLoad : 1;                          // 0x04FE(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCullDistanceScaling : 1;                    // 0x04FE(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4FF[0x1];                                      // 0x04FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URuntimeVirtualTexture*>         RuntimeVirtualTextures;                            // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         VirtualTextureCullMips;                            // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERuntimeVirtualTextureMainPassType            VirtualTextureRenderPassType;                      // 0x0514(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType">();
	}
	static class UFoliageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType>();
	}
};
static_assert(alignof(UFoliageType) == 0x000008, "Wrong alignment on UFoliageType");
static_assert(sizeof(UFoliageType) == 0x000518, "Wrong size on UFoliageType");
static_assert(offsetof(UFoliageType, UpdateGuid) == 0x000048, "Member 'UFoliageType::UpdateGuid' has a wrong offset!");
static_assert(offsetof(UFoliageType, Density) == 0x000058, "Member 'UFoliageType::Density' has a wrong offset!");
static_assert(offsetof(UFoliageType, DensityAdjustmentFactor) == 0x00005C, "Member 'UFoliageType::DensityAdjustmentFactor' has a wrong offset!");
static_assert(offsetof(UFoliageType, Radius) == 0x000060, "Member 'UFoliageType::Radius' has a wrong offset!");
static_assert(offsetof(UFoliageType, bSingleInstanceModeOverrideRadius) == 0x000064, "Member 'UFoliageType::bSingleInstanceModeOverrideRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, SingleInstanceModeRadius) == 0x000068, "Member 'UFoliageType::SingleInstanceModeRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, Scaling) == 0x00006C, "Member 'UFoliageType::Scaling' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleX) == 0x000070, "Member 'UFoliageType::ScaleX' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleY) == 0x000078, "Member 'UFoliageType::ScaleY' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleZ) == 0x000080, "Member 'UFoliageType::ScaleZ' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMaskByChannel) == 0x000088, "Member 'UFoliageType::VertexColorMaskByChannel' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMask) == 0x0000B8, "Member 'UFoliageType::VertexColorMask' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMaskThreshold) == 0x0000BC, "Member 'UFoliageType::VertexColorMaskThreshold' has a wrong offset!");
static_assert(offsetof(UFoliageType, ZOffset) == 0x0000C4, "Member 'UFoliageType::ZOffset' has a wrong offset!");
static_assert(offsetof(UFoliageType, AlignMaxAngle) == 0x0000D0, "Member 'UFoliageType::AlignMaxAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, RandomPitchAngle) == 0x0000D8, "Member 'UFoliageType::RandomPitchAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, GroundSlopeAngle) == 0x0000DC, "Member 'UFoliageType::GroundSlopeAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, Height) == 0x0000E4, "Member 'UFoliageType::Height' has a wrong offset!");
static_assert(offsetof(UFoliageType, LandscapeLayers) == 0x0000F0, "Member 'UFoliageType::LandscapeLayers' has a wrong offset!");
static_assert(offsetof(UFoliageType, MinimumLayerWeight) == 0x000100, "Member 'UFoliageType::MinimumLayerWeight' has a wrong offset!");
static_assert(offsetof(UFoliageType, ExclusionLandscapeLayers) == 0x000108, "Member 'UFoliageType::ExclusionLandscapeLayers' has a wrong offset!");
static_assert(offsetof(UFoliageType, MinimumExclusionLayerWeight) == 0x000118, "Member 'UFoliageType::MinimumExclusionLayerWeight' has a wrong offset!");
static_assert(offsetof(UFoliageType, LandscapeLayer) == 0x00011C, "Member 'UFoliageType::LandscapeLayer' has a wrong offset!");
static_assert(offsetof(UFoliageType, CollisionScale) == 0x000128, "Member 'UFoliageType::CollisionScale' has a wrong offset!");
static_assert(offsetof(UFoliageType, AverageNormalSampleCount) == 0x000140, "Member 'UFoliageType::AverageNormalSampleCount' has a wrong offset!");
static_assert(offsetof(UFoliageType, MeshBounds) == 0x000148, "Member 'UFoliageType::MeshBounds' has a wrong offset!");
static_assert(offsetof(UFoliageType, LowBoundOriginRadius) == 0x000180, "Member 'UFoliageType::LowBoundOriginRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, DDERecordName) == 0x000198, "Member 'UFoliageType::DDERecordName' has a wrong offset!");
static_assert(offsetof(UFoliageType, DDERecordId) == 0x0001A0, "Member 'UFoliageType::DDERecordId' has a wrong offset!");
static_assert(offsetof(UFoliageType, PerSlotQualityMaterialOverrides) == 0x0001A8, "Member 'UFoliageType::PerSlotQualityMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UFoliageType, Mobility) == 0x0001B8, "Member 'UFoliageType::Mobility' has a wrong offset!");
static_assert(offsetof(UFoliageType, CullDistance) == 0x0001BC, "Member 'UFoliageType::CullDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, ShadowCacheInvalidationBehavior) == 0x0001D0, "Member 'UFoliageType::ShadowCacheInvalidationBehavior' has a wrong offset!");
static_assert(offsetof(UFoliageType, OverriddenLightMapRes) == 0x0001D4, "Member 'UFoliageType::OverriddenLightMapRes' has a wrong offset!");
static_assert(offsetof(UFoliageType, LightmapType) == 0x0001D8, "Member 'UFoliageType::LightmapType' has a wrong offset!");
static_assert(offsetof(UFoliageType, WorldPositionOffsetDisableDistance) == 0x0001E4, "Member 'UFoliageType::WorldPositionOffsetDisableDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, NanitePixelProgrammableDistance) == 0x0001E8, "Member 'UFoliageType::NanitePixelProgrammableDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, NaniteShadowDistanceScaleFactor) == 0x0001EC, "Member 'UFoliageType::NaniteShadowDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(UFoliageType, BodyInstance) == 0x0001F0, "Member 'UFoliageType::BodyInstance' has a wrong offset!");
static_assert(offsetof(UFoliageType, CustomNavigableGeometry) == 0x000380, "Member 'UFoliageType::CustomNavigableGeometry' has a wrong offset!");
static_assert(offsetof(UFoliageType, LightingChannels) == 0x000381, "Member 'UFoliageType::LightingChannels' has a wrong offset!");
static_assert(offsetof(UFoliageType, CustomDepthStencilWriteMask) == 0x000388, "Member 'UFoliageType::CustomDepthStencilWriteMask' has a wrong offset!");
static_assert(offsetof(UFoliageType, CustomDepthStencilValue) == 0x00038C, "Member 'UFoliageType::CustomDepthStencilValue' has a wrong offset!");
static_assert(offsetof(UFoliageType, TranslucencySortPriority) == 0x000390, "Member 'UFoliageType::TranslucencySortPriority' has a wrong offset!");
static_assert(offsetof(UFoliageType, CollisionRadius) == 0x000394, "Member 'UFoliageType::CollisionRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, ShadeRadius) == 0x000398, "Member 'UFoliageType::ShadeRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, NumSteps) == 0x00039C, "Member 'UFoliageType::NumSteps' has a wrong offset!");
static_assert(offsetof(UFoliageType, InitialSeedDensity) == 0x0003A0, "Member 'UFoliageType::InitialSeedDensity' has a wrong offset!");
static_assert(offsetof(UFoliageType, AverageSpreadDistance) == 0x0003A4, "Member 'UFoliageType::AverageSpreadDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SpreadVariance) == 0x0003A8, "Member 'UFoliageType::SpreadVariance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SeedsPerStep) == 0x0003AC, "Member 'UFoliageType::SeedsPerStep' has a wrong offset!");
static_assert(offsetof(UFoliageType, DistributionSeed) == 0x0003B0, "Member 'UFoliageType::DistributionSeed' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxInitialSeedOffset) == 0x0003B4, "Member 'UFoliageType::MaxInitialSeedOffset' has a wrong offset!");
static_assert(offsetof(UFoliageType, bCanGrowInShade) == 0x0003B8, "Member 'UFoliageType::bCanGrowInShade' has a wrong offset!");
static_assert(offsetof(UFoliageType, bSpawnsInShade) == 0x0003B9, "Member 'UFoliageType::bSpawnsInShade' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxInitialAge) == 0x0003BC, "Member 'UFoliageType::MaxInitialAge' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxAge) == 0x0003C0, "Member 'UFoliageType::MaxAge' has a wrong offset!");
static_assert(offsetof(UFoliageType, OverlapPriority) == 0x0003C4, "Member 'UFoliageType::OverlapPriority' has a wrong offset!");
static_assert(offsetof(UFoliageType, ProceduralScale) == 0x0003C8, "Member 'UFoliageType::ProceduralScale' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleCurve) == 0x0003D0, "Member 'UFoliageType::ScaleCurve' has a wrong offset!");
static_assert(offsetof(UFoliageType, DensityFalloff) == 0x000460, "Member 'UFoliageType::DensityFalloff' has a wrong offset!");
static_assert(offsetof(UFoliageType, ChangeCount) == 0x0004F8, "Member 'UFoliageType::ChangeCount' has a wrong offset!");
static_assert(offsetof(UFoliageType, RuntimeVirtualTextures) == 0x000500, "Member 'UFoliageType::RuntimeVirtualTextures' has a wrong offset!");
static_assert(offsetof(UFoliageType, VirtualTextureCullMips) == 0x000510, "Member 'UFoliageType::VirtualTextureCullMips' has a wrong offset!");
static_assert(offsetof(UFoliageType, VirtualTextureRenderPassType) == 0x000514, "Member 'UFoliageType::VirtualTextureRenderPassType' has a wrong offset!");

// Class Foliage.FoliageType_Actor
// 0x0018 (0x0530 - 0x0518)
class UFoliageType_Actor final : public UFoliageType
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0518(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAttachToBaseComponent;                      // 0x0520(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStaticMeshOnly;                                   // 0x0521(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_522[0x6];                                      // 0x0522(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFoliageInstancedStaticMeshComponent> StaticMeshOnlyComponentClass;            // 0x0528(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType_Actor">();
	}
	static class UFoliageType_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType_Actor>();
	}
};
static_assert(alignof(UFoliageType_Actor) == 0x000008, "Wrong alignment on UFoliageType_Actor");
static_assert(sizeof(UFoliageType_Actor) == 0x000530, "Wrong size on UFoliageType_Actor");
static_assert(offsetof(UFoliageType_Actor, ActorClass) == 0x000518, "Member 'UFoliageType_Actor::ActorClass' has a wrong offset!");
static_assert(offsetof(UFoliageType_Actor, bShouldAttachToBaseComponent) == 0x000520, "Member 'UFoliageType_Actor::bShouldAttachToBaseComponent' has a wrong offset!");
static_assert(offsetof(UFoliageType_Actor, bStaticMeshOnly) == 0x000521, "Member 'UFoliageType_Actor::bStaticMeshOnly' has a wrong offset!");
static_assert(offsetof(UFoliageType_Actor, StaticMeshOnlyComponentClass) == 0x000528, "Member 'UFoliageType_Actor::StaticMeshOnlyComponentClass' has a wrong offset!");

// Class Foliage.FoliageType_InstancedStaticMesh
// 0x0030 (0x0548 - 0x0518)
class UFoliageType_InstancedStaticMesh final : public UFoliageType
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             NaniteOverrideMaterials;                           // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UFoliageInstancedStaticMeshComponent> ComponentClass;                          // 0x0540(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType_InstancedStaticMesh">();
	}
	static class UFoliageType_InstancedStaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType_InstancedStaticMesh>();
	}
};
static_assert(alignof(UFoliageType_InstancedStaticMesh) == 0x000008, "Wrong alignment on UFoliageType_InstancedStaticMesh");
static_assert(sizeof(UFoliageType_InstancedStaticMesh) == 0x000548, "Wrong size on UFoliageType_InstancedStaticMesh");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, Mesh) == 0x000518, "Member 'UFoliageType_InstancedStaticMesh::Mesh' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, OverrideMaterials) == 0x000520, "Member 'UFoliageType_InstancedStaticMesh::OverrideMaterials' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, NaniteOverrideMaterials) == 0x000530, "Member 'UFoliageType_InstancedStaticMesh::NaniteOverrideMaterials' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, ComponentClass) == 0x000540, "Member 'UFoliageType_InstancedStaticMesh::ComponentClass' has a wrong offset!");

// Class Foliage.GatherableFISMC
// 0x02B0 (0x0C80 - 0x09D0)
class UGatherableFISMC : public UAOCFoliageInstancedStaticMeshComponent
{
public:
	TArray<struct FFoliageInstanceData>           FoliageInstanceData;                               // 0x09D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E0[0x8];                                      // 0x09E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHierarchicalInstancedStaticMeshComponent*> FISMCLookup;                            // 0x09E8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, EFoliageState>              FoliageStateLookup;                                // 0x09F8(0x0050)(NativeAccessSpecifierPublic)
	TMap<EFoliageState, struct FInstanceOIData>   PerInstanceOIData;                                 // 0x0A48(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FRuntimeSkeletalMeshData>  SkeletalMeshRuntimeData;                           // 0x0A98(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FInstanceInteractionData>  PlayerInteractionLookup;                           // 0x0AE8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class UMeshComponent*, int32>            SkeletalMeshToIndexLookup;                         // 0x0B38(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, struct FFoliageLifetimeData>      FoliageLifetimeData;                               // 0x0B88(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_BD8[0x8];                                      // 0x0BD8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMeshLifetimeData>              MeshLifetimeData;                                  // 0x0BE0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FFoliageScaleData>              FoliageInstanceScaleData;                          // 0x0BF0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EFoliageState                                 PaintState;                                        // 0x0C00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageState                                 MinState;                                          // 0x0C01(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageState                                 MaxState;                                          // 0x0C02(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageState                                 GatherableState;                                   // 0x0C03(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GatherableAngle;                                   // 0x0C04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x0C08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0C[0x4];                                      // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFoliageState, struct FFoliageInstanceStateData> FoliageInstanceStateData;                  // 0x0C10(0x0050)(NativeAccessSpecifierPublic)
	float                                         SkeletalMeshRevertDuration;                        // 0x0C60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C64[0x1C];                                     // 0x0C64(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFoliageSkeletalMeshComponentHitEvent(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void RegisterToSystem(class UWorld* InWorld);
	void UnRegisterFromSystem(class UWorld* InWorld);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GatherableFISMC">();
	}
	static class UGatherableFISMC* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGatherableFISMC>();
	}
};
static_assert(alignof(UGatherableFISMC) == 0x000010, "Wrong alignment on UGatherableFISMC");
static_assert(sizeof(UGatherableFISMC) == 0x000C80, "Wrong size on UGatherableFISMC");
static_assert(offsetof(UGatherableFISMC, FoliageInstanceData) == 0x0009D0, "Member 'UGatherableFISMC::FoliageInstanceData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, FISMCLookup) == 0x0009E8, "Member 'UGatherableFISMC::FISMCLookup' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, FoliageStateLookup) == 0x0009F8, "Member 'UGatherableFISMC::FoliageStateLookup' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, PerInstanceOIData) == 0x000A48, "Member 'UGatherableFISMC::PerInstanceOIData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, SkeletalMeshRuntimeData) == 0x000A98, "Member 'UGatherableFISMC::SkeletalMeshRuntimeData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, PlayerInteractionLookup) == 0x000AE8, "Member 'UGatherableFISMC::PlayerInteractionLookup' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, SkeletalMeshToIndexLookup) == 0x000B38, "Member 'UGatherableFISMC::SkeletalMeshToIndexLookup' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, FoliageLifetimeData) == 0x000B88, "Member 'UGatherableFISMC::FoliageLifetimeData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, MeshLifetimeData) == 0x000BE0, "Member 'UGatherableFISMC::MeshLifetimeData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, FoliageInstanceScaleData) == 0x000BF0, "Member 'UGatherableFISMC::FoliageInstanceScaleData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, PaintState) == 0x000C00, "Member 'UGatherableFISMC::PaintState' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, MinState) == 0x000C01, "Member 'UGatherableFISMC::MinState' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, MaxState) == 0x000C02, "Member 'UGatherableFISMC::MaxState' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, GatherableState) == 0x000C03, "Member 'UGatherableFISMC::GatherableState' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, GatherableAngle) == 0x000C04, "Member 'UGatherableFISMC::GatherableAngle' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, CollisionRadius) == 0x000C08, "Member 'UGatherableFISMC::CollisionRadius' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, FoliageInstanceStateData) == 0x000C10, "Member 'UGatherableFISMC::FoliageInstanceStateData' has a wrong offset!");
static_assert(offsetof(UGatherableFISMC, SkeletalMeshRevertDuration) == 0x000C60, "Member 'UGatherableFISMC::SkeletalMeshRevertDuration' has a wrong offset!");

// Class Foliage.IntrepidFoliageActorSystem
// 0x0100 (0x01A0 - 0x00A0)
class alignas(0x10) UIntrepidFoliageActorSystem final : public UIntrepidSystem
{
public:
	uint8                                         Pad_A0[0x70];                                      // 0x00A0(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int64, struct FFoliageQuadTreeElement>   FoliageActorIdToQuadTreeElement;                   // 0x0110(0x0050)(NativeAccessSpecifierPrivate)
	struct FVector                                PlayersLastKnownPosition;                          // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShowDebugNodes;                                   // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_179[0x27];                                     // 0x0179(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddFoliageInstanceToQuadTree(const class AInstancedFoliageActor* InstancedFoliageActor);
	TArray<int64> FindNearestFoliageActorsToTick(const struct FVector& PlayerPosition);
	void RemoveFoliageInstanceFromQuadTree(const class AInstancedFoliageActor* InstancedFoliageActor);

	struct FVector GetPlayerPosition() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidFoliageActorSystem">();
	}
	static class UIntrepidFoliageActorSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidFoliageActorSystem>();
	}
};
static_assert(alignof(UIntrepidFoliageActorSystem) == 0x000010, "Wrong alignment on UIntrepidFoliageActorSystem");
static_assert(sizeof(UIntrepidFoliageActorSystem) == 0x0001A0, "Wrong size on UIntrepidFoliageActorSystem");
static_assert(offsetof(UIntrepidFoliageActorSystem, FoliageActorIdToQuadTreeElement) == 0x000110, "Member 'UIntrepidFoliageActorSystem::FoliageActorIdToQuadTreeElement' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageActorSystem, PlayersLastKnownPosition) == 0x000160, "Member 'UIntrepidFoliageActorSystem::PlayersLastKnownPosition' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageActorSystem, bShowDebugNodes) == 0x000178, "Member 'UIntrepidFoliageActorSystem::bShowDebugNodes' has a wrong offset!");

// Class Foliage.IntrepidFoliageStateComponent
// 0x02E8 (0x03E0 - 0x00F8)
class UIntrepidFoliageStateComponent final : public UActorComponent
{
public:
	class FName                                   FoliageComponentUUID;                              // 0x00F8(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialized;                                      // 0x0100(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     InstanceDataDefinition;                            // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFoliageProxyStateData>         ProxyStateData;                                    // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         RecordId;                                          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageState                                 PaintState;                                        // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFoliageState, class UHierarchicalInstancedStaticMeshComponent*> ProxyFISMCLookup;          // 0x0138(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<uint16, struct FFoliageInstanceProxyData> OriginalInstanceProxyDataLookup;                  // 0x0188(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMapuint16FInstancedFoliageState      IndexedStates;                                     // 0x01E0(0x01F0)(Net, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x10];                                     // 0x03D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIndexedStatesChanged(const uint16 Guid, const struct FInstancedFoliageState& NewFoliageState);
	void OnIndexedStatesRemoved(const uint16 Guid, const struct FInstancedFoliageState& OldFoliageState);
	void OnRep_FoliageComponentUUID();
	void OnRep_IndexedStates();
	void OnRep_Initialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidFoliageStateComponent">();
	}
	static class UIntrepidFoliageStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidFoliageStateComponent>();
	}
};
static_assert(alignof(UIntrepidFoliageStateComponent) == 0x000008, "Wrong alignment on UIntrepidFoliageStateComponent");
static_assert(sizeof(UIntrepidFoliageStateComponent) == 0x0003E0, "Wrong size on UIntrepidFoliageStateComponent");
static_assert(offsetof(UIntrepidFoliageStateComponent, FoliageComponentUUID) == 0x0000F8, "Member 'UIntrepidFoliageStateComponent::FoliageComponentUUID' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, bInitialized) == 0x000100, "Member 'UIntrepidFoliageStateComponent::bInitialized' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, InstanceDataDefinition) == 0x000108, "Member 'UIntrepidFoliageStateComponent::InstanceDataDefinition' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, ProxyStateData) == 0x000118, "Member 'UIntrepidFoliageStateComponent::ProxyStateData' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, RecordId) == 0x000128, "Member 'UIntrepidFoliageStateComponent::RecordId' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, PaintState) == 0x000130, "Member 'UIntrepidFoliageStateComponent::PaintState' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, ProxyFISMCLookup) == 0x000138, "Member 'UIntrepidFoliageStateComponent::ProxyFISMCLookup' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, OriginalInstanceProxyDataLookup) == 0x000188, "Member 'UIntrepidFoliageStateComponent::OriginalInstanceProxyDataLookup' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageStateComponent, IndexedStates) == 0x0001E0, "Member 'UIntrepidFoliageStateComponent::IndexedStates' has a wrong offset!");

// Class Foliage.IntrepidFoliageSystem
// 0x00F8 (0x0198 - 0x00A0)
class UIntrepidFoliageSystem final : public UIntrepidSystem
{
public:
	TMap<class FName, TWeakObjectPtr<class AInstancedFoliageActor>> FoliageActorLookup;              // 0x00A0(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TWeakObjectPtr<class AIntrepidStateIFA>> FoliageStateActorLookup;              // 0x00F0(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x58];                                     // 0x0140(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidFoliageSystem">();
	}
	static class UIntrepidFoliageSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntrepidFoliageSystem>();
	}
};
static_assert(alignof(UIntrepidFoliageSystem) == 0x000008, "Wrong alignment on UIntrepidFoliageSystem");
static_assert(sizeof(UIntrepidFoliageSystem) == 0x000198, "Wrong size on UIntrepidFoliageSystem");
static_assert(offsetof(UIntrepidFoliageSystem, FoliageActorLookup) == 0x0000A0, "Member 'UIntrepidFoliageSystem::FoliageActorLookup' has a wrong offset!");
static_assert(offsetof(UIntrepidFoliageSystem, FoliageStateActorLookup) == 0x0000F0, "Member 'UIntrepidFoliageSystem::FoliageStateActorLookup' has a wrong offset!");

// Class Foliage.IntrepidStateIFA
// 0x0060 (0x03A8 - 0x0348)
class AIntrepidStateIFA final : public AActor
{
public:
	TMap<class FName, class UIntrepidFoliageStateComponent*> FoliageStateComponentLookup;            // 0x0348(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   FoliageName;                                       // 0x0398(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RuntimeNetCullDistance;                            // 0x03A0(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InterServerCompleteIFGathering(const struct FGuid& PlayerGuid, const struct FTransform& PlayerTransform, float PlayerInteractionDistance, uint8 InteractionType, int32 OriginalInstanceIndex, const class FName& FoliageActorName, const class FName& FoliageComponentUUID, EFoliageState FoliageState);
	void InterServerForceAdvanceFoliageInstances(const TArray<int32>& OriginalInstanceIndices, EFoliageState TargetFoliageState, const class FName& FoliageActorName, const class FName& FoliageComponentUUID, bool bSuppressIndices);
	void InterServerInitiateIFGathering(const struct FGuid& PlayerGuid, const struct FTransform& PlayerTransform, float PlayerInteractionDistance, int32 OriginalInstanceIndex, const class FName& FoliageActorName, const class FName& FoliageComponentUUID, EFoliageState FoliageState);
	void InterServerInterruptIFGathering(const struct FGuid& PlayerGuid, int32 OriginalInstanceIndex, const class FName& FoliageActorName, const class FName& FoliageComponentUUID);
	void OnRep_RuntimeNetCullDistance();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntrepidStateIFA">();
	}
	static class AIntrepidStateIFA* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIntrepidStateIFA>();
	}
};
static_assert(alignof(AIntrepidStateIFA) == 0x000008, "Wrong alignment on AIntrepidStateIFA");
static_assert(sizeof(AIntrepidStateIFA) == 0x0003A8, "Wrong size on AIntrepidStateIFA");
static_assert(offsetof(AIntrepidStateIFA, FoliageStateComponentLookup) == 0x000348, "Member 'AIntrepidStateIFA::FoliageStateComponentLookup' has a wrong offset!");
static_assert(offsetof(AIntrepidStateIFA, FoliageName) == 0x000398, "Member 'AIntrepidStateIFA::FoliageName' has a wrong offset!");
static_assert(offsetof(AIntrepidStateIFA, RuntimeNetCullDistance) == 0x0003A0, "Member 'AIntrepidStateIFA::RuntimeNetCullDistance' has a wrong offset!");

// Class Foliage.FoliageStatistics
// 0x0000 (0x0048 - 0x0048)
class UFoliageStatistics final : public UBlueprintFunctionLibrary
{
public:
	static int32 FoliageOverlappingBoxCount(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FBox& Box);
	static void FoliageOverlappingBoxTransforms(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FBox& Box, TArray<struct FTransform>* OutTransforms);
	static int32 FoliageOverlappingSphereCount(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageStatistics">();
	}
	static class UFoliageStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageStatistics>();
	}
};
static_assert(alignof(UFoliageStatistics) == 0x000008, "Wrong alignment on UFoliageStatistics");
static_assert(sizeof(UFoliageStatistics) == 0x000048, "Wrong size on UFoliageStatistics");

// Class Foliage.GrassInstancedStaticMeshComponent
// 0x0000 (0x0970 - 0x0970)
class UGrassInstancedStaticMeshComponent final : public UHierarchicalInstancedStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GrassInstancedStaticMeshComponent">();
	}
	static class UGrassInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGrassInstancedStaticMeshComponent>();
	}
};
static_assert(alignof(UGrassInstancedStaticMeshComponent) == 0x000010, "Wrong alignment on UGrassInstancedStaticMeshComponent");
static_assert(sizeof(UGrassInstancedStaticMeshComponent) == 0x000970, "Wrong size on UGrassInstancedStaticMeshComponent");

// Class Foliage.InteractiveFoliageActor
// 0x0090 (0x03E8 - 0x0358)
class AInteractiveFoliageActor final : public AStaticMeshActor
{
public:
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                TouchingActorEntryPosition;                        // 0x0360(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                FoliageVelocity;                                   // 0x0378(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                FoliageForce;                                      // 0x0390(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                FoliagePosition;                                   // 0x03A8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FoliageDamageImpulseScale;                         // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageTouchImpulseScale;                          // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageStiffness;                                  // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageStiffnessQuadratic;                         // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageDamping;                                    // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageImpulse;                                  // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTouchImpulse;                                   // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractiveFoliageActor">();
	}
	static class AInteractiveFoliageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInteractiveFoliageActor>();
	}
};
static_assert(alignof(AInteractiveFoliageActor) == 0x000008, "Wrong alignment on AInteractiveFoliageActor");
static_assert(sizeof(AInteractiveFoliageActor) == 0x0003E8, "Wrong size on AInteractiveFoliageActor");
static_assert(offsetof(AInteractiveFoliageActor, CapsuleComponent) == 0x000358, "Member 'AInteractiveFoliageActor::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, TouchingActorEntryPosition) == 0x000360, "Member 'AInteractiveFoliageActor::TouchingActorEntryPosition' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageVelocity) == 0x000378, "Member 'AInteractiveFoliageActor::FoliageVelocity' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageForce) == 0x000390, "Member 'AInteractiveFoliageActor::FoliageForce' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliagePosition) == 0x0003A8, "Member 'AInteractiveFoliageActor::FoliagePosition' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageDamageImpulseScale) == 0x0003C0, "Member 'AInteractiveFoliageActor::FoliageDamageImpulseScale' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageTouchImpulseScale) == 0x0003C4, "Member 'AInteractiveFoliageActor::FoliageTouchImpulseScale' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageStiffness) == 0x0003C8, "Member 'AInteractiveFoliageActor::FoliageStiffness' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageStiffnessQuadratic) == 0x0003CC, "Member 'AInteractiveFoliageActor::FoliageStiffnessQuadratic' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageDamping) == 0x0003D0, "Member 'AInteractiveFoliageActor::FoliageDamping' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxDamageImpulse) == 0x0003D4, "Member 'AInteractiveFoliageActor::MaxDamageImpulse' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxTouchImpulse) == 0x0003D8, "Member 'AInteractiveFoliageActor::MaxTouchImpulse' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxForce) == 0x0003DC, "Member 'AInteractiveFoliageActor::MaxForce' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, Mass) == 0x0003E0, "Member 'AInteractiveFoliageActor::Mass' has a wrong offset!");

// Class Foliage.ProceduralFoliageBlockingVolume
// 0x00A0 (0x0420 - 0x0380)
class AProceduralFoliageBlockingVolume final : public AVolume
{
public:
	class AProceduralFoliageVolume*               ProceduralFoliageVolume;                           // 0x0380(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageDensityFalloff                 DensityFalloff;                                    // 0x0388(0x0098)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageBlockingVolume">();
	}
	static class AProceduralFoliageBlockingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralFoliageBlockingVolume>();
	}
};
static_assert(alignof(AProceduralFoliageBlockingVolume) == 0x000008, "Wrong alignment on AProceduralFoliageBlockingVolume");
static_assert(sizeof(AProceduralFoliageBlockingVolume) == 0x000420, "Wrong size on AProceduralFoliageBlockingVolume");
static_assert(offsetof(AProceduralFoliageBlockingVolume, ProceduralFoliageVolume) == 0x000380, "Member 'AProceduralFoliageBlockingVolume::ProceduralFoliageVolume' has a wrong offset!");
static_assert(offsetof(AProceduralFoliageBlockingVolume, DensityFalloff) == 0x000388, "Member 'AProceduralFoliageBlockingVolume::DensityFalloff' has a wrong offset!");

// Class Foliage.ProceduralFoliageComponent
// 0x0028 (0x0120 - 0x00F8)
class UProceduralFoliageComponent final : public UActorComponent
{
public:
	class UProceduralFoliageSpawner*              FoliageSpawner;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileOverlap;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AVolume*                                SpawningVolume;                                    // 0x0108(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ProceduralGuid;                                    // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageComponent">();
	}
	static class UProceduralFoliageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageComponent>();
	}
};
static_assert(alignof(UProceduralFoliageComponent) == 0x000008, "Wrong alignment on UProceduralFoliageComponent");
static_assert(sizeof(UProceduralFoliageComponent) == 0x000120, "Wrong size on UProceduralFoliageComponent");
static_assert(offsetof(UProceduralFoliageComponent, FoliageSpawner) == 0x0000F8, "Member 'UProceduralFoliageComponent::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, TileOverlap) == 0x000100, "Member 'UProceduralFoliageComponent::TileOverlap' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, SpawningVolume) == 0x000108, "Member 'UProceduralFoliageComponent::SpawningVolume' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, ProceduralGuid) == 0x000110, "Member 'UProceduralFoliageComponent::ProceduralGuid' has a wrong offset!");

// Class Foliage.ProceduralFoliageSpawner
// 0x0058 (0x00A0 - 0x0048)
class UProceduralFoliageSpawner final : public UObject
{
public:
	int32                                         RandomSeed;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumUniqueTiles;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumQuadTreeSize;                               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFoliageTypeObject>             FoliageTypes;                                      // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bUseOverrideFoliageTerrainMaterials;               // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UMaterialInterface>> OverrideFoliageTerrainMaterials;                // 0x0078(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Simulate(int32 NumSteps);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageSpawner">();
	}
	static class UProceduralFoliageSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageSpawner>();
	}
};
static_assert(alignof(UProceduralFoliageSpawner) == 0x000008, "Wrong alignment on UProceduralFoliageSpawner");
static_assert(sizeof(UProceduralFoliageSpawner) == 0x0000A0, "Wrong size on UProceduralFoliageSpawner");
static_assert(offsetof(UProceduralFoliageSpawner, RandomSeed) == 0x000048, "Member 'UProceduralFoliageSpawner::RandomSeed' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, TileSize) == 0x00004C, "Member 'UProceduralFoliageSpawner::TileSize' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, NumUniqueTiles) == 0x000050, "Member 'UProceduralFoliageSpawner::NumUniqueTiles' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, MinimumQuadTreeSize) == 0x000054, "Member 'UProceduralFoliageSpawner::MinimumQuadTreeSize' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, FoliageTypes) == 0x000060, "Member 'UProceduralFoliageSpawner::FoliageTypes' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, bUseOverrideFoliageTerrainMaterials) == 0x000070, "Member 'UProceduralFoliageSpawner::bUseOverrideFoliageTerrainMaterials' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, OverrideFoliageTerrainMaterials) == 0x000078, "Member 'UProceduralFoliageSpawner::OverrideFoliageTerrainMaterials' has a wrong offset!");

// Class Foliage.ProceduralFoliageTile
// 0x0148 (0x0190 - 0x0048)
class UProceduralFoliageTile final : public UObject
{
public:
	class UProceduralFoliageSpawner*              FoliageSpawner;                                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0xA0];                                      // 0x0050(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProceduralFoliageInstance>     InstancesArray;                                    // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x90];                                     // 0x0100(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageTile">();
	}
	static class UProceduralFoliageTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageTile>();
	}
};
static_assert(alignof(UProceduralFoliageTile) == 0x000008, "Wrong alignment on UProceduralFoliageTile");
static_assert(sizeof(UProceduralFoliageTile) == 0x000190, "Wrong size on UProceduralFoliageTile");
static_assert(offsetof(UProceduralFoliageTile, FoliageSpawner) == 0x000048, "Member 'UProceduralFoliageTile::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageTile, InstancesArray) == 0x0000F0, "Member 'UProceduralFoliageTile::InstancesArray' has a wrong offset!");

// Class Foliage.ProceduralFoliageVolume
// 0x0010 (0x0390 - 0x0380)
class AProceduralFoliageVolume final : public AVolume
{
public:
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UProceduralFoliageComponent*            ProceduralComponent;                               // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageVolume">();
	}
	static class AProceduralFoliageVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralFoliageVolume>();
	}
};
static_assert(alignof(AProceduralFoliageVolume) == 0x000008, "Wrong alignment on AProceduralFoliageVolume");
static_assert(sizeof(AProceduralFoliageVolume) == 0x000390, "Wrong size on AProceduralFoliageVolume");
static_assert(offsetof(AProceduralFoliageVolume, ProceduralComponent) == 0x000388, "Member 'AProceduralFoliageVolume::ProceduralComponent' has a wrong offset!");

}

