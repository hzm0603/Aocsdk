#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChaosVehicles

#include "Basic.hpp"

#include "ChaosVehicles_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ChaosVehicles.ChaosVehicleMovementComponent
// 0x0810 (0x09C0 - 0x01B0)
class alignas(0x10) UChaosVehicleMovementComponent : public UPawnMovementComponent
{
public:
	uint8                                         bReverseAsBrake : 1;                               // 0x01B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bThrottleAsBrake : 1;                              // 0x01B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mass;                                              // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCenterOfMassOverride;                       // 0x01B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CenterOfMassOverride;                              // 0x01C0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChassisWidth;                                      // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChassisHeight;                                     // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownforceCoefficient;                              // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragArea;                                          // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugDragMagnitude;                                // 0x01EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InertiaTensorScale;                                // 0x01F0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepThreshold;                                    // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SleepSlopeLimit;                                   // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleAerofoilConfig>         Aerofoils;                                         // 0x0210(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVehicleThrustConfig>           Thrusters;                                         // 0x0220(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVehicleTorqueControlConfig            TorqueControl;                                     // 0x0230(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleTargetRotationControlConfig    TargetRotationControl;                             // 0x0270(0x0058)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleStabilizeControlConfig         StabilizeControl;                                  // 0x02C8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x4];                                      // 0x02E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bRawHandbrakeInput : 1;                            // 0x02E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRawGearUpInput : 1;                               // 0x02E4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bRawGearDownInput : 1;                             // 0x02E4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_2E4_3 : 5;                                  // 0x02E4(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bWasAvoidanceUpdated : 1;                          // 0x02E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BitPad_2E8_1 : 7;                                  // 0x02E8(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bParkEnabled : 1;                                  // 0x02EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetworkPhysicsComponent*               NetworkPhysicsComponent;                           // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x38];                                     // 0x02F8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleReplicatedState                ReplicatedState;                                   // 0x0330(0x0028)(Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x4];                                      // 0x0358(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RawSteeringInput;                                  // 0x035C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawThrottleInput;                                  // 0x0360(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawBrakeInput;                                     // 0x0364(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawPitchInput;                                     // 0x0368(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawRollInput;                                      // 0x036C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawYawInput;                                       // 0x0370(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SteeringInput;                                     // 0x0374(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrottleInput;                                     // 0x0378(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BrakeInput;                                        // 0x037C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchInput;                                        // 0x0380(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RollInput;                                         // 0x0384(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YawInput;                                          // 0x0388(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeInput;                                    // 0x038C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequiresControllerForInputs;                      // 0x0390(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdleBrakeInput;                                    // 0x0394(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StopThreshold;                                     // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WrongDirectionThreshold;                           // 0x039C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleInputRateConfig                ThrottleInputRate;                                 // 0x03A0(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVehicleInputRateConfig                BrakeInputRate;                                    // 0x0440(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVehicleInputRateConfig                SteeringInputRate;                                 // 0x04E0(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVehicleInputRateConfig                HandbrakeInputRate;                                // 0x0580(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVehicleInputRateConfig                PitchInputRate;                                    // 0x0620(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVehicleInputRateConfig                RollInputRate;                                     // 0x06C0(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVehicleInputRateConfig                YawInputRate;                                      // 0x0760(0x00A0)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_800[0x198];                                    // 0x0800(0x0198)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            OverrideController;                                // 0x0998(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A0[0x20];                                     // 0x09A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DecreaseThrottleInput(float ThrottleDelta);
	void EnableSelfRighting(bool InState);
	float GetBrakeInput();
	float GetSteeringInput();
	float GetThrottleInput();
	void IncreaseThrottleInput(float ThrottleDelta);
	void ResetVehicle();
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int32 InCurrentGear, float InRollInput, float InPitchInput, float InYawInput);
	void SetBrakeInput(float Brake);
	void SetChangeDownInput(bool bNewGearDown);
	void SetChangeUpInput(bool bNewGearUp);
	void SetHandbrakeInput(bool bNewHandbrake);
	void SetParked(bool bParked);
	void SetPitchInput(float Pitch);
	void SetRequiresControllerForInputs(bool bRequiresController);
	void SetRollInput(float Roll);
	void SetSleeping(bool bEnableSleep);
	void SetSteeringInput(float Steering);
	void SetTargetGear(int32 GearNum, bool bImmediate);
	void SetThrottleInput(float Throttle);
	void SetUseAutomaticGears(bool bUseAuto);
	void SetYawInput(float Yaw);

	int32 GetCurrentGear() const;
	float GetForwardSpeed() const;
	float GetForwardSpeedMPH() const;
	bool GetHandbrakeInput() const;
	int32 GetTargetGear() const;
	bool GetUseAutoGears() const;
	bool IsParked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosVehicleMovementComponent">();
	}
	static class UChaosVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosVehicleMovementComponent>();
	}
};
static_assert(alignof(UChaosVehicleMovementComponent) == 0x000010, "Wrong alignment on UChaosVehicleMovementComponent");
static_assert(sizeof(UChaosVehicleMovementComponent) == 0x0009C0, "Wrong size on UChaosVehicleMovementComponent");
static_assert(offsetof(UChaosVehicleMovementComponent, Mass) == 0x0001B4, "Member 'UChaosVehicleMovementComponent::Mass' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, bEnableCenterOfMassOverride) == 0x0001B8, "Member 'UChaosVehicleMovementComponent::bEnableCenterOfMassOverride' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, CenterOfMassOverride) == 0x0001C0, "Member 'UChaosVehicleMovementComponent::CenterOfMassOverride' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, ChassisWidth) == 0x0001D8, "Member 'UChaosVehicleMovementComponent::ChassisWidth' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, ChassisHeight) == 0x0001DC, "Member 'UChaosVehicleMovementComponent::ChassisHeight' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, DragCoefficient) == 0x0001E0, "Member 'UChaosVehicleMovementComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, DownforceCoefficient) == 0x0001E4, "Member 'UChaosVehicleMovementComponent::DownforceCoefficient' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, DragArea) == 0x0001E8, "Member 'UChaosVehicleMovementComponent::DragArea' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, DebugDragMagnitude) == 0x0001EC, "Member 'UChaosVehicleMovementComponent::DebugDragMagnitude' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, InertiaTensorScale) == 0x0001F0, "Member 'UChaosVehicleMovementComponent::InertiaTensorScale' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, SleepThreshold) == 0x000208, "Member 'UChaosVehicleMovementComponent::SleepThreshold' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, SleepSlopeLimit) == 0x00020C, "Member 'UChaosVehicleMovementComponent::SleepSlopeLimit' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, Aerofoils) == 0x000210, "Member 'UChaosVehicleMovementComponent::Aerofoils' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, Thrusters) == 0x000220, "Member 'UChaosVehicleMovementComponent::Thrusters' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, TorqueControl) == 0x000230, "Member 'UChaosVehicleMovementComponent::TorqueControl' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, TargetRotationControl) == 0x000270, "Member 'UChaosVehicleMovementComponent::TargetRotationControl' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, StabilizeControl) == 0x0002C8, "Member 'UChaosVehicleMovementComponent::StabilizeControl' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, NetworkPhysicsComponent) == 0x0002F0, "Member 'UChaosVehicleMovementComponent::NetworkPhysicsComponent' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, ReplicatedState) == 0x000330, "Member 'UChaosVehicleMovementComponent::ReplicatedState' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RawSteeringInput) == 0x00035C, "Member 'UChaosVehicleMovementComponent::RawSteeringInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RawThrottleInput) == 0x000360, "Member 'UChaosVehicleMovementComponent::RawThrottleInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RawBrakeInput) == 0x000364, "Member 'UChaosVehicleMovementComponent::RawBrakeInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RawPitchInput) == 0x000368, "Member 'UChaosVehicleMovementComponent::RawPitchInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RawRollInput) == 0x00036C, "Member 'UChaosVehicleMovementComponent::RawRollInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RawYawInput) == 0x000370, "Member 'UChaosVehicleMovementComponent::RawYawInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, SteeringInput) == 0x000374, "Member 'UChaosVehicleMovementComponent::SteeringInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, ThrottleInput) == 0x000378, "Member 'UChaosVehicleMovementComponent::ThrottleInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, BrakeInput) == 0x00037C, "Member 'UChaosVehicleMovementComponent::BrakeInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, PitchInput) == 0x000380, "Member 'UChaosVehicleMovementComponent::PitchInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RollInput) == 0x000384, "Member 'UChaosVehicleMovementComponent::RollInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, YawInput) == 0x000388, "Member 'UChaosVehicleMovementComponent::YawInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, HandbrakeInput) == 0x00038C, "Member 'UChaosVehicleMovementComponent::HandbrakeInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, bRequiresControllerForInputs) == 0x000390, "Member 'UChaosVehicleMovementComponent::bRequiresControllerForInputs' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, IdleBrakeInput) == 0x000394, "Member 'UChaosVehicleMovementComponent::IdleBrakeInput' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, StopThreshold) == 0x000398, "Member 'UChaosVehicleMovementComponent::StopThreshold' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, WrongDirectionThreshold) == 0x00039C, "Member 'UChaosVehicleMovementComponent::WrongDirectionThreshold' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, ThrottleInputRate) == 0x0003A0, "Member 'UChaosVehicleMovementComponent::ThrottleInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, BrakeInputRate) == 0x000440, "Member 'UChaosVehicleMovementComponent::BrakeInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, SteeringInputRate) == 0x0004E0, "Member 'UChaosVehicleMovementComponent::SteeringInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, HandbrakeInputRate) == 0x000580, "Member 'UChaosVehicleMovementComponent::HandbrakeInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, PitchInputRate) == 0x000620, "Member 'UChaosVehicleMovementComponent::PitchInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, RollInputRate) == 0x0006C0, "Member 'UChaosVehicleMovementComponent::RollInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, YawInputRate) == 0x000760, "Member 'UChaosVehicleMovementComponent::YawInputRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleMovementComponent, OverrideController) == 0x000998, "Member 'UChaosVehicleMovementComponent::OverrideController' has a wrong offset!");

// Class ChaosVehicles.ChaosVehicleWheel
// 0x02C0 (0x0308 - 0x0048)
class UChaosVehicleWheel : public UObject
{
public:
	class UStaticMesh*                            CollisionMesh;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxleType                                     AxleType;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelWidth;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelMass;                                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorneringStiffness;                                // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionForceMultiplier;                           // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SideSlipModifier;                                  // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlipThreshold;                                     // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkidThreshold;                                     // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSteerAngle;                                     // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedBySteering;                               // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedByBrake;                                  // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedByHandbrake;                              // 0x0096(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectedByEngine;                                 // 0x0097(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bABSEnabled;                                       // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTractionControlEnabled;                           // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWheelspinRotation;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETorqueCombineMethod                          ExternalTorqueCombineMethod;                       // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     LateralSlipGraph;                                  // 0x00A8(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                SuspensionAxis;                                    // 0x0138(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuspensionForceOffset;                             // 0x0150(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionMaxRaise;                                // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionMaxDrop;                                 // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspensionDampingRatio;                            // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelLoadRatio;                                    // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringRate;                                        // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringPreload;                                     // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuspensionSmoothing;                               // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollbarScaling;                                    // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESweepShape                                   SweepShape;                                        // 0x0188(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESweepType                                    SweepType;                                         // 0x0189(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxBrakeTorque;                                    // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHandBrakeTorque;                                // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChaosWheeledVehicleMovementComponent*  VehicleComponent;                                  // 0x0198(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x01A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLongSlip;                                     // 0x01A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLatSlip;                                      // 0x01A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugNormalizedTireLoad;                           // 0x01AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x4];                                      // 0x01B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugWheelTorque;                                  // 0x01B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLongForce;                                    // 0x01B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLatForce;                                     // 0x01BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x01C0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldLocation;                                       // 0x01D8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x01F0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208[0x100];                                    // 0x0208(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EAxleType GetAxleType();

	float GetRotationAngle() const;
	float GetRotationAngularVelocity() const;
	float GetSteerAngle() const;
	struct FVector GetSuspensionAxis() const;
	float GetSuspensionOffset() const;
	float GetWheelAngularVelocity() const;
	float GetWheelRadius() const;
	bool IsInAir() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosVehicleWheel">();
	}
	static class UChaosVehicleWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosVehicleWheel>();
	}
};
static_assert(alignof(UChaosVehicleWheel) == 0x000008, "Wrong alignment on UChaosVehicleWheel");
static_assert(sizeof(UChaosVehicleWheel) == 0x000308, "Wrong size on UChaosVehicleWheel");
static_assert(offsetof(UChaosVehicleWheel, CollisionMesh) == 0x000048, "Member 'UChaosVehicleWheel::CollisionMesh' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, AxleType) == 0x000050, "Member 'UChaosVehicleWheel::AxleType' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, Offset) == 0x000058, "Member 'UChaosVehicleWheel::Offset' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, WheelRadius) == 0x000070, "Member 'UChaosVehicleWheel::WheelRadius' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, WheelWidth) == 0x000074, "Member 'UChaosVehicleWheel::WheelWidth' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, WheelMass) == 0x000078, "Member 'UChaosVehicleWheel::WheelMass' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, CorneringStiffness) == 0x00007C, "Member 'UChaosVehicleWheel::CorneringStiffness' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, FrictionForceMultiplier) == 0x000080, "Member 'UChaosVehicleWheel::FrictionForceMultiplier' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SideSlipModifier) == 0x000084, "Member 'UChaosVehicleWheel::SideSlipModifier' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SlipThreshold) == 0x000088, "Member 'UChaosVehicleWheel::SlipThreshold' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SkidThreshold) == 0x00008C, "Member 'UChaosVehicleWheel::SkidThreshold' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, MaxSteerAngle) == 0x000090, "Member 'UChaosVehicleWheel::MaxSteerAngle' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, bAffectedBySteering) == 0x000094, "Member 'UChaosVehicleWheel::bAffectedBySteering' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, bAffectedByBrake) == 0x000095, "Member 'UChaosVehicleWheel::bAffectedByBrake' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, bAffectedByHandbrake) == 0x000096, "Member 'UChaosVehicleWheel::bAffectedByHandbrake' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, bAffectedByEngine) == 0x000097, "Member 'UChaosVehicleWheel::bAffectedByEngine' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, bABSEnabled) == 0x000098, "Member 'UChaosVehicleWheel::bABSEnabled' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, bTractionControlEnabled) == 0x000099, "Member 'UChaosVehicleWheel::bTractionControlEnabled' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, MaxWheelspinRotation) == 0x00009C, "Member 'UChaosVehicleWheel::MaxWheelspinRotation' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, ExternalTorqueCombineMethod) == 0x0000A0, "Member 'UChaosVehicleWheel::ExternalTorqueCombineMethod' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, LateralSlipGraph) == 0x0000A8, "Member 'UChaosVehicleWheel::LateralSlipGraph' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SuspensionAxis) == 0x000138, "Member 'UChaosVehicleWheel::SuspensionAxis' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SuspensionForceOffset) == 0x000150, "Member 'UChaosVehicleWheel::SuspensionForceOffset' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SuspensionMaxRaise) == 0x000168, "Member 'UChaosVehicleWheel::SuspensionMaxRaise' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SuspensionMaxDrop) == 0x00016C, "Member 'UChaosVehicleWheel::SuspensionMaxDrop' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SuspensionDampingRatio) == 0x000170, "Member 'UChaosVehicleWheel::SuspensionDampingRatio' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, WheelLoadRatio) == 0x000174, "Member 'UChaosVehicleWheel::WheelLoadRatio' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SpringRate) == 0x000178, "Member 'UChaosVehicleWheel::SpringRate' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SpringPreload) == 0x00017C, "Member 'UChaosVehicleWheel::SpringPreload' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SuspensionSmoothing) == 0x000180, "Member 'UChaosVehicleWheel::SuspensionSmoothing' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, RollbarScaling) == 0x000184, "Member 'UChaosVehicleWheel::RollbarScaling' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SweepShape) == 0x000188, "Member 'UChaosVehicleWheel::SweepShape' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, SweepType) == 0x000189, "Member 'UChaosVehicleWheel::SweepType' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, MaxBrakeTorque) == 0x00018C, "Member 'UChaosVehicleWheel::MaxBrakeTorque' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, MaxHandBrakeTorque) == 0x000190, "Member 'UChaosVehicleWheel::MaxHandBrakeTorque' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, VehicleComponent) == 0x000198, "Member 'UChaosVehicleWheel::VehicleComponent' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, WheelIndex) == 0x0001A0, "Member 'UChaosVehicleWheel::WheelIndex' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, DebugLongSlip) == 0x0001A4, "Member 'UChaosVehicleWheel::DebugLongSlip' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, DebugLatSlip) == 0x0001A8, "Member 'UChaosVehicleWheel::DebugLatSlip' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, DebugNormalizedTireLoad) == 0x0001AC, "Member 'UChaosVehicleWheel::DebugNormalizedTireLoad' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, DebugWheelTorque) == 0x0001B4, "Member 'UChaosVehicleWheel::DebugWheelTorque' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, DebugLongForce) == 0x0001B8, "Member 'UChaosVehicleWheel::DebugLongForce' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, DebugLatForce) == 0x0001BC, "Member 'UChaosVehicleWheel::DebugLatForce' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, Location) == 0x0001C0, "Member 'UChaosVehicleWheel::Location' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, OldLocation) == 0x0001D8, "Member 'UChaosVehicleWheel::OldLocation' has a wrong offset!");
static_assert(offsetof(UChaosVehicleWheel, Velocity) == 0x0001F0, "Member 'UChaosVehicleWheel::Velocity' has a wrong offset!");

// Class ChaosVehicles.ChaosWheeledVehicleMovementComponent
// 0x0330 (0x0CF0 - 0x09C0)
class UChaosWheeledVehicleMovementComponent : public UChaosVehicleMovementComponent
{
public:
	bool                                          bSuspensionEnabled;                                // 0x09C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWheelFrictionEnabled;                             // 0x09C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLegacyWheelFrictionPosition;                      // 0x09C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C3[0x5];                                      // 0x09C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChaosWheelSetup>               WheelSetups;                                       // 0x09C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCollisionResponseContainer            WheelTraceCollisionResponses;                      // 0x09D8(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMechanicalSimEnabled;                             // 0x09F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F9[0x7];                                      // 0x09F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleEngineConfig                   EngineSetup;                                       // 0x0A00(0x00D0)(Edit, NativeAccessSpecifierPublic)
	struct FVehicleDifferentialConfig             DifferentialSetup;                                 // 0x0AD0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVehicleTransmissionConfig             TransmissionSetup;                                 // 0x0AE0(0x0070)(Edit, NativeAccessSpecifierPublic)
	struct FVehicleSteeringConfig                 SteeringSetup;                                     // 0x0B50(0x00E0)(Edit, NativeAccessSpecifierPublic)
	TArray<class UChaosVehicleWheel*>             Wheels;                                            // 0x0C30(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_C40[0xB0];                                     // 0x0C40(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void BreakWheeledSnapshot(const struct FWheeledSnaphotData& SnapShot, struct FTransform* Transform, struct FVector* LinearVelocity, struct FVector* AngularVelocity, int32* SelectedGear, float* EngineRPM, TArray<struct FWheelSnapshot>* WheelSnapshots);
	static void BreakWheelSnapshot(const struct FWheelSnapshot& SnapShot, float* SuspensionOffset, float* WheelRotationAngle, float* SteeringAngle, float* WheelRadius, float* WheelAngularVelocity);
	static void BreakWheelStatus(const struct FWheelStatus& Status, bool* bInContact, struct FVector* ContactPoint, class UPhysicalMaterial** PhysMaterial, float* NormalizedSuspensionLength, float* SpringForce, float* SlipAngle, bool* bIsSlipping, float* SlipMagnitude, bool* bIsSkidding, float* SkidMagnitude, struct FVector* SkidNormal, float* DriveTorque, float* BrakeTorque, bool* bABSActivated);
	static struct FWheeledSnaphotData MakeWheeledSnapshot(const struct FTransform& Transform, const struct FVector& LinearVelocity, const struct FVector& AngularVelocity, int32 SelectedGear, float EngineRPM, const TArray<struct FWheelSnapshot>& WheelSnapshots);
	static struct FWheelSnapshot MakeWheelSnapshot(float SuspensionOffset, float WheelRotationAngle, float SteeringAngle, float WheelRadius, float WheelAngularVelocity);
	static struct FWheelStatus MakeWheelStatus(bool bInContact, struct FVector* ContactPoint, class UPhysicalMaterial* PhysMaterial, float NormalizedSuspensionLength, float SpringForce, float SlipAngle, bool bIsSlipping, float SlipMagnitude, bool bIsSkidding, float SkidMagnitude, struct FVector* SkidNormal, float DriveTorque, float BrakeTorque, bool bABSActivated);

	void EnableMechanicalSim(bool InState);
	void EnableSuspension(bool InState);
	void EnableWheelFriction(bool InState);
	void SetABSEnabled(int32 WheelIndex, bool Enabled);
	void SetAffectedByBrake(int32 WheelIndex, bool Enabled);
	void SetAffectedByEngine(int32 WheelIndex, bool Enabled);
	void SetAffectedByHandbrake(int32 WheelIndex, bool Enabled);
	void SetAffectedBySteering(int32 WheelIndex, bool Enabled);
	void SetBrakeTorque(float BrakeTorque, int32 WheelIndex);
	void SetDifferentialFrontRearSplit(float FrontRearSlpit);
	void SetDownforceCoefficient(float DownforceCoeff);
	void SetDragCoefficient(float DragCoeff);
	void SetDriveTorque(float DriveTorque, int32 WheelIndex);
	void SetMaxEngineTorque(float Torque);
	void SetSnapshot(const struct FWheeledSnaphotData& SnapshotIn);
	void SetSuspensionParams(float Rate, float Damping, float Preload, float MaxRaise, float MaxDrop, int32 WheelIndex);
	void SetTorqueCombineMethod(ETorqueCombineMethod InCombineMethod, int32 WheelIndex);
	void SetTractionControlEnabled(int32 WheelIndex, bool Enabled);
	void SetWheelClass(int32 WheelIndex, TSubclassOf<class UChaosVehicleWheel> InWheelClass);
	void SetWheelFrictionMultiplier(int32 WheelIndex, float Friction);
	void SetWheelHandbrakeTorque(int32 WheelIndex, float Torque);
	void SetWheelMaxBrakeTorque(int32 WheelIndex, float Torque);
	void SetWheelMaxSteerAngle(int32 WheelIndex, float AngleDegrees);
	void SetWheelRadius(int32 WheelIndex, float Radius);
	void SetWheelSlipGraphMultiplier(int32 WheelIndex, float Multiplier);

	float GetEngineMaxRotationSpeed() const;
	float GetEngineRotationSpeed() const;
	int32 GetNumWheels() const;
	struct FWheeledSnaphotData GetSnapshot() const;
	const struct FWheelStatus GetWheelState(int32 WheelIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosWheeledVehicleMovementComponent">();
	}
	static class UChaosWheeledVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosWheeledVehicleMovementComponent>();
	}
};
static_assert(alignof(UChaosWheeledVehicleMovementComponent) == 0x000010, "Wrong alignment on UChaosWheeledVehicleMovementComponent");
static_assert(sizeof(UChaosWheeledVehicleMovementComponent) == 0x000CF0, "Wrong size on UChaosWheeledVehicleMovementComponent");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, bSuspensionEnabled) == 0x0009C0, "Member 'UChaosWheeledVehicleMovementComponent::bSuspensionEnabled' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, bWheelFrictionEnabled) == 0x0009C1, "Member 'UChaosWheeledVehicleMovementComponent::bWheelFrictionEnabled' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, bLegacyWheelFrictionPosition) == 0x0009C2, "Member 'UChaosWheeledVehicleMovementComponent::bLegacyWheelFrictionPosition' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, WheelSetups) == 0x0009C8, "Member 'UChaosWheeledVehicleMovementComponent::WheelSetups' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, WheelTraceCollisionResponses) == 0x0009D8, "Member 'UChaosWheeledVehicleMovementComponent::WheelTraceCollisionResponses' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, bMechanicalSimEnabled) == 0x0009F8, "Member 'UChaosWheeledVehicleMovementComponent::bMechanicalSimEnabled' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, EngineSetup) == 0x000A00, "Member 'UChaosWheeledVehicleMovementComponent::EngineSetup' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, DifferentialSetup) == 0x000AD0, "Member 'UChaosWheeledVehicleMovementComponent::DifferentialSetup' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, TransmissionSetup) == 0x000AE0, "Member 'UChaosWheeledVehicleMovementComponent::TransmissionSetup' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, SteeringSetup) == 0x000B50, "Member 'UChaosWheeledVehicleMovementComponent::SteeringSetup' has a wrong offset!");
static_assert(offsetof(UChaosWheeledVehicleMovementComponent, Wheels) == 0x000C30, "Member 'UChaosWheeledVehicleMovementComponent::Wheels' has a wrong offset!");

// Class ChaosVehicles.VehicleAnimationInstance
// 0x0740 (0x0AB0 - 0x0370)
class UVehicleAnimationInstance final : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x738];                                    // 0x0368(0x0738)(Fixing Size After Last Property [ Dumper-7 ])
	class UChaosWheeledVehicleMovementComponent*  WheeledVehicleComponent;                           // 0x0AA0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AA8[0x8];                                      // 0x0AA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AWheeledVehiclePawn* GetVehicle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAnimationInstance">();
	}
	static class UVehicleAnimationInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleAnimationInstance>();
	}
};
static_assert(alignof(UVehicleAnimationInstance) == 0x000010, "Wrong alignment on UVehicleAnimationInstance");
static_assert(sizeof(UVehicleAnimationInstance) == 0x000AB0, "Wrong size on UVehicleAnimationInstance");
static_assert(offsetof(UVehicleAnimationInstance, WheeledVehicleComponent) == 0x000AA0, "Member 'UVehicleAnimationInstance::WheeledVehicleComponent' has a wrong offset!");

// Class ChaosVehicles.WheeledVehiclePawn
// 0x0010 (0x03E0 - 0x03D0)
class AWheeledVehiclePawn : public APawn
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChaosVehicleMovementComponent*         VehicleMovementComponent;                          // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheeledVehiclePawn">();
	}
	static class AWheeledVehiclePawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWheeledVehiclePawn>();
	}
};
static_assert(alignof(AWheeledVehiclePawn) == 0x000008, "Wrong alignment on AWheeledVehiclePawn");
static_assert(sizeof(AWheeledVehiclePawn) == 0x0003E0, "Wrong size on AWheeledVehiclePawn");
static_assert(offsetof(AWheeledVehiclePawn, Mesh) == 0x0003D0, "Member 'AWheeledVehiclePawn::Mesh' has a wrong offset!");
static_assert(offsetof(AWheeledVehiclePawn, VehicleMovementComponent) == 0x0003D8, "Member 'AWheeledVehiclePawn::VehicleMovementComponent' has a wrong offset!");

}

